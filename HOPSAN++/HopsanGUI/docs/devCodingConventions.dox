/*!
\page coding-conventions Hopsan Coding Conventions
The following coding conventions are to be used both in HopsanCore and HopsanGUI.

\section bracket-style Bracket Style
There shall be one line break before all brackets.

\b Example:

\code
int MyFunction(int a, int b)
{
    int returnValue;
    if(a > b)
    {
        returnValue = b-a;
    }
    else
    {
        returnValue = a-b;
    }
    return returnValue;
}
\endcode

Exceptions can be made for short one-line code blocks, but are generally not recommended.

\b Example:

\code
if(a > max) { a = max; }
\endcode

    
\section variables Variable Names
All code shall be self commenting. This means that non-obvious abbreviations shall be avoided. The purpose of a variable shall be well described by its name. Exceptions are component equations, where the physical denotation of the variable is to be used.

\b Correct:
-# currentTimeStep
-# distanceToCenter
-# Kc
-# rho

\b Incorrect:
-# cTimeStep
-# cTstep
-# distToC
-# distC
-# flowCoefficient
-# oilDensity

Variables begin with small letters, while every new word in the name shall be capitalized. 

\b Correct:
-# someHopsanVariable

\b Incorrect:
-# somehopsanvariable
-# SomeHopsanVariable

Certain varibles shall have one or more small description letters prepended:

-# g = Global variable (can be used anywhere in program)
-# m = Member varible (can only be used in the current class)
-# p = Pointer 
-# n = Number variable

More than one letter can be used at a time. When these letters are prepended, the first letter in the actual variable name shall be capitalized. 

\b Examples:
-# mSomeHopsanVariable   (member variable)
-# mpSomeHopsanVariable  (member pointer)
-# gSomeHopsanVariable   (global variable)
-# nThreads              (variable describing "number of threads")

All global variables, member variables, pointers and number variables must have these prepend letters. The only exception are for public member variables that are only used externally, i.e. in classes which are used as variable containeres.

\b Example:
-# myMessage.type        (will return the type name of the message)

*/
