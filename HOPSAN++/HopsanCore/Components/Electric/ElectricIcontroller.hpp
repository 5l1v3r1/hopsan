#ifndef ELECTRICICONTROLLER_HPP_INCLUDED
#define ELECTRICICONTROLLER_HPP_INCLUDED

#include <iostream>
//#include <Qt/qdebug.h>
#include "../../HopsanCore/ComponentEssentials.h"
#include "../../HopsanCore/ComponentUtilities.h"
#include <math.h>
#include "matrix.h"

//!
//! @file ElectricIcontroller.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 8 Jul 2011 23:26:26
//! @brief This is an imaginary analog componenent that represents a PWM current controller.
//! @ingroup ElectricComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/ElectricNG5.nb*/

using namespace hopsan;

class ElectricIcontroller : public ComponentQ
{
private:
     double mresist;
     double mwf;
     double mumin;
     double mimax;
     double mimin;
     double mumax;
     Port *mpPel1;
     Port *mpPel2;
     Port *mpPiref;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     int jsyseqnweight[4];
     int order[4];
     int mNstep;
     //Port Pel1 variable
     double uel1;
     double iel1;
     double cel1;
     double Zcel1;
     //Port Pel2 variable
     double uel2;
     double iel2;
     double cel2;
     double Zcel2;
     //Port Piref variable
     double iref;
     //inputVariables
     //outputVariables
     //Port Pel1 pointer
     double *mpND_uel1;
     double *mpND_iel1;
     double *mpND_cel1;
     double *mpND_Zcel1;
     //Port Pel2 pointer
     double *mpND_uel2;
     double *mpND_iel2;
     double *mpND_cel2;
     double *mpND_Zcel2;
     //Port Piref pointer
     double *mpND_iref;
     //Delay declarations
     //inputVariables pointers
     //outputVariables pointers
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart20;

public:
     static Component *Creator()
     {
        std::cout << "running ElectricIcontroller creator" << std::endl;
        return new ElectricIcontroller("Icontroller");
     }

     ElectricIcontroller(const std::string name = "Icontroller"
                             ,const double resist = 0.01
                             ,const double wf = 0.01
                             ,const double umin = 1
                             ,const double imax = 10000.
                             ,const double imin = 0.01
                             ,const double umax = 1000.
                             )
        : ComponentQ(name)
     {
        mNstep=9;
        jacobianMatrix.create(4,4);
        systemEquations.create(4);
        delayedPart.create(5,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mresist = resist;
        mwf = wf;
        mumin = umin;
        mimax = imax;
        mimin = imin;
        mumax = umax;

        //Add ports to the component
        mpPel1=addPowerPort("Pel1","NodeElectric");
        mpPel2=addPowerPort("Pel2","NodeElectric");
        mpPiref=addReadPort("Piref","NodeSignal");

        //Add inputVariables ports to the component

        //Add outputVariables ports to the component

        //Register changable parameters to the HOPSAN++ core
        registerParameter("resist", "loss resistans (at 1)", "ohm", mresist);
        registerParameter("wf", "controller break frequency", "rad/s", mwf);
        registerParameter("umin", "minimum voltage difference", "V", mumin);
        registerParameter("imax", "i max limit", "A", mimax);
        registerParameter("imin", "i min limit", "A", mimin);
        registerParameter("umax", "u max limit", "V", mumax);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Pel1
        mpND_uel1=getSafeNodeDataPtr(mpPel1, NodeElectric::VOLTAGE);
        mpND_iel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CURRENT);
        mpND_cel1=getSafeNodeDataPtr(mpPel1, NodeElectric::WAVEVARIABLE);
        mpND_Zcel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CHARIMP);
        //Port Pel2
        mpND_uel2=getSafeNodeDataPtr(mpPel2, NodeElectric::VOLTAGE);
        mpND_iel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CURRENT);
        mpND_cel2=getSafeNodeDataPtr(mpPel2, NodeElectric::WAVEVARIABLE);
        mpND_Zcel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CHARIMP);
        //Port Piref
        mpND_iref=getSafeNodeDataPtr(mpPiref, NodeSignal::VALUE);
        //Read inputVariables pointers from nodes
        //Read outputVariable pointers from nodes

        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);
        //Port Pel2
        uel2 = (*mpND_uel2);
        iel2 = (*mpND_iel2);
        cel2 = (*mpND_cel2);
        Zcel2 = (*mpND_Zcel2);
        //Port Piref

        //Read inputVariables from nodes

        //Read outputVariables from nodes



        //Initialize delays
        delayParts1[1] = (iel1*iref*mresist*mTimestep*mwf + \
iref*mTimestep*mwf*uel1 - iref*mTimestep*mwf*uel2 - \
2*iel1*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax) + \
iel1*mTimestep*mwf*limit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax))/(iref*mresist*mTimestep*mwf + 2*limit(-(iel2*mresist) + \
uel1 - uel2,mumin,mumax) + mTimestep*mwf*limit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax));
        mDelayedPart11.initialize(mNstep,delayParts1[0]);
     }
    void simulateOneTimestep()
     {
        Vec stateVar(4);
        Vec stateVark(4);
        Vec deltaStateVar(4);

        //Read variables from nodes
        //Port Pel1
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);
        //Port Pel2
        cel2 = (*mpND_cel2);
        Zcel2 = (*mpND_Zcel2);
        //Port Piref
        iref = (*mpND_iref);

        //Read inputVariables from nodes

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = iel1;
        stateVark[1] = iel2;
        stateVark[2] = uel1;
        stateVark[3] = uel2;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //Icontroller
         //Differential-algebraic system of equation parts
          delayParts1[1] = (iel1*iref*mresist*mTimestep*mwf + \
iref*mTimestep*mwf*uel1 - iref*mTimestep*mwf*uel2 - \
2*iel1*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax) + \
iel1*mTimestep*mwf*limit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax))/(iref*mresist*mTimestep*mwf + 2*limit(-(iel2*mresist) + \
uel1 - uel2,mumin,mumax) + mTimestep*mwf*limit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax));

          delayedPart[1][1] = delayParts1[1];
          delayedPart[2][1] = delayParts2[1];
          delayedPart[3][1] = delayParts3[1];
          delayedPart[4][1] = delayParts4[1];

          //Assemble differential-algebraic equations
          systemEquations[0] =iel1 + (iref*mTimestep*mwf*(uel1 - \
uel2))/(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax)) + \
delayedPart[1][1];
          systemEquations[1] =iel2 + (iel1*(iel1*mresist + \
limit(uel1,mumin,mumax)))/limit(uel2,mumin,mumax);
          systemEquations[2] =-cel1 + uel1 - iel1*Zcel1;
          systemEquations[3] =-cel2 + uel2 - iel2*Zcel2;

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = (iref*mresist*mTimestep*mwf*(2 + \
mTimestep*mwf)*(uel1 - uel2)*dxLimit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax))/Power(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax),2);
          jacobianMatrix[0][2] = -((iref*mTimestep*mwf*(2 + \
mTimestep*mwf)*(uel1 - uel2)*dxLimit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax))/Power(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax),2)) + \
(iref*mTimestep*mwf)/(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax));
          jacobianMatrix[0][3] = (iref*mTimestep*mwf*(2 + \
mTimestep*mwf)*(uel1 - uel2)*dxLimit(-(iel2*mresist) + uel1 - \
uel2,mumin,mumax))/Power(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax),2) - \
(iref*mTimestep*mwf)/(iref*mresist*mTimestep*mwf + (2 + \
mTimestep*mwf)*limit(-(iel2*mresist) + uel1 - uel2,mumin,mumax));
          jacobianMatrix[1][0] = (iel1*mresist)/limit(uel2,mumin,mumax) + \
(iel1*mresist + limit(uel1,mumin,mumax))/limit(uel2,mumin,mumax);
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = \
(iel1*dxLimit(uel1,mumin,mumax))/limit(uel2,mumin,mumax);
          jacobianMatrix[1][3] = \
-((iel1*dxLimit(uel2,mumin,mumax)*(iel1*mresist + \
limit(uel1,mumin,mumax)))/Power(limit(uel2,mumin,mumax),2));
          jacobianMatrix[2][0] = -Zcel1;
          jacobianMatrix[2][1] = 0;
          jacobianMatrix[2][2] = 1;
          jacobianMatrix[2][3] = 0;
          jacobianMatrix[3][0] = 0;
          jacobianMatrix[3][1] = -Zcel2;
          jacobianMatrix[3][2] = 0;
          jacobianMatrix[3][3] = 1;

          //Solving equation using LU-faktorisation
          ludcmp(jacobianMatrix, order);
          solvlu(jacobianMatrix,systemEquations,deltaStateVar,order);

        for(i=0;i<4;i++)
          {
          stateVar[i] = stateVark[i] - 
          jsyseqnweight[iter - 1] * deltaStateVar[i];
          }
        for(i=0;i<4;i++)
          {
          stateVark[i] = stateVar[i];
          }
        }
        iel1=stateVark[0];
        iel2=stateVark[1];
        uel1=stateVark[2];
        uel2=stateVark[3];

        //Write new values to nodes
        //Port Pel1
        (*mpND_uel1)=uel1;
        (*mpND_iel1)=iel1;
        //Port Pel2
        (*mpND_uel2)=uel2;
        (*mpND_iel2)=iel2;
        //Port Piref
        //outputVariables

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
};
#endif // ELECTRICICONTROLLER_HPP_INCLUDED
