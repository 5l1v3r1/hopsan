#ifndef ELECTRICCAPACITANCE2_HPP_INCLUDED
#define ELECTRICCAPACITANCE2_HPP_INCLUDED

#include <iostream>
#include "../../ComponentEssentials.h"
#include "../../ComponentUtilities.h"
#include <math.h>
#include "matrix.h"

//!
//! @file ElectricCapacitance2.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 10 Jun 2011 16:31:22
//! @brief Capacitance
//! @ingroup ElectricComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/ElectricNG1.nb*/

using namespace hopsan;

class ElectricCapacitance2 : public ComponentC
{
private:
     double mCc;
     double malpha;
     double mtimestep;
     Port *mpPel1;
     Port *mpPel2;
     int mNstep;
     //Port Pel1 variable
     double uel1;
     double iel1;
     double cel1;
     double Zcel1;
     //Port Pel2 variable
     double uel2;
     double iel2;
     double cel2;
     double Zcel2;
     //Port Pel1 pointer
     double *mpND_uel1;
     double *mpND_iel1;
     double *mpND_cel1;
     double *mpND_Zcel1;
     //Port Pel2 pointer
     double *mpND_uel2;
     double *mpND_iel2;
     double *mpND_cel2;
     double *mpND_Zcel2;
     //Delay declarations
     Delay mDelaycel2rf;
     Delay mDelaycel1rf;


public:
     static Component *Creator()
     {
        std:://cout << "running ElectricCapacitance2 creator" << std::endl;
        return new ElectricCapacitance2("Capacitance2");
     }

     ElectricCapacitance2(const std::string name = "Capacitance2",
                             const double Cc = 0.0001,
                             const double alpha = 0.1,
                             const double timestep = 0.001)
        : ComponentC(name)
     {
        mNstep=9;
        mCc = Cc;
        malpha = alpha;
        mtimestep = timestep;

        //Add ports to the component
        mpPel1=addPowerPort("Pel1","NodeElectric");
        mpPel2=addPowerPort("Pel2","NodeElectric");

        //Register changable parameters to the HOPSAN++ core
        registerParameter("Cc", "Capacitance", "(A s)/V", mCc);
        registerParameter("alpha", "numerical damping", "", malpha);
        registerParameter("timestep", "Simulation time step", "s", \
mtimestep);
     }

    void initialize()
     {
        //Read variables from nodes
        //Port Pel1
        mpND_uel1=getSafeNodeDataPtr(mpPel1, NodeElectric::VOLTAGE);
        mpND_iel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CURRENT);
        mpND_cel1=getSafeNodeDataPtr(mpPel1, NodeElectric::WAVEVARIABLE);
        mpND_Zcel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CHARIMP);
        //Port Pel2
        mpND_uel2=getSafeNodeDataPtr(mpPel2, NodeElectric::VOLTAGE);
        mpND_iel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CURRENT);
        mpND_cel2=getSafeNodeDataPtr(mpPel2, NodeElectric::WAVEVARIABLE);
        mpND_Zcel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CHARIMP);

        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);
        //Port Pel2
        uel2 = (*mpND_uel2);
        iel2 = (*mpND_iel2);
        cel2 = (*mpND_cel2);
        Zcel2 = (*mpND_Zcel2);


        //InitialExpressions
        double cel2r = cel2 + 2*iel2*Zcel2;
        double cel1r = cel1 + 2*iel1*Zcel1;
        double cel1rf= cel1r;
        double cel2rf = cel2r;
        ////qDebug() << "cel1" << cel1 << "cel2" << cel2 << "cel1r" << cel1r << "cel2r" << cel2r << "Zcel1" << Zcel1 << "Zcel2" << Zcel2;
        ////qDebug() << "cel1rf" << cel1rf << "cel2rf" << cel2rf;

        //Initialize delays
        mDelaycel2rf.initialize(mNstep,cel2rf);
        mDelaycel1rf.initialize(mNstep,cel1rf);
     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);
        //Port Pel2
        uel2 = (*mpND_uel2);
        iel2 = (*mpND_iel2);
        cel2 = (*mpND_cel2);
        Zcel2 = (*mpND_Zcel2);



        //LocalExpressions
        double cel2r = cel2 + 2*iel2*Zcel2;
        double cel1r = cel1 + 2*iel1*Zcel1;
        double cel1rf = cel1r*(1 - malpha) + mDelaycel1rf.getIdx(1)*malpha;
        double cel2rf = cel2r*(1 - malpha) + mDelaycel2rf.getIdx(1)*malpha;

        //Expressions
        double Zcel1 = mtimestep/((1 - malpha)*mCc);
        double Zcel2 = mtimestep/((1 - malpha)*mCc);
        double cel1 = cel2rf;
        double cel2 = cel1rf;

        //Write new values to nodes
        //Port Pel1
        (*mpND_cel1)=cel1;
        (*mpND_Zcel1)=Zcel1;
        //Port Pel2
        (*mpND_cel2)=cel2;
        (*mpND_Zcel2)=Zcel2;

        //Update the delayed variabels
        //Initialize delays
        mDelaycel2rf.update(cel2rf);
        mDelaycel1rf.update(cel1rf);
     }
};
#endif // ELECTRICCAPACITANCE2_HPP_INCLUDED
