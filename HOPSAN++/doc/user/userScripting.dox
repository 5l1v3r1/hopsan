/*!

\page userScriptingPage Scripting
Most functions in Hopsan can be accessed through the command interpreter in the terminal widget. The command language is called HCOM and is loosely based upon the commands used in the previous version of Hopsan (the one from 2001). Apart from the commands and functions, there is a built-in calculator that can evaluate mathematical expressions using the SymHop library.

See \subpage userScriptingPageHcomPage for details.

A Python interpreter is also included to run Python scripts. The idea is that these scripts also should be able to access some functions in the Hopsan GUI and that they will allow the user to run any python commands and external python based tools or custom code. \n
\b Note! Currently the python support is not working very well, it is not even included in some builds of Hopsan. This may change in the future.

See \subpage userScriptingPagePythonPage for details.
*/

/*!
\page userScriptingPageHcomPage HCOM Scripting
HCOM is the built-in scripting language in Hopsan. It can control most parts of the program, either from the terminal widget or through external script files. 
Use the \c help command to list all available commands or \c help \c \<command\> \endverbatim to get help for a specific commands.<br>

All available commands are listed below. 

\section simulationcommands Simulation Commands

\subsection sim sim
Simulates current model (or all open models)<br>
 Usage: sim [all]

\subsection chss chss
Change simulation settings<br>
 Usage: chss [starttime timestep stoptime [samples]]

\subsection chts chts
Change time step of sub-component<br>
 Usage: chts [comp timestep]

\subsection ints ints
Inherit time step of sub-component from system time step<br>
 Usage: ints [comp]

\section plotcommands Plot Commands

\subsection chpv chpv
Change plot variables in current plot<br>
 Usage: chpv [leftvar1 [leftvar2] ... [-r rightvar1 rightvar2 ... ]]

\subsection adpv adpv
Add plot variables in current plot<br>
 Usage: adpv [leftvar1 [leftvar2] ... [-r rightvar1 rightvar2 ... ]]

\subsection adpvl adpvl
Adds plot variables on left axis in current plot<br>
 Usage: adpvl [var1 var2 ... ]

\subsection adpvr adpvr
Adds plot variables on right axis in current plot<br>
 Usage: adpvr [var1 var2 ... ]

\subsection chpw chpw
Changes current terminal plot window<br>
 Usage: chpw [name]

\subsection dipw dipw
Displays current terminal plot window<br>
 Usage: dipw [no arguments]

\subsection chpvl chpvl
Changes plot variables on left axis in current plot<br>
 Usage: chpvl [var1 var2 ... ]

\subsection chpvr chpvr
Changes plot variables on right axis in current plot<br>
 Usage: chpvr [var1 var2 ... ]

\subsection sapl sapl
Saves plot file to .PLO<br>
 Usage: sapl [filepath variables]

\subsection repl repl
Loads plot files from .CSV or .PLO<br>
 Usage: repl [filepath]

\subsection bode bode
Creates a bode plot from specified curves<br>
 Usage: bode [invar outvar maxfreq]

\section parametercommands Parameter Commands

\subsection dipa dipa
Display parameter value<br>
 Usage: dipa [parameter]

\subsection adpa adpa
Add (system) parameter<br>
 Usage: adpa [parameter] [value]

\subsection chpa chpa
Change parameter value<br>
 Usage: chpa [parameter value]

\section filecommands File Commands

\subsection exec exec
Executes a script file<br>
 Usage: exec [filepath]

\subsection wrhi wrhi
Writes history to file<br>
 Usage: wrhi [filepath]

\subsection pwd pwd
Displays present working directory<br>
 Usage: pwd [no arguments]

\subsection mwd mwd
Displays working directory of current model<br>
 Usage: mwd [no arguments]

\subsection cd cd
Changes present working directory<br>
 Usage: cd [directory]

\subsection ls ls
List files in current directory<br>
 Usage: ls [no arguments]

\subsection edit edit
Open file in external editor<br>
 Usage: edit [filepath]

\section variablecommands Variable Commands

\subsection disp disp
Shows a list of all variables matching specified name filter (using asterisks)<br>
 Usage: disp [filter]

\subsection peek peek
Shows the value at a specified index in a specified data variable<br>
 Usage: peek [variable index]

\subsection poke poke
Changes the value at a specified index in a specified data variable<br>
 Usage: poke [variable index newvalue]

\subsection alias alias
Defines an alias for a variable<br>
 Usage: alias [variable alias]

\subsection rmvar rmvar
Removes specified variable<br>
 Usage: rmvar [variable]

\subsection chdfsc chdfsc
Change default plot scale of specified variable<br>
 Usage: chdfsc [variable scale]

\subsection didfsc didfsc
Display default plot scale of specified variable<br>
 Usage: didfsc [variable]

\subsection chsc chsc
Change plot scale of specified variable<br>
 Usage: chsc [variable scale]

\subsection disc disc
Display plot scale of specified variable<br>
 Usage: disc [variable]

\subsection abs abs
Calculates absolute value of scalar of variable<br>
 Usage: abs [var]

\section modelcommands Model Commands

\subsection load load
Loads a model file<br>
 Usage: load [filepath variables]

\subsection loadr loadr
Loads most recent model file<br>
 Usage: loadr [no arguments]

\subsection reco reco
Renames a component<br>
 Usage: reco [oldname] [newname]

\subsection rmco rmco
Removes specified component(s)<br>
 Usage: rmco [component]

\subsection chtab chtab
Changes current model tab<br>
 Usage: chtab [index]

\subsection adco adco
Adds a new component to current model<br>
 Usage: adco [typename name -flag value]

\subsection coco coco
Connect components in current model<br>
 Usage: coco [comp1 port1 comp2 port2]

\subsection crmo crmo
Creates a new model<br>
 Usage: crmo [no arguments]

\section othercommands Other Commands

\subsection help help
Shows help information<br>
 Usage: help [command]

\subsection exit exit
Exits the program<br>
 Usage: exit [no arguments]

\subsection print print
Prints arguments on the screen<br>
 Usage: print [-flag "string"]
<br> Flags (optional):
<br> -i Info message
<br> -w Warning message
<br> -e Error message
<br> Variables can be printed by putting them in dollar signs.
<br> Example:
<br> \>\> print -w "x=$x$"
<br> Warning: x=12

\subsection set set
Sets Hopsan preferences<br>
 Usage: set [preference value]
<br> Available commands:
<br>  multicore [on/off]
<br>  threads [number]
<br>  cachetodisk [on/off]
<br>  generationlimit [number]
<br>  samples [number]

\subsection close close
Closes current model<br>
 Usage: close [no arguments]

\subsection fmu fmu
Exports current model to Functional Mockup Unit (FMU)<br>
 Usage: fmu [path]

\subsection opt opt
Initialize an optimization<br>
 Usage: opt [algorithm partype parnum parmin parmax -flags]
<br>Algorithms:   Flags:
<br>complex       alpha

\subsection call call
Calls a pre-defined function<br>
 Usage: call [funcname]

\subsection echo echo
Sets terminal output on or off<br>
 Usage: echo [on/off]

\subsection semt semt
Applies low-pass filter of first degree to vector<br>
 Usage: semt [on/off threads algorithm]

\section functions Local Functions

\subsection aver aver()
Calculate average value of vector

\subsection ddt ddt()
Differentiates vector with respect to time (or to custom vector)

\subsection fft fft()
Generates frequency spectrum plot from vector

\subsection gt gt()
Index-wise greater than check between vector and scalar (equivalent to ">" operator)

\subsection imax imax()
Calculate index of maximum value of vector

\subsection imin imin()
Calculate index of minimum value of vector

\subsection int int()
Integrates vector with respect to time (or to custom vector)

\subsection lp1 lp1()
Applies low-pass filter of first degree to vector

\subsection lt lt()
Index-wise less than check between vector and scalar  (equivalent to "<" operator)

\subsection max max()
Calculate maximum value of vector

\subsection min min()
Calculate minimum value of vector

\subsection obj obj()
Returns optimization objective function value with specified index

\subsection optpar optpar()
Returns specified optimization parameter

\subsection optvar optvar()
Returns specified optimization variable

\subsection peek peek()
Returns vector value at specified index

\subsection rand rand()
Generates a random value between 0 and 1

\subsection size size()
Calculate the size of a vector

\subsection time time()
Returns last simulation time

*/


/*!
\page userScriptingPagePythonPage Python Scripting
The Python Console in Hopsan can be used for scripting simulations of your models. It include features for modify parameters, set simulation times and so on. All Python interaction with Hopsan is done trough an object called "hopsan". The commands as well as command examples are available and described below. 

\b Note! Python script functions are not working very well! It is recommended that you use HCOM instead. Python script support may be improved in a future release.

\section generalcommands General Commands

\subsection newmodel newModel()
Create a new model.

\subsection loadmodel loadModel(modelFileName)
Load the model "modelFileName". Example: hopsan.loadModel("c:\mymodel.hmf")

\subsection closeallmodels closeAllModels()
Closes all opened models.

\subsection gototab gotoTab(tab)
Changes active tab to specified tab number.

\subsection printmessage printMessage(message)
Prints a message in the Messages Console. Example: hopsan.printMessage("Goddag yxskaft.")

\subsection printinfo printInfo(message)
Prints a info message in the Messages Console. Example: hopsan.printInfo("Goddag yxskaft.")

\subsection printwarning printWarning(message)
Prints a warning message in the Messages Console. Example: hopsan.printWarning("Goddag yxskaft.")

\subsection printerror printError(message)
Prints a error message in the Messages Console. Example: hopsan.printError("Goddag yxskaft.")

\subsection component component(compName)
Returns a handle to a component. Example: A handle to a component called "myComponent" can be reaced and stored in "myHandle" with the command line: myHandle = hopsan.component("myComponent")

\subsection setstarttime setStartTime(start)
Sets the start time of a simulation. Example: hopsan.setStartTime(1.62)

\subsection settimestep setTimeStep(timestep)
Sets the time step of a simulation. Example: hopsan.setTimeStep(0.002)

\subsection setfinishtime setFinishTime(stop)
Sets the finish time of a simulation. Example: hopsan.setFinishTime(16.2)

\subsection getstarttime getStartTime()
Returns the start time of a simulation. Example: startTime = hopsan.getStartTime()

\subsection gettimestep getTimeStep()
Returns the time step time of a simulation. Example: timeStep = hopsan.getTimeStep()

\subsection getfinishtime getFinishTime()
Returns the finish time of a simulation. Example: finishTime = hopsan.getFinishTime()

\subsection simulate simulate()
Simulates the current model. Example hopsan.simulate()

\subsection simulateallopenmodels simulateAllOpenModels()
Simulates all open models. If multi-threaded simulations is enabled, models will be simulated in parallel.

\subsection getparameter getParameter(compName, parName)
Returns the value for the parameter "parName" in the component "compName", Example: value = hopsan.getParameter("myOrifice", "Kc")

\subsection setparameter setParameter(compName, parName, value)
Sets the value for the parameter "parName" in the component "compName" to "value", Example: value = hopsan.setParameter("myOrifice", "Kc", 1e-11)

\subsection setsystemparameter setSystemParameter(parName, value)
Sets the system parameter "parName" to "value" in current system.

\subsection addcomponent addComponent(name, typename, x, y, rotation)
Adds a new component with specified name and typename at position (x,y) with specified rotation. Example: hopsan.addComponent("My Orifice", "HydraulicLaminarOrifice", 2000, 2100, 90)

\subsection connect connect(compName1, portName1, compName2, portName2)
Connects specified ports with a straight connector. Example: connect("My Orifice", "P1", "My Volume", "P2")

\subsection entersystem enterSystem(sysName)
Enter subsystem with specified name. Example: hopsan.enterSystem("My Subsystem")

\subsection exitsystem exitSystem()
Leaves current subsystem and opens parent system.

\subsection clear clear()
Removes all components and connections in current container.

\subsection plot plot(compName, portName, dataName)
Plots the variable "dataName" in the port "portName" of the component "compName". Example: hopsan.plot("sink", "in", "Value")

\subsection plot2 plot(alias)
Plots the variable with alias name "alias".
	
\subsection plottowindow plotToWindow(generation, compName, portName, dataName, windowNumber)
Plots the specified generation of variable "dataName" in the port "portName" of the component "compName" to specified plot window. Plot window numbers begin at 0 for first window. Example: hopsan.plot(3, "sink", "in", "Value", 0)

\subsection saveplotdata savePlotData(fileName, plotWindowNumber)
Saves all plot data in specified plot window to a comma-separated values (.CSV) file. Example: hopsan.savePlotData("c:/data.csv", 2) 	

\subsection closelastplotwindow closeLastPlotWindow()
Closes the last opened plot window.

\subsection refreshlastplotwindow refreshLastPlotWindow()
Forces curves in first plot tab in last opened plot window to update their values to the latest plot generation.
	
\subsection getsimulationtime getSimulationTime()
Returns the actual simlation time from last simulation. Example: hopsan.getSimlationTime()
	
\subsection usemulticore useMultiCore()
Activates multi-threaded simulations. Example: hopsan.useMultiCore()
	
\subsection usesinglecore useSingleCore()
Deactivates multi-threaded simulations. Example: hopsan.useSingleCore()
	
\subsection setnumberofthreads setNumberOfThreads(value)
Specifies how many simlation threads that will be used in multi-threaded simulations. Example: hopsan.setNumberOfThreads(2)
	
\subsection turnonprogressbar turnOnProgressBar()
Enables the simulation progress bar. Example: hopsan.turnOnProgressBar()
	
\subsection turnoffprogressbar turnOffProgressBar()
Disables the simulation progress bar. Example: hopsan.turnOffProgressBar()


\section componentcommands Component Commands

\subsection getparameter parameter(parName)
Returns the value in parameter "parName".
Example: Kc = hopsan.component("Orifice").parameter("Kc")

\subsection setparameter setParameter(parName, value)
Sets the parameter "parName" to "value".
Example: hopsan.component("Orifice").setParameter("Kc", 1e-10)

\subsection port port(portName)
Returns a handle to the port "portName"
Example: hopsan.component("Orifice").port("P2")

\subsection portnames portNames()
Returns an array of port names in the component
Example hopsan.component("Orifice").portNames()


\section portcommands Port Commands

\subsection portplot plot(dataName)
Opens a new plot window with the variable "dataName".
Example: hopsan.component("Orifice").port("P2").plot("Pressure")

\subsection getlastvalue lastData(dataName)
Returns the last value of variabel "dataName".
Example: lastP1 = hopsan.component("Orifice").port("P2").lastData("Pressure")

\subsection getdatavector data(dataName)
Returns the data vector from last simulation for variable "dataName".
Example: pressuredata = hopsan.component("Orifice").port("P2").data("Pressure")

\subsection gettimevector time()
Returns the time vector from last simulation.
Example: time = hopsan.component("Orifice").port("P2").time()

*/

