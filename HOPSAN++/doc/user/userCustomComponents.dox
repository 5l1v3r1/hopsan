/*!
\page userAutomaticCodeGenerationPage Automatically generating Component Code
\section component-generator Component Generator Dialog
Hopsan has a built-in component generator dialog, from where new components can be written without deeper knowledge of the Hopsan simulation core interface. It accessed from the "Generate New Component" icon at the bottom of the library widget.

\htmlonly
<table border="0">
<tr>
<td>&nbsp;&nbsp;&nbsp;<img src="../../graphics/generatenewcomponent_icon.png" border=0>
</td>
<td><b>Generate New Component</b></td>
</tr>
</table>
\endhtmlonly

In this dialog it is possible to specify component name (used by simulation core, must not contain spaces), display name (shown in graphical interface) and component type (C,Q or S - see the \ref userTransmissionLineElementMethod "transmission line element method"). It is also possible to add ports, parameters, utility functions and static variables. Finally, the code for the component can be written in two ways, either directly from C++ code, or from algebraic equations using a subset of the Modelica language.

When writing C++ code, there are three functions available: Initialize, SimulateOneTimeStep and Finalize. Initialize are ran before the first time step of the simulation, SimulateOneTimeStep is ran every time step, and finalize are ran after the simulation is finished. Available and sought parameters are displayed above the code boxes. When clicking compile, the component will be converted to Hopsan interface syntax and compiled to an external library.

The other option is to use equations. This function is currently an experimental feature, and full functionality is not guaranteed. Equation-based modeling has several advantages over plain code modeling. It allows equations written in arbitary ways, i.e. more than one variable on the left side. Equations can also be written in any order, as long as the number of equations equals the number of unknown variables. The language used is a subset of Modelica. It allows most basic functionality in the equation section. There is also an algorithm section, that will be executed prior to the equation solver each time step. This section does not support all modelica algorithm functionalities, and is basically intended only for defining explicit expressions that does not need to be part of the equation system. When compiling, a symbolic Jacobian matrix is generated and displayed in a popup window. This is then transformed to Hopsan syntax, together with a fixed-step equation system solver.

Generated components are loaded automatically into a "Generated Component" library.

\section generating-components-mathematica Generating Components From Mathematica
This feature is not implemented in the current version of Hopsan. In future releases it will be possible to automatically generate components from equations in Mathematica.

\page userUnitTestModelsAndComponentsPage Model and Component Unit-Testing
When you have finished a component and/or model and you are satisfied with the simulation results you can save you model and some of the simulation results
as a test model. You can later run this model again and automatically compare the simulation results. This is very important if you want to make sure that 
your component and models do not change their behaviour when new versions of Hopsan are released.

\section userUnitTestModelsAndComponentsPage-components_howtocreate How to Create a Validation Model
-# Open your model in HopsanGUI and simulate it.
  -# Add the variables (from ports) that you want to use as validation data to a plot window.
  -# Export the data as HVC (Hopsan Validation Configuration) and CSV (Comma Separated Values) files. The column order in the csv file is determined by the order you added curves.
-# The generated hvc file contains default entries. You may want to manually edit it, see format description below.
-# Store the model, dataset and hvc file in  a safe place. Remember that you can not make any more changes (that affect simulation results) to the model file.

\section userUnitTestModelsAndComponentsPage-components_howtotest How to Test a Validation Model
-# Use the HopsanCLI (Hopsan CommandLineInterface) with the -t (for test) switch according to:
  -# Windows: HopsanCLI.exe -t "MyHVCFile.hvc"
  -# Ubuntu:  ./HopsanCLI -t "MyHVCFile.hvc"
-# If you want to automatically test multiple models, then you should write a script that goes through all of your hvc files.

\section userUnitTestModelsAndComponentsPage-components_hvc-format The HVC (Hopsan Validation Configuration) Format
This is an example HVC File. Note that you can have multiple <validation> <component> <port> <variable> tags to perform multiple tests from the same configuration file.

\verbatim
<?xml version="1.0" encoding="UTF-8"?>
<hopsanvalidationconfiguration hvcversion="0.1">
  <validation>
    <!--Optional path to model file, default is to use the same name (excluding ext) and path as this file-->
    <modelfile>../Example Models/Position Servo.hmf</modelfile>
    <parameterset></parameterset>
    <component name="Translational Mass">
      <port name="P2">
        <!--Optional path to csv file, default is to use the same name (excluding ext) and path as this file-->
        <csvfile></csvfile>
        <variable name="Position">
          <!-- Optional csvfile override for variable -->
          <!-- <csvfile></csvfile> -->
          <!--Column indexing begins at 0. Time vector is usualy at 0--> 
          <column>1</column> 
          <!--Tolerance, allowed deviation 0.01==1%-->
          <tolerance>0.01</tolerance>
        </variable>
      </port>
    </component>
  </validation>
</hopsanvalidationconfiguration>
\endverbatim

*/
