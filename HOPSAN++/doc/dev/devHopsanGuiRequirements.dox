/*!
\page devHopsanGuiRequirements HopsanGUI Dependence libraries
HopsanGUI depends on some external libraries. Here is a description on how to build them.

\section qwt Build Qwt - Qt Widgets for Technical Applications
\subsection qwt-ubuntu-auto Ubuntu (Automatically)
This will build against your \b system-version of the Qt libs, if you have a different version in the QtSDK see how to manually build below
-# Make sure that you have the libqt4-dev package installed. "apt-get install libqt4-dev"
-# Run the unpackPatchAndBuildQwt.sh script in HopsanGUI/Dependencies, it will build Qwt
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.

\subsection qwt-ubuntu-manual Ubuntu (Manually)
-# First download a version >=trunk from <a href="http://sourceforge.net/projects/qwt/files/" target="_blank">http://sourceforge.net/projects/qwt/files/</a>
-# Unpack into the HopsanGUI/Dependencies directory
-# The default on Unix is to build only Release mode, if you want to change this (only if you want to debug into qwt), you can do that in the qwtbuild.pri file.
  -# "Enable debug_and_release + build_all if you want to build both." 
-# Build the qwt project (you can use shadowbuild)
-# If compiler complains about Qwt not being configured with SVG support, comment the line "QWT_CONFIG += QwtSvg" in qwtconfig.pri
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.
  -# \e Note! HopsanGui will have a set of default paths to search for, if you install a newer stable version of QWT you should add this version to the TOP of the defaults list in the HopsanGuiBuild.prf file.

\subsection qwt-windows Windows (minGW and VC++)
-# First download a version >=trunk from <a href="http://sourceforge.net/projects/qwt/files/" target="_blank">http://sourceforge.net/projects/qwt/files/</a>
-# Unpack into the HopsanGUI\\Dependencies directory
-# Build the qwt project with qtcreator (you can use shadowbuild)
-# If the compiler complains about Qwt not being configured with SVG support, comment the line "QWT_CONFIG += QwtSvg" in qwtconfig.pri
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.
  -# \e Note! HopsanGui will have a set of default paths to search for, if you install a newer stable version of QWT you should add this version to the TOP of the defaults list in the HopsanGuiBuild.prf file.

\section pythonqt Build PythonQt 

\subsection pythonqt-ubuntu-auto Ubuntu (Automatically)
This will build against your \b system-version of the Qt libs, if you have a different version in the QtSDK see how to manually build below
-# Make sure that you have the libqt4-dev and the python-dev package installed. "apt-get install libqt4-dev python-dev"
  -# \e Note! PythonQt will likely not work with Python version >= 3, use 2.7 if you can choose
-# Run the unpackPatchAndBuildPythonQt.sh script in HopsanGUI/Dependencies, it will build PythonQt, (assumes python 2.7, (second commandline arg to change))
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.

\subsection pythonqt-ubuntu-manual Ubuntu (Manually)
-# Install the python-dev package "apt-get install python-dev"
  -# \e Note! PythonQt will likely not work with Python version >= 3, use 2.7 if you can choose
-# Download PythonQt from <a href="http://pythonqt.sourceforge.net/" target="_blank">http://pythonqt.sourceforge.net/</a>
  -# Place the ex: PythonQt2.1 directory in HopsanGUI/Dependencies, HopsanGUI.pro will search for it there
-# Go to the PythonQt directory and open the PythonQt project
  -# Make sure that you select, (uncomment) "CONFIG += debug_and_release build_all only" in build/common.prf (We need both a debug and a release build)
  -# In build/python.prf, replace the line unix:PYTHON_VERSION=2.6 with your version of Python
  -# \b DEACTIVATE shadow build in both debug and release config
  -# Build the PythonQt project, if you are using a Qt SDK, make sure that you are compiling PythonQt against the same libQt version as the rest of the code. (You may have one version installed in your system and an other in you SDK)
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.

\subsection pythonqt-windows-vc Windows (with Visual C++) --OBSOLETE Needs update--
-# Download and install Python 2.6, can be found at <a href="http://python.org/" target="_blank">http://python.org/</a>
-# Download and unzip PythonQt, it is found here: <a href="http://pythonqt.sourceforge.net/" target="_blank">http://pythonqt.sourceforge.net/</a> or check out it direct from its SVN reposotory, "https://pythonqt.svn.sourceforge.net/svnroot/pythonqt"
-# Open QT Creator and the PythonQT project. Use release settings. Deactivate shadowbuild.
-# Go to the project tab and add the following build variables:\n
PYTHON_PATH = c:\\Python26 \n
PYTHON_LIB  = c:\\Python26\\libs
-# Add the PythonQt*.*.*\\src folder to the "Include Path" in your project.
-# Build PythonQt in release mode.
-# If you want to run the tests add the PythonQt*.*.*\\lib directory to your path (in build environment)
-# Add the PYTHONQT_PATH = C:\\Users\\petno25\\Downloads\\PythonQt2.0.1 (or whatever your path is), to the HopsanGui build environment
-# Add the  C:\\Users\\petno25\\Downloads\\PythonQt2.0.1\\lib (or whatever your path is) to the PATH variable in your HopsanGui build environment

\subsection pythonqt-windows-mingw Windows (with MinGW)
-# Download and install Python 2.7 that can be found at <a href="http://python.org/" target="_blank">http://python.org/</a>
-# Run the unpackPatchAndBuildPythonQt.bat script in the HopsanGUI\\Dependencies directory
-# Build PythonQt in release and debug mode with shadowbuild ACTIVATED. (Both will be build at once, as patch will have selected that in the common.prf file)
-# After a successful compilation you are done. You do not need to install or copy any files. The HopsanGUI.pro file will automatically copy the needed binary files.

\section hopsancore Build The Hopsan Core
This will be handled automatically when you build the entire Hopsan project.

*/
