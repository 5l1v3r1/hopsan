/*!
\page devBaseRequirements Basic Requirements: Qt Creator, Qt libs and Compilers
HopsanGUI uses the Qt-libs for the GUI components and qmake to generate makefiles. We are also using Qt Creator and qmake for HopsanCore even though it is not using any Qt-libraries. You need to install the appropriate Qt-libs and the Qt Creator IDE from http://qt-project.org/downloads

\section qt-linux gcc in Ubuntu
On Linux based operating systems you should use the gcc compiler. To install gcc (and some other tools) in Ubuntu run "apt-get install build-essential".
You should use the Qt-libs in you distribution package repository and install Qt Creator separately from http://qt-project.org/downloads. Make sure that you install the Qt development packages, "apt-get install libqt4-dev qt4-dev-tools".


\section qt-mingw MinGW (gcc in Windows)
As of Hopsan version 0.6.0 you must use "Qt libraries for windows 4.8.4 (MinGW)".
You will also need a special version, MinGW-gcc440_1, with Qt specific patches.
Finally, with newer versions of Qt Creator you will also need a special version of gdb.
You can find the necessary files here, https://www.dropbox.com/sh/3ve9b7oqsdnwta2/7XdjHUBkrp

A short step by step description:
-# Unzip MinGW_4.4 (MinGW-gcc440_1.zip)
-# Download and install Qt libraries for windows 4.8.4 (MinGW) from http://qt-project.org/downloads
-# Download and install QtCreator version of your choice. (from http://qt-project.org/downloads)
-# In QtCreator, go to Tools->Options->Build&Run
   -# Add your Qt version (if it not does not exist) by pointing to C:\Qt\4.8.4\bin\qmake.exe or similar
   -# Make sure compilers are found under Compilers
   -# Configure a kit (Combination of Qt version, compiler and Debugger), use GDB as debugger (you can find it in your MinGw folder). You should replace it with the (qtcreator-gdb-7.4-MINGW32_NT-6.1-i686.tar.gz) the old one does not work with newer Qt creator version.
-# Open HopsanNG.pro and configure your project by selecting Kit and shadow build directories for Release and Debug. (If you have an old HopsanNG.pro.user file *DO NOT LOAD IT*)
   -# Before you can build Hopsan you need to setup the required dependencies.


\section qt-msvcompiler MSVC++ (The Microsoft Visual C++ Compiler) 
This guide descrubes what you need to install to be able to build MSVC2008 and MSVC2010 versions of the HopsanCore

<b>Do NOT!</b> install the Microsoft Visual Studio 2010 Express development environment, it will not work with the build scripts (at least on 64-bit Windows). You should use the Windows SDKs instead.

If you have previous installations of Microsoft Windows SDKs installed you need to uninstall them and all traces of Microsoft Visual C++ Compilers (not redistributable packages), "Application Verifier", "Debugging Tools for Windows" and "Performance Toolkit" (and maybe others). Otherwise Windows SDK installation may/will fail if newer versions of these components are already installed).

-# Download and install the "Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1" (Windows SDK 7.0) from <a href="http://www.microsoft.com/downloads/en/default.aspx " target="_blank">Microsoft Download Center</a>.
You don't need to install the .NET stuff, but make sure that you install the "Debugging Tools for Windows"
-# (Optional if you want to be able to debug) If you are using a 64-bit OS you will also need to install the 32-bit version of the debugging tools. The SDK will autmatically only install the 64-bit version. If you can not get the newest version manually then select version 6.11.1.404 from the archive downloads list that you can find <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009" target="_blank">here</a>. This link does no longer seem to contain the needed file though.
-# Pay attention to the messages in the last window in the installation, if you have an error here you will have to remove the conflicting version and then reinstall the SDK components that failed.
-# Repete the above for "Microsoft Windows SDK for Windows 7 and .NET Framework 4" (Windows SDK 7.1)
   -# If you are unable to install the Visual Compilers (because a newer version already seems to be installed) see Microsoft KB2519277 for a patch.
      -# First install the Windows SDK 7.1 without compilers, then run the patch file to reinstall compilers.
      -# The issue is moste likely cause by you having previously installed "MS Visual Studio 2010 Express SP1"
      -# Unfortunattely the KB2519277 patch is missing files, this is also a known bug that will no be fixed by misrosoft (official statement)
      -# Now go to add/remove programs and unsintall all Microsoft Visual C++ 2010 compilers
      -# Hopefully you will now be able to reinstall Windows SDK 7.1 with compilers (which have a slighly older version then thos that came with Visual Studio and KB2519277)

If you get an error about "cl.exe" not being found when building, then the "Visual Studio 9.0/VC/bin" or "Visual Studio 10.0/VC/bin" folder has not been added to your PATH system environment variable.
    -# Note! the release build script should do this automatically, adding the path manually is not recomended as that could mean that the wrong version will be used when you try to compile for a different MSVC version.
	
To get a working MSVC debugger in Qt creator
-# Go into Tools->Options->Debugger->Cdb and check the Cdb box. Now set the path to the Debugging tools for Windows 32-bit version. (Autodetect should work).
-# If you want the debugger to automatically download debugger symbols for the Windows libraries, then create a folder, eg. "C:\websymbols" and add the following line to "Symbol Paths:" under the Cdb tab: "SRV*c:\websymbols*http://msdl.microsoft.com/download/symbols" (without quotes). You websymbols folder will act as a cache for symbol retreival.
*/
