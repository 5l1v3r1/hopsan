/*!
\page devBaseRequirements Basic Requirements: Qt Creator, Qt libs and Compilers
HopsanGUI uses the Qt-libs for the GUI components and qmake to generate makefiles. We are also using Qt Creator and qmake for HopsanCore even though it is not using any Qt-libraries. You need to install the appropriate Qt-libs and the Qt Creator IDE from http://qt-project.org/downloads

\section qt-linux gcc in Ubuntu
On Linux based operating systems you should use the gcc compiler. To install gcc (and some other tools) in Ubuntu run "apt-get install build-essential".
You should use the Qt-libs in you distribution package repository and install Qt Creator separately from http://qt-project.org/downloads. Make sure that you install the Qt development packages, "apt-get install libqt4-dev qt4-dev-tools".


\section qt-mingw MinGW (gcc in Windows)
As of Hopsan version 0.6.0 you must use "Qt libraries for windows 4.8.4 (MinGW)".
You will also need a special version, MinGW-gcc440_1, with Qt specific patches.
Finally, with newer versions of Qt Creator you will also need a special version of gdb.
You can find the necessary files here, https://www.dropbox.com/sh/3ve9b7oqsdnwta2/7XdjHUBkrp

A short step by step description:
-# Unzip MinGW_4.4 (MinGW-gcc440_1.zip)
-# Download and install Qt libraries for windows 4.8.4 (MinGW) from http://qt-project.org/downloads
-# Download and install QtCreator version of your choice. (from http://qt-project.org/downloads)
-# In QtCreator, go to Tools->Options->Build&Run
   -# Add your Qt version (if it not does not exist) by pointing to C:\Qt\4.8.4\bin\qmake.exe or similar
   -# Make sure compilers are found under Compilers
   -# Configure a kit (Combination of Qt version, compiler and Debugger), use GDB as debugger (you can find it in your MinGw folder). You should replace it with the (qtcreator-gdb-7.4-MINGW32_NT-6.1-i686.tar.gz) the old one does not work with newer Qt creator version.
-# Open HopsanNG.pro and configure your project by selecting Kit and shadow build directories for Release and Debug. (If you have an old HopsanNG.pro.user file *DO NOT LOAD IT*)
   -# Before you can build Hopsan you need to setup the required dependencies.


\section qt-mscompiler VC++ (The Microsoft Visual C++ Compiler) 
**This guide might be slightly outdated**

Follow this guide only if you wish to use the Microsoft Visual C++ compiler with Qt Creator for Hopsan development.

The Visual Studio compiled Qt-libraries that are currently available (2010-09-22), were compiled using VisualStudio2008.
For this reason we should use the VC9 (Visual C++ 2008) compiler package with HopsanGUI and HopsanCore. This may change in the future.
I (Peter) tried VC++ 2010 but was unable to make it work on my 64-bit computer.

You may either download and install Visual Studio 2008 (requires free registration after 30-days) or install the Windows SDK (recommended).
As we already have an IDE (QtCreator) this guide will use the SDK.

The guide assumes that you start from scratch, without the QtSDK installed. It should be possible to install into the SDK as well and then select between multiple Qt versions.

-# Download and install the Microsoft Windows SDK 7.0 from <a href="http://www.microsoft.com/downloads/en/default.aspx " target="_blank">Microsoft Download Center</a>.
You don't need to install the .NET stuff, but make sure that you install the "Debugging Tools for Windows"
-# If you are using a 64-bit OS you will also need to install the 32-bit version of the debugging tools. The SDK will autmatically install the 64-bit version. If you can not get the newest version manually then select version 6.11.1.404 from the archive downloads list that you can find <a href="http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx#b " target="_blank">here</a>.
-# Download the Qt-libs compiled with VS from <a href="http://qt.nokia.com" target="_blank">http://qt.nokia.com</a> and then manually install the latest version of QtCreator (you can find it on the same download page).
-# When you start QtCreator for the first time go to Tools->Options->Qt4. Here you should manually find the qmake.exe for your VS compiled version of the Qt-Libs. You may find it in a place like "C:\Qt\4.6.3\bin". If the Microsoft SDK has been properly installed the Microsoft Visual C++ Compilers 9.0 toolchain should be automatically set up. Change the name to something indicating that VC++ is used. Be sure to rebuild the debugger helper.
-# Open your Qt projects and they should automatically add/readd build settings for your new Qt version wich VC++.
-# If you get an error about "cl.exe" not being found, add the "Visual Studio 9.0/VC/bin" folder to your PATH system environment variable.

To get a working debugger
-# Go into Tools->Options->Debugger->Cdb and check the Cdb box. Now set the path to the Debugging tools for Windows 32-bit version. (Autodetect should work).
-# If you want the debugger to automatically download debugger symbols for the Windows libraries, then create a folder, eg. "C:\websymbols" and add the following line to "Symbol Paths:" under the Cdb tab: "SRV*c:\websymbols*http://msdl.microsoft.com/download/symbols" (without quotes). You websymbols folder will act as a cache for symbol retreival.

Hints
-# You may need to add the directory to cl.exe to your PATH environment variable, e.g "C:\Program Files\Microsoft Visual Studio 9.0\VC\bin" (Be sure not to use spaces in Windows)
*/
