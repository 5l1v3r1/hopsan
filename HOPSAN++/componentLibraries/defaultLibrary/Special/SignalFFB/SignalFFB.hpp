#ifndef SIGNALFFB_HPP_INCLUDED
#define SIGNALFFB_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file SignalFFB.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 14 Sep 2012 13:33:11
//! @brief Functional Flow Block
//! @ingroup SignalComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/FFBDcomponentsNG2.nb*/

using namespace hopsan;

class SignalFFB : public ComponentSignal
{
private:
     double mset;
     double mexit;
     double mleave;
     Port *mpPset;
     Port *mpPexit;
     Port *mpPleave;
     Port *mpPstate;
     Port *mpPexiting;
     int mNstep;
     //inputVariables
     double set;
     double exit;
     double leave;
     //outputVariables
     double state;
     double exiting;
     //Expressions variables
     double oldState;
     double oldSet;
     double oldExiting;
     double oldExit;
     double oldLeave;
     //Delay declarations
     //inputVariables pointers
     double *mpND_set;
     double *mpND_exit;
     double *mpND_leave;
     //outputVariables pointers
     double *mpND_state;
     double *mpND_exiting;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalFFB();
     }

     void configure()
     {
        const double set = 0.;
        const double exit = 0.;
        const double leave = 0.;

        mNstep=9;
        mset = set;
        mexit = exit;
        mleave = leave;

        //Add ports to the component

        //Add inputVariables ports to the component
        mpPset=addReadPort("Pset","NodeSignal", Port::NotRequired);
        mpPexit=addReadPort("Pexit","NodeSignal", Port::NotRequired);
        mpPleave=addReadPort("Pleave","NodeSignal", Port::NotRequired);

        //Add outputVariables ports to the component
        mpPstate=addWritePort("Pstate","NodeSignal", Port::NotRequired);
        mpPexiting=addWritePort("Pexiting","NodeSignal", Port::NotRequired);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("set", "On trigger", "", mset);
        registerParameter("exit", "Off trigger, jump to 0 ,signal to next \
block", "", mexit);
        registerParameter("leave", "Off trigger, jump to 0", "", mleave);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Read inputVariables pointers from nodes
        mpND_set=getSafeNodeDataPtr(mpPset, NodeSignal::Value,mset);
        mpND_exit=getSafeNodeDataPtr(mpPexit, NodeSignal::Value,mexit);
        mpND_leave=getSafeNodeDataPtr(mpPleave, NodeSignal::Value,mleave);
        //Read outputVariable pointers from nodes
        mpND_state=getSafeNodeDataPtr(mpPstate, NodeSignal::Value);
        mpND_exiting=getSafeNodeDataPtr(mpPexiting, NodeSignal::Value);

        //Read variables from nodes

        //Read inputVariables from nodes
        set = (*mpND_set);
        exit = (*mpND_exit);
        leave = (*mpND_leave);

        //Read outputVariables from nodes
        state = mpPstate->getStartValue(NodeSignal::Value);
        exiting = mpPexiting->getStartValue(NodeSignal::Value);

        //InitialExpressions
        oldState = state;
        oldExiting = exiting;
        oldExit = exit;
        oldLeave = leave;


        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        set = (*mpND_set);
        exit = (*mpND_exit);
        leave = (*mpND_leave);

        //LocalExpressions

          //Expressions
          state = onPositive(-0.5 - onPositive(-0.5 + exit - oldExit) - \
onPositive(-0.5 + leave - oldLeave) + onPositive(-0.5 + oldState) + \
2*onPositive(-0.5 - oldSet + set));
          exiting = oldState*onPositive(-0.5 + exit - oldExit);
          oldState = state;
          oldSet = set;
          oldExiting = exiting;
          oldExit = exit;
          oldLeave = leave;

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mpND_state)=state;
        (*mpND_exiting)=exiting;

        //Update the delayed variabels

     }
};
#endif // SIGNALFFB_HPP_INCLUDED
