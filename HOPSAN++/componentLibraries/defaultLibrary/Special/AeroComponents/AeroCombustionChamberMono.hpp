#ifndef AEROCOMBUSTIONCHAMBERMONO_HPP_INCLUDED
#define AEROCOMBUSTIONCHAMBERMONO_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file \
C:\HopsanTrunk\HOPSAN++\componentLibraries\defaultLibrary\Special\AeroCompone\
nts\AeroCombustionChamberMono.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Sat 11 May 2013 21:04:47
//! @brief Hydraulic volume with two connection
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/AeroComponents.nb*/

using namespace hopsan;

class AeroCombustionChamberMono : public ComponentC
{
private:
     double Vc;
     double R;
     double cv;
     double vfuel;
     double ethap;
     double rhofuel;
     double As;
     double Med;
     double alpha;
     Port *mpP1;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[3];
     int mNstep;
     //Port P1 variable
     double p1;
     double q1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double p0;
     //outputVariables
     double thrust;
     double Tt;
     double mc;
     double mdot;
     double Ae;
     double pe;
     double pt;
     double Te;
     double ve;
     double Pin;
     double Pout;
     //InitialExpressions variables
     double c2;
     double c1f;
     double c2f;
     //LocalExpressions variables
     double gam;
     double c10;
     double c20;
     //Expressions variables
     //Port P1 pointer
     double *mpND_p1;
     double *mpND_q1;
     double *mpND_T1;
     double *mpND_dE1;
     double *mpND_c1;
     double *mpND_Zc1;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpp0;
     //outputVariables pointers
     double *mpthrust;
     double *mpTt;
     double *mpmc;
     double *mpmdot;
     double *mpAe;
     double *mppe;
     double *mppt;
     double *mpTe;
     double *mpve;
     double *mpPin;
     double *mpPout;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart20;
     Delay mDelayedPart30;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroCombustionChamberMono();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(3,3);
        systemEquations.create(3);
        delayedPart.create(4,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        mpP1=addPowerPort("P1","NodeHydraulic");
        //Add inputVariables to the component
            addInputVariable("p0","Free stream pressure"," ",100000.,&mpp0);

        //Add outputVariables to the component
            addOutputVariable("thrust","thrust","m3/s",0.,&mpthrust);
            addOutputVariable("Tt","cahmber temerature","K",273.,&mpTt);
            addOutputVariable("mc","mass in chamber","kg",0.,&mpmc);
            addOutputVariable("mdot","Exit mass flow","kg/s",0.,&mpmdot);
            addOutputVariable("Ae","exit Area","m2",0.,&mpAe);
            addOutputVariable("pe","exit pressure","Pa",0.,&mppe);
            addOutputVariable("pt","chamber pressure","Pa",0.,&mppt);
            addOutputVariable("Te","exit temperature","K",273.,&mpTe);
            addOutputVariable("ve","exit velocity","K",0.,&mpve);
            addOutputVariable("Pin","Input power","W",0.,&mpPin);
            addOutputVariable("Pout","Output power","W",0.,&mpPout);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("Vc", "Chamber volume", " ", 1000.,Vc);
            addConstant("R", "Gas constant", "", 287,R);
            addConstant("cv", "Heat capacity", "", 718,cv);
            addConstant("vfuel", "Exhaust speed", "m/s", 1000.,vfuel);
            addConstant("ethap", "Effectivness", "", 0.9,ethap);
            addConstant("rhofuel", "Exhaust speed", "kg/m3", 900.,rhofuel);
            addConstant("As", "min effective area", "m2", 0.01,As);
            addConstant("Med", "Design exit Mach", "", 2.5,Med);
            addConstant("alpha", "Damp. factor", "1/s ", 0.,alpha);
        mpSolver = new EquationSystemSolver(this,3);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpND_p1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Pressure);
        mpND_q1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Flow);
        mpND_T1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Temperature);
        mpND_dE1=getSafeNodeDataPtr(mpP1, NodeHydraulic::HeatFlow);
        mpND_c1=getSafeNodeDataPtr(mpP1, NodeHydraulic::WaveVariable);
        mpND_Zc1=getSafeNodeDataPtr(mpP1, NodeHydraulic::CharImpedance);

        //Read variables from nodes
        //Port P1
        p1 = (*mpND_p1);
        q1 = (*mpND_q1);
        T1 = (*mpND_T1);
        dE1 = (*mpND_dE1);
        c1 = (*mpND_c1);
        Zc1 = (*mpND_Zc1);

        //Read inputVariables from nodes
        p0 = (*mpp0);

        //Read outputVariables from nodes
        thrust = (*mpthrust);
        Tt = (*mpTt);
        mc = (*mpmc);
        mdot = (*mpmdot);
        Ae = (*mpAe);
        pe = (*mppe);
        pt = (*mppt);
        Te = (*mpTe);
        ve = (*mpve);
        Pin = (*mpPin);
        Pout = (*mpPout);

//==This code has been autogenerated using Compgen==
        //InitialExpressions
        c1 = p1;
        c2 = p1;
        pt = p1;
        c1f = p1;
        c2f = p1;
        Tt = T1;
        mc = (pt*Vc)/(R*(1 + Tt));

        //LocalExpressions
        gam = (cv + R)/cv;
        c10 = c2 - (2*mdot*mTimestep*((cv + R)*Te + \
Power(ve,2)/2.))/(gam*Vc);
        c20 = c1 + (mTimestep*q1*rhofuel*Power(vfuel,2))/(gam*Vc);

        //Initialize delays
        delayParts1[1] = (-2*mc + mdot*mTimestep - mTimestep*q1*rhofuel)/2.;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(3);
        Vec stateVark(3);
        Vec deltaStateVar(3);

        //Read variables from nodes
        //Port P1
        p1 = (*mpND_p1);
        q1 = (*mpND_q1);
        dE1 = (*mpND_dE1);

        //Read inputVariables from nodes
        p0 = (*mpp0);

        //LocalExpressions
        gam = (cv + R)/cv;
        c10 = c2 - (2*mdot*mTimestep*((cv + R)*Te + \
Power(ve,2)/2.))/(gam*Vc);
        c20 = c1 + (mTimestep*q1*rhofuel*Power(vfuel,2))/(gam*Vc);

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = mc;
        stateVark[1] = Tt;
        stateVark[2] = mdot;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //CombustionChamberMono
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =mc + (mTimestep*(mdot - q1*rhofuel))/2. + \
delayedPart[1][1];
          systemEquations[1] =Tt - (pt*Vc)/(mc*R);
          systemEquations[2] =mdot - limit((Power(2,(1 + gam)/(2.*(-1 + \
gam)))*As*Power(1 + gam,(1 + gam)/(2 - \
2*gam))*pt*Sqrt(gam/R))/Sqrt(Tt),0.,1.e9);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = mTimestep/2.;
          jacobianMatrix[1][0] = (pt*Vc)/(Power(mc,2)*R);
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = 0;
          jacobianMatrix[2][0] = 0;
          jacobianMatrix[2][1] = (Power(2,-1 + (1 + gam)/(2.*(-1 + \
gam)))*As*Power(1 + gam,(1 + gam)/(2 - \
2*gam))*pt*Sqrt(gam/R)*dxLimit((Power(2,(1 + gam)/(2.*(-1 + gam)))*As*Power(1 \
+ gam,(1 + gam)/(2 - \
2*gam))*pt*Sqrt(gam/R))/Sqrt(Tt),0.,1.e9))/Power(Tt,1.5);
          jacobianMatrix[2][2] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          mc=stateVark[0];
          Tt=stateVark[1];
          mdot=stateVark[2];
          //Expressions
          c1 = c10;
          c2 = c20;
          Zc1 = (mTimestep*rhofuel*(cv*T1 + Power(vfuel,2)/2.))/(gam*Vc);
          pt = c2 - (mdot*mTimestep*((cv + R)*Te + Power(ve,2)/2.))/(gam*Vc);
          Ae = (Power(2,(1 + gam)/(2.*(-1 + gam)))*As*Power(1 + ((-1 + \
gam)*Power(Med,2))/2.,(1 + gam)/(2.*(-1 + gam))))/(Power(1 + gam,(1 + \
gam)/(2.*(-1 + gam)))*Med);
          pe = pt/Power(1 + ((-1 + gam)*Power(Med,2))/2.,gam/(-1 + gam));
          Te = Tt/(1 + ((-1 + gam)*Power(Med,2))/2.);
          ve = Med*Sqrt(gam*R*Te);
          thrust = Ae*(-p0 + pe) + mdot*ve;
          Pin = (q1*rhofuel*Power(vfuel,2))/2.;
          Pout = -(mdot*Power(ve,2))/2.;
        }

        //Calculate the delayed parts
        delayParts1[1] = (-2*mc + mdot*mTimestep - mTimestep*q1*rhofuel)/2.;

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];

        //Write new values to nodes
        //Port P1
        (*mpND_T1)=T1;
        (*mpND_c1)=c1;
        (*mpND_Zc1)=Zc1;
        //outputVariables
        (*mpthrust)=thrust;
        (*mpTt)=Tt;
        (*mpmc)=mc;
        (*mpmdot)=mdot;
        (*mpAe)=Ae;
        (*mppe)=pe;
        (*mppt)=pt;
        (*mpTe)=Te;
        (*mpve)=ve;
        (*mpPin)=Pin;
        (*mpPout)=Pout;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROCOMBUSTIONCHAMBERMONO_HPP_INCLUDED
