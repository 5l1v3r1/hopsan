#ifndef SIGNALWAYPOINT_HPP_INCLUDED
#define SIGNALWAYPOINT_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file SignalWaypoint.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Thu 23 Aug 2012 15:02:08
//! @brief Waypoint Controller with way points
//! @ingroup SignalComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/SignalControlAeroNG.nb*/

using namespace hopsan;

class SignalWaypoint : public ComponentSignal
{
private:
     double mR;
     double malt1;
     double mv1;
     double mwptol;
     double mxcWp1;
     double mycWp1;
     double ms1;
     double mxc;
     double myc;
     Port *mpPs1;
     Port *mpPxc;
     Port *mpPyc;
     Port *mpPset1;
     Port *mpPaltitudeRef;
     Port *mpPheadingRef;
     Port *mpPvelocityRef;
     Port *mpPdistanceWp;
     int mNstep;
     //inputVariables
     double s1;
     double xc;
     double yc;
     //outputVariables
     double set1;
     double altitudeRef;
     double headingRef;
     double velocityRef;
     double distanceWp;
     //Expressions variables
     //Delay declarations
     //inputVariables pointers
     double *mpND_s1;
     double *mpND_xc;
     double *mpND_yc;
     //outputVariables pointers
     double *mpND_set1;
     double *mpND_altitudeRef;
     double *mpND_headingRef;
     double *mpND_velocityRef;
     double *mpND_distanceWp;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalWaypoint();
     }

     void configure()
     {
        const double R = 6.3675e6;
        const double alt1 = 0;
        const double v1 = 200;
        const double wptol = 500;
        const double xcWp1 = 15.1669;
        const double ycWp1 = 58.3812;
        const double s1 = 0.;
        const double xc = 0.;
        const double yc = 0.;

        mNstep=9;
        mR = R;
        malt1 = alt1;
        mv1 = v1;
        mwptol = wptol;
        mxcWp1 = xcWp1;
        mycWp1 = ycWp1;
        ms1 = s1;
        mxc = xc;
        myc = yc;

        //Add ports to the component

        //Add inputVariables ports to the component
        mpPs1=addReadPort("Ps1","NodeSignal", Port::NotRequired);
        mpPxc=addReadPort("Pxc","NodeSignal", Port::NotRequired);
        mpPyc=addReadPort("Pyc","NodeSignal", Port::NotRequired);

        //Add outputVariables ports to the component
        mpPset1=addWritePort("Pset1","NodeSignal", Port::NotRequired);
        mpPaltitudeRef=addWritePort("PaltitudeRef","NodeSignal", \
Port::NotRequired);
        mpPheadingRef=addWritePort("PheadingRef","NodeSignal", \
Port::NotRequired);
        mpPvelocityRef=addWritePort("PvelocityRef","NodeSignal", \
Port::NotRequired);
        mpPdistanceWp=addWritePort("PdistanceWp","NodeSignal", \
Port::NotRequired);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("R", "Earth radius", "m", mR);
        registerParameter("alt1", "altitude 1", "m", malt1);
        registerParameter("v1", "ref. velocity 1", "m/s", mv1);
        registerParameter("wptol", "waypoint tolerance", "m", mwptol);
        registerParameter("xcWp1", "waypoint longitude", "deg", mxcWp1);
        registerParameter("ycWp1", "waypoint lattitude", "deg", mycWp1);
        registerParameter("s1", "state 1", "", ms1);
        registerParameter("xc", "x-position", "m", mxc);
        registerParameter("yc", "y-position", "m", myc);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Read inputVariables pointers from nodes
        mpND_s1=getSafeNodeDataPtr(mpPs1, NodeSignal::VALUE,ms1);
        mpND_xc=getSafeNodeDataPtr(mpPxc, NodeSignal::VALUE,mxc);
        mpND_yc=getSafeNodeDataPtr(mpPyc, NodeSignal::VALUE,myc);
        //Read outputVariable pointers from nodes
        mpND_set1=getSafeNodeDataPtr(mpPset1, NodeSignal::VALUE);
        mpND_altitudeRef=getSafeNodeDataPtr(mpPaltitudeRef, \
NodeSignal::VALUE);
        mpND_headingRef=getSafeNodeDataPtr(mpPheadingRef, NodeSignal::VALUE);
        mpND_velocityRef=getSafeNodeDataPtr(mpPvelocityRef, \
NodeSignal::VALUE);
        mpND_distanceWp=getSafeNodeDataPtr(mpPdistanceWp, NodeSignal::VALUE);

        //Read variables from nodes

        //Read inputVariables from nodes
        s1 = (*mpND_s1);
        xc = (*mpND_xc);
        yc = (*mpND_yc);

        //Read outputVariables from nodes
        set1 = mpPset1->getStartValue(NodeSignal::VALUE);
        altitudeRef = mpPaltitudeRef->getStartValue(NodeSignal::VALUE);
        headingRef = mpPheadingRef->getStartValue(NodeSignal::VALUE);
        velocityRef = mpPvelocityRef->getStartValue(NodeSignal::VALUE);
        distanceWp = mpPdistanceWp->getStartValue(NodeSignal::VALUE);



        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        s1 = (*mpND_s1);
        xc = (*mpND_xc);
        yc = (*mpND_yc);

        //LocalExpressions

          //Expressions
          set1 = s1*onPositive(mwptol - \
0.0174533*Sqrt(Power(mR,2)*Power(-mycWp1 + yc,2) + Power(mR,2)*Power(-mxcWp1 \
+ xc,2)*Power(Cos(0.0174533*yc),2)));
          altitudeRef = malt1*s1;
          headingRef = s1*Atan2L(mR*(mycWp1 - yc),mR*(mxcWp1 - \
xc)*Cos(0.0174533*yc));
          velocityRef = mv1*s1;
          distanceWp = 0.0174533*Sqrt(Power(mR,2)*Power(-mycWp1 + yc,2) + \
Power(mR,2)*Power(-mxcWp1 + xc,2)*Power(Cos(0.0174533*yc),2));

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mpND_set1)=set1;
        (*mpND_altitudeRef)=altitudeRef;
        (*mpND_headingRef)=headingRef;
        (*mpND_velocityRef)=velocityRef;
        (*mpND_distanceWp)=distanceWp;

        //Update the delayed variabels

     }
};
#endif // SIGNALWAYPOINT_HPP_INCLUDED
