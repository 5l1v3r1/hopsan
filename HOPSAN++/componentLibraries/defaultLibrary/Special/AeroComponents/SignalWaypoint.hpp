#ifndef SIGNALWAYPOINT_HPP_INCLUDED
#define SIGNALWAYPOINT_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file \
C:\HopsanTrunk\HOPSAN++\ComponentLibraries\defaultLibrary\Special\AeroCompone\
nts\SignalWaypoint.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Thu 2 May 2013 22:33:52
//! @brief Waypoint Controller with way points
//! @ingroup SignalComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/SignalControlAero.nb*/

using namespace hopsan;

class SignalWaypoint : public ComponentSignal
{
private:
     double R;
     double alt1;
     double v1;
     double wptol;
     double xcWp1;
     double ycWp1;
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double s1;
     double xc;
     double yc;
     //outputVariables
     double set1;
     double altitudeRef;
     double headingRef;
     double velocityRef;
     double distanceWp;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mps1;
     double *mpxc;
     double *mpyc;
     //outputVariables pointers
     double *mpset1;
     double *mpaltitudeRef;
     double *mpheadingRef;
     double *mpvelocityRef;
     double *mpdistanceWp;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalWaypoint();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("s1","state 1","",0.,&mps1);
            addInputVariable("xc","x-position","m",0.,&mpxc);
            addInputVariable("yc","y-position","m",0.,&mpyc);

        //Add outputVariables to the component
            addOutputVariable("set1","set state","",1.,&mpset1);
            addOutputVariable("altitudeRef","reference \
altitude","m",1000.,&mpaltitudeRef);
            addOutputVariable("headingRef","reference \
heading","rad",1000.,&mpheadingRef);
            addOutputVariable("velocityRef","reference \
velocity","m",1000.,&mpvelocityRef);
            addOutputVariable("distanceWp","distance to \
wp","m",1000.,&mpdistanceWp);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("R", "Earth radius", "m", 6.3675e6,R);
            addConstant("alt1", "altitude 1", "m", 0,alt1);
            addConstant("v1", "ref. velocity 1", "m/s", 200,v1);
            addConstant("wptol", "waypoint tolerance", "m", 500,wptol);
            addConstant("xcWp1", "waypoint longitude", "deg", 15.1669,xcWp1);
            addConstant("ycWp1", "waypoint lattitude", "deg", 58.3812,ycWp1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        s1 = (*mps1);
        xc = (*mpxc);
        yc = (*mpyc);

        //Read outputVariables from nodes
        set1 = (*mpset1);
        altitudeRef = (*mpaltitudeRef);
        headingRef = (*mpheadingRef);
        velocityRef = (*mpvelocityRef);
        distanceWp = (*mpdistanceWp);

//==This code has been autogenerated using Compgen==


        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        s1 = (*mps1);
        xc = (*mpxc);
        yc = (*mpyc);

        //LocalExpressions

          //Expressions
          set1 = s1*onPositive(wptol - 0.0174533*Sqrt(Power(R,2)*Power(yc - \
ycWp1,2) + Power(R,2)*Power(xc - xcWp1,2)*Power(Cos(0.0174533*yc),2)));
          altitudeRef = alt1*s1;
          headingRef = s1*Atan2L(R*(-yc + ycWp1),R*(-xc + \
xcWp1)*Cos(0.0174533*yc));
          velocityRef = s1*v1;
          distanceWp = 0.0174533*Sqrt(Power(R,2)*Power(yc - ycWp1,2) + \
Power(R,2)*Power(xc - xcWp1,2)*Power(Cos(0.0174533*yc),2));

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mpset1)=set1;
        (*mpaltitudeRef)=altitudeRef;
        (*mpheadingRef)=headingRef;
        (*mpvelocityRef)=velocityRef;
        (*mpdistanceWp)=distanceWp;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // SIGNALWAYPOINT_HPP_INCLUDED
