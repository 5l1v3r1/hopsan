#ifndef HYDRAULICCENTRIFUGALPUMP_HPP_INCLUDED
#define HYDRAULICCENTRIFUGALPUMP_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file HydraulicCentrifugalPump.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 4 Feb 2013 00:02:33
//! @brief Centrifugal pump
//! @ingroup HydraulicComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Users, petkr14.IEI, Documents, \
CompgenNG}/HydraulicComponentsNG3.nb*/

using namespace hopsan;

class HydraulicCentrifugalPump : public ComponentQ
{
private:
     double mkl;
     double mb;
     double md;
     double mbeta2;
     double mAp;
     double mrho;
     double mKcp;
     double mBp;
     double momegap;
     Port *mpP1;
     Port *mpP2;
     Port *mpPomegap;
     Port *mpPq2e;
     Port *mpPtorp;
     Port *mpPPin;
     Port *mpPPout;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[4];
     int mNstep;
     //Port P1 variable
     double p1;
     double q1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
     //Port P2 variable
     double p2;
     double q2;
     double T2;
     double dE2;
     double c2;
     double Zc2;
     //inputVariables
     double omegap;
     //outputVariables
     double q2e;
     double torp;
     double Pin;
     double Pout;

     //Expressions variables
     //Port P1 pointer
     double *mpND_p1;
     double *mpND_q1;
     double *mpND_T1;
     double *mpND_dE1;
     double *mpND_c1;
     double *mpND_Zc1;
     //Port P2 pointer
     double *mpND_p2;
     double *mpND_q2;
     double *mpND_T2;
     double *mpND_dE2;
     double *mpND_c2;
     double *mpND_Zc2;
     //Delay declarations
     //inputVariables pointers
     double *mpND_omegap;
     //outputVariables pointers
     double *mpND_q2e;
     double *mpND_torp;
     double *mpND_Pin;
     double *mpND_Pout;
     Delay mDelayedPart10;
     Delay mDelayedPart20;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new HydraulicCentrifugalPump();
     }

     void configure()
     {
        const double kl = 0.8;
        const double b = 0.03;
        const double d = 0.3;
        const double beta2 = 1.57;
        const double Ap = 0.001;
        const double rho = 860;
        const double Kcp = 1.e-11;
        const double Bp = 1.;
        const double omegap = 157.;

        mNstep=9;
        jacobianMatrix.create(4,4);
        systemEquations.create(4);
        delayedPart.create(5,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mkl = kl;
        mb = b;
        md = d;
        mbeta2 = beta2;
        mAp = Ap;
        mrho = rho;
        mKcp = Kcp;
        mBp = Bp;
        momegap = omegap;

        //Add ports to the component
        mpP1=addPowerPort("P1","NodeHydraulic");
        mpP2=addPowerPort("P2","NodeHydraulic");

        //Add inputVariables ports to the component
        mpPomegap=addReadPort("Pomegap","NodeSignal", Port::NotRequired);

        //Add outputVariables ports to the component
        mpPq2e=addWritePort("Pq2e","NodeSignal", Port::NotRequired);
        mpPtorp=addWritePort("Ptorp","NodeSignal", Port::NotRequired);
        mpPPin=addWritePort("PPin","NodeSignal", Port::NotRequired);
        mpPPout=addWritePort("PPout","NodeSignal", Port::NotRequired);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("kl", "Flow loss koeff.", "", mkl);
        registerParameter("b", "outlet axial width", "m", mb);
        registerParameter("d", "Diameter", "m", md);
        registerParameter("beta2", "Outlet flow angle", "rad", mbeta2);
        registerParameter("Ap", "outlet flow area", "m2", mAp);
        registerParameter("rho", "Fluid density", "kg/m2", mrho);
        registerParameter("Kcp", "Leakage coeff", "m3/s/Pa", mKcp);
        registerParameter("Bp", "Visc friction coeff", "N/m/s", mBp);
        registerParameter("omegap", "Speed", "rad/s", momegap);
        mpSolver = new EquationSystemSolver(this,4);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpND_p1=getSafeNodeDataPtr(mpP1, NodeHydraulic::PRESSURE);
        mpND_q1=getSafeNodeDataPtr(mpP1, NodeHydraulic::FLOW);
        mpND_T1=getSafeNodeDataPtr(mpP1, NodeHydraulic::TEMPERATURE);
        mpND_dE1=getSafeNodeDataPtr(mpP1, NodeHydraulic::HEATFLOW);
        mpND_c1=getSafeNodeDataPtr(mpP1, NodeHydraulic::WAVEVARIABLE);
        mpND_Zc1=getSafeNodeDataPtr(mpP1, NodeHydraulic::CHARIMP);
        //Port P2
        mpND_p2=getSafeNodeDataPtr(mpP2, NodeHydraulic::PRESSURE);
        mpND_q2=getSafeNodeDataPtr(mpP2, NodeHydraulic::FLOW);
        mpND_T2=getSafeNodeDataPtr(mpP2, NodeHydraulic::TEMPERATURE);
        mpND_dE2=getSafeNodeDataPtr(mpP2, NodeHydraulic::HEATFLOW);
        mpND_c2=getSafeNodeDataPtr(mpP2, NodeHydraulic::WAVEVARIABLE);
        mpND_Zc2=getSafeNodeDataPtr(mpP2, NodeHydraulic::CHARIMP);
        //Read inputVariables pointers from nodes
        mpND_omegap=getSafeNodeDataPtr(mpPomegap, NodeSignal::VALUE,momegap);
        //Read outputVariable pointers from nodes
        mpND_q2e=getSafeNodeDataPtr(mpPq2e, NodeSignal::VALUE);
        mpND_torp=getSafeNodeDataPtr(mpPtorp, NodeSignal::VALUE);
        mpND_Pin=getSafeNodeDataPtr(mpPPin, NodeSignal::VALUE);
        mpND_Pout=getSafeNodeDataPtr(mpPPout, NodeSignal::VALUE);

        //Read variables from nodes
        //Port P1
        p1 = (*mpND_p1);
        q1 = (*mpND_q1);
        T1 = (*mpND_T1);
        dE1 = (*mpND_dE1);
        c1 = (*mpND_c1);
        Zc1 = (*mpND_Zc1);
        //Port P2
        p2 = (*mpND_p2);
        q2 = (*mpND_q2);
        T2 = (*mpND_T2);
        dE2 = (*mpND_dE2);
        c2 = (*mpND_c2);
        Zc2 = (*mpND_Zc2);

        //Read inputVariables from nodes
        omegap = (*mpND_omegap);

        //Read outputVariables from nodes
        q2e = mpPq2e->getStartValue(NodeSignal::VALUE);
        torp = mpPtorp->getStartValue(NodeSignal::VALUE);
        Pin = mpPPin->getStartValue(NodeSignal::VALUE);
        Pout = mpPPout->getStartValue(NodeSignal::VALUE);



        //Initialize delays

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(4);
        Vec stateVark(4);
        Vec deltaStateVar(4);

        //Read variables from nodes
        //Port P1
        T1 = (*mpND_T1);
        c1 = (*mpND_c1);
        Zc1 = (*mpND_Zc1);
        //Port P2
        T2 = (*mpND_T2);
        c2 = (*mpND_c2);
        Zc2 = (*mpND_Zc2);

        //Read inputVariables from nodes
        omegap = (*mpND_omegap);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = q2;
        stateVark[1] = torp;
        stateVark[2] = p1;
        stateVark[3] = p2;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //CentrifugalPump
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =q2 - (onNegative(q2) + \
onPositive(p1))*(mKcp*(p1 - p2) + mAp*signedSquareL((2*(p1 - p2 + \
(mrho*omegap*(0.25*mb*Power(md,2)*omegap - \
0.159155*mrho*q2*Cot(mbeta2)))/mb))/(mkl*mrho),10.));
          systemEquations[1] =(mkl*mrho*(-0.5*mKcp*p1 + 0.5*mKcp*p2 + \
0.5*q2)*Power(q2,2) + Power(mAp,2)*(mBp*omegap*(0.01 + 1.*omegap) + \
1.*mKcp*Power(p1,2) - 2.*mKcp*p1*p2 + 1.*mKcp*Power(p2,2) - 1.*p1*q2 + \
1.*p2*q2))/(Power(mAp,2)*(-0.01 - 1.*omegap)) + torp;
          systemEquations[2] =-c1 + p1 - q1*Zc1;
          systemEquations[3] =-c2 + p2 - q2*Zc2;

          //Jacobian matrix
          jacobianMatrix[0][0] = 1 + \
(0.31831*mAp*mrho*omegap*Cot(mbeta2)*dxSignedSquareL((2*(p1 - p2 + \
(mrho*omegap*(0.25*mb*Power(md,2)*omegap - \
0.159155*mrho*q2*Cot(mbeta2)))/mb))/(mkl*mrho),10.)*(onNegative(q2) + \
onPositive(p1)))/(mb*mkl);
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = -((mKcp + (2*mAp*dxSignedSquareL((2*(p1 - p2 \
+ (mrho*omegap*(0.25*mb*Power(md,2)*omegap - \
0.159155*mrho*q2*Cot(mbeta2)))/mb))/(mkl*mrho),10.))/(mkl*mrho))*(onNegative(\
q2) + onPositive(p1)));
          jacobianMatrix[0][3] = -((-mKcp - (2*mAp*dxSignedSquareL((2*(p1 - \
p2 + (mrho*omegap*(0.25*mb*Power(md,2)*omegap - \
0.159155*mrho*q2*Cot(mbeta2)))/mb))/(mkl*mrho),10.))/(mkl*mrho))*(onNegative(\
q2) + onPositive(p1)));
          jacobianMatrix[1][0] = (Power(mAp,2)*(0. - 1.*p1 + 1.*p2) + \
2*mkl*mrho*(-0.5*mKcp*p1 + 0.5*mKcp*p2 + 0.5*q2)*q2 + \
0.5*mkl*mrho*Power(q2,2))/(Power(mAp,2)*(-0.01 - 1.*omegap));
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = 0. + (Power(mAp,2)*(0. + 2.*mKcp*p1 - \
2.*mKcp*p2 - 1.*q2) + (0. - \
0.5*mKcp)*mkl*mrho*Power(q2,2))/(Power(mAp,2)*(-0.01 - 1.*omegap));
          jacobianMatrix[1][3] = 0. + ((0. + 0.5*mKcp)*mkl*mrho*Power(q2,2) + \
Power(mAp,2)*(0. - 2.*mKcp*p1 + 2.*mKcp*p2 + 1.*q2))/(Power(mAp,2)*(-0.01 - \
1.*omegap));
          jacobianMatrix[2][0] = 0;
          jacobianMatrix[2][1] = 0;
          jacobianMatrix[2][2] = 1;
          jacobianMatrix[2][3] = 0;
          jacobianMatrix[3][0] = -Zc2;
          jacobianMatrix[3][1] = 0;
          jacobianMatrix[3][2] = 0;
          jacobianMatrix[3][3] = 1;

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          q2=stateVark[0];
          torp=stateVark[1];
          p1=stateVark[2];
          p2=stateVark[3];
          //Expressions
          q1 = -q2;
          Pin = omegap*torp;
          Pout = (-p1 + p2)*q2;
        }

        //Calculate the delayed parts

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];

        //Write new values to nodes
        //Port P1
        (*mpND_p1)=p1;
        (*mpND_q1)=q1;
        (*mpND_dE1)=dE1;
        //Port P2
        (*mpND_p2)=p2;
        (*mpND_q2)=q2;
        (*mpND_dE2)=dE2;
        //outputVariables
        (*mpND_q2e)=q2e;
        (*mpND_torp)=torp;
        (*mpND_Pin)=Pin;
        (*mpND_Pout)=Pout;

        //Update the delayed variabels

     }
};
#endif // HYDRAULICCENTRIFUGALPUMP_HPP_INCLUDED
