#ifndef SIGNALATTITUDETVCCONTROL_HPP_INCLUDED
#define SIGNALATTITUDETVCCONTROL_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file SignalAttitudeTVCcontrol.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 22 Apr 2013 16:41:52
//! @brief Attitude control unit for an aircraft
//! @ingroup SignalComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, Users, petkr14.IEI, Documents, CompgenNG}/SignalControlAeroNGM.nb*/

using namespace hopsan;

class SignalAttitudeTVCcontrol : public ComponentSignal
{
private:
     double Kelev;
     double Krud;
     double KQrud;
     double KRrud;
     double umin;
     double umax;
     double *mpthetaref;
     double *mppsiref;
     double *mpphi;
     double *mptheta;
     double *mppsi;
     double *mpQb;
     double *mpRb;
     double *mpuelev;
     double *mpurud;
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double thetaref;
     double psiref;
     double phi;
     double theta;
     double psi;
     double Qb;
     double Rb;
     //outputVariables
     double uelev;
     double urud;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpND_thetaref;
     double *mpND_psiref;
     double *mpND_phi;
     double *mpND_theta;
     double *mpND_psi;
     double *mpND_Qb;
     double *mpND_Rb;
     //outputVariables pointers
     double *mpND_uelev;
     double *mpND_urud;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalAttitudeTVCcontrol();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("thetaref","Reference signal \
tip","rad",0.,&mpthetaref);
            addInputVariable("psiref","Reference signal \
yaw","rad",0.,&mppsiref);
            addInputVariable("phi","roll angle","rad",0.,&mpphi);
            addInputVariable("theta","tipp angle","rad",0.,&mptheta);
            addInputVariable("psi","yaw angle","rad",0.,&mppsi);
            addInputVariable("Qb","tip angle rate","rad/s",0.,&mpQb);
            addInputVariable("Rb","yaw angle rate","rad/s",0.,&mpRb);

        //Add outputVariables to the component
            addOutputVariable("uelev","elevator","rad",0.,&mpuelev);
            addOutputVariable("urud","rudder","rad",0.,&mpurud);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("Kelev", "Gain tip, default", "rad", 4.,Kelev);
            addConstant("Krud", "Gain yaw, default", "rad", 1.,Krud);
            addConstant("KQrud", "Gain tip rate, default", "", 1.,KQrud);
            addConstant("KRrud", "Gain yaw rate, default", "", 1.,KRrud);
            addConstant("umin", "Minium output signal roll", "rad", \
-0.9,umin);
            addConstant("umax", "Maximum output signal roll", "rad", \
0.9,umax);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        thetaref = (*mpthetaref);
        psiref = (*mppsiref);
        phi = (*mpphi);
        theta = (*mptheta);
        psi = (*mppsi);
        Qb = (*mpQb);
        Rb = (*mpRb);

        //Read outputVariables from nodes
        uelev = (*mpuelev);
        urud = (*mpurud);

//==This code has been autogenerated using Compgen==


        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        thetaref = (*mpND_thetaref);
        psiref = (*mpND_psiref);
        phi = (*mpND_phi);
        theta = (*mpND_theta);
        psi = (*mpND_psi);
        Qb = (*mpND_Qb);
        Rb = (*mpND_Rb);

        //LocalExpressions

          //Expressions
          uelev = limit(Kelev*(-(KQrud*Qb) + \
diffAngle(thetaref,theta)),umin,umax);
          urud = limit(Krud*(-(KRrud*Rb) + diffAngle(psiref,psi)),umin,umax);

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mpuelev)=uelev;
        (*mpurud)=urud;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // SIGNALATTITUDETVCCONTROL_HPP_INCLUDED
