#ifndef AEROATMOSPHERE_HPP_INCLUDED
#define AEROATMOSPHERE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroAtmosphere.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Wed 24 Apr 2013 14:07:28
//! @brief model of standard atmosphere
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/AeroComponents.nb*/

using namespace hopsan;

class AeroAtmosphere : public ComponentSignal
{
private:
     double g0;
     double rhos;
     double a;
     double R;
     double gamma;
     double Ts;
     double p0s;
     double htp;
     double Ttp;
     double ptp;
     double rhotp;
     double e;
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double ha;
     //outputVariables
     double rho;
     double Tav;
     double p0;
     double Vsound;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpha;
     //outputVariables pointers
     double *mprho;
     double *mpTav;
     double *mpp0;
     double *mpVsound;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroAtmosphere();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("ha","Altitude","m",0.,&mpha);

        //Add outputVariables to the component
            addOutputVariable("rho","The density at altitude \
h","kg/m3",1.25,&mprho);
            addOutputVariable("Tav","Temperature at altitude \
h","K",273.,&mpTav);
            addOutputVariable("p0","Pressure at altitude \
h","Pa",100000.,&mpp0);
            addOutputVariable("Vsound","Speed of sound at altitude \
h","m/s",340.,&mpVsound);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("g0", "Gravitation acceleration", "m/s^2", 9.81,g0);
            addConstant("rhos", "Density at sea level", "kg/m3", 1.225,rhos);
            addConstant("a", "", "", -0.0065,a);
            addConstant("R", "", "", 287,R);
            addConstant("gamma", "", "", 1.4,gamma);
            addConstant("Ts", "Temperature at sea level", "K", 288.16,Ts);
            addConstant("p0s", "", "Pa", 101300.,p0s);
            addConstant("htp", "Onset of tropopaus", "m", 11000.,htp);
            addConstant("Ttp", "", "K", 216.66,Ttp);
            addConstant("ptp", "", "Pa", 22610.,ptp);
            addConstant("rhotp", "", "kg/m3", 0.363649,rhotp);
            addConstant("e", "e", "", 2.71828,e);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        ha = (*mpha);

        //Read outputVariables from nodes
        rho = (*mprho);
        Tav = (*mpTav);
        p0 = (*mpp0);
        Vsound = (*mpVsound);

//==This code has been autogenerated using Compgen==


        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        ha = (*mpha);

        //LocalExpressions

          //Expressions
          rho = (rhotp*onPositive(ha - htp))/Power(e,(g0*(ha - htp))/(R*Ttp)) \
+ rhos*onNegative(ha - htp)*Power(((a*ha + Ts)*onNegative(ha - htp) + (a*htp \
+ Ts)*onPositive(ha - htp))/Ts,-1 - g0/(a*R));
          Tav = (a*ha + Ts)*onNegative(ha - htp) + (a*htp + Ts)*onPositive(ha \
- htp);
          p0 = (ptp*onPositive(ha - htp))/Power(e,(g0*(ha - htp))/(R*Ttp)) + \
(p0s*onNegative(ha - htp))/Power(((a*ha + Ts)*onNegative(ha - htp) + (a*htp + \
Ts)*onPositive(ha - htp))/Ts,g0/(a*R));
          Vsound = Sqrt(gamma*R*((a*ha + Ts)*onNegative(ha - htp) + (a*htp + \
Ts)*onPositive(ha - htp)));

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mprho)=rho;
        (*mpTav)=Tav;
        (*mpp0)=p0;
        (*mpVsound)=Vsound;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROATMOSPHERE_HPP_INCLUDED
