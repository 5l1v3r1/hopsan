#ifndef AEROATMOSPHERE_HPP_INCLUDED
#define AEROATMOSPHERE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroAtmosphere.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Wed 29 May 2013 14:46:25
//! @brief model of standard atmosphere
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/AeroComponents.nb*/

using namespace hopsan;

class AeroAtmosphere : public ComponentSignal
{
private:
     double g0;
     double rhos;
     double a;
     double R;
     double gamma;
     double Ts;
     double p0s;
     double htp;
     double Ttp;
     double ptp;
     double rhotp;
     double e;
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double ha;
     //outputVariables
     double rho;
     double T;
     double p0;
     double Vsound;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpha;
     //inputParameters pointers
     double *mpg0;
     double *mprhos;
     double *mpa;
     double *mpR;
     double *mpgamma;
     double *mpTs;
     double *mpp0s;
     double *mphtp;
     double *mpTtp;
     double *mpptp;
     double *mprhotp;
     double *mpe;
     //outputVariables pointers
     double *mprho;
     double *mpT;
     double *mpp0;
     double *mpVsound;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroAtmosphere();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;

        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("ha","Altitude","m",0.,&mpha);

        //Add inputParammeters to the component
            addInputVariable("g0", "&mpGravitation acceleration", "m/s^2", \
9.81,&mpg0);
            addInputVariable("rhos", "&mpDensity at sea level", "kg/m3", \
1.225,&mprhos);
            addInputVariable("a", "&mp", "", -0.0065,&mpa);
            addInputVariable("R", "&mp", "", 287,&mpR);
            addInputVariable("gamma", "&mp", "", 1.4,&mpgamma);
            addInputVariable("Ts", "&mpTemperature at sea level", "K", \
288.16,&mpTs);
            addInputVariable("p0s", "&mp", "Pa", 101300.,&mpp0s);
            addInputVariable("htp", "&mpOnset of tropopaus", "m", \
11000.,&mphtp);
            addInputVariable("Ttp", "&mp", "K", 216.66,&mpTtp);
            addInputVariable("ptp", "&mp", "Pa", 22610.,&mpptp);
            addInputVariable("rhotp", "&mp", "kg/m3", 0.363649,&mprhotp);
            addInputVariable("e", "&mpe", "", 2.71828,&mpe);
        //Add outputVariables to the component
            addOutputVariable("rho","The density at altitude \
h","kg/m3",1.25,&mprho);
            addOutputVariable("T","Temperature at altitude h","K",273.,&mpT);
            addOutputVariable("p0","Pressure at altitude \
h","Pa",100000.,&mpp0);
            addOutputVariable("Vsound","Speed of sound at altitude \
h","m/s",340.,&mpVsound);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        ha = (*mpha);

        //Read inputParameters from nodes
        g0 = (*mpg0);
        rhos = (*mprhos);
        a = (*mpa);
        R = (*mpR);
        gamma = (*mpgamma);
        Ts = (*mpTs);
        p0s = (*mpp0s);
        htp = (*mphtp);
        Ttp = (*mpTtp);
        ptp = (*mpptp);
        rhotp = (*mprhotp);
        e = (*mpe);

        //Read outputVariables from nodes
        rho = (*mprho);
        T = (*mpT);
        p0 = (*mpp0);
        Vsound = (*mpVsound);

//==This code has been autogenerated using Compgen==


        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes

        //Read inputVariables from nodes
        ha = (*mpha);

        //LocalExpressions

          //Expressions
          rho = (rhotp*onPositive(ha - htp))/Power(e,(g0*(ha - htp))/(R*Ttp)) \
+ rhos*onNegative(ha - htp)*Power(((a*ha + Ts)*onNegative(ha - htp) + (a*htp \
+ Ts)*onPositive(ha - htp))/Ts,-1 - g0/(a*R));
          T = (a*ha + Ts)*onNegative(ha - htp) + (a*htp + Ts)*onPositive(ha - \
htp);
          p0 = (ptp*onPositive(ha - htp))/Power(e,(g0*(ha - htp))/(R*Ttp)) + \
(p0s*onNegative(ha - htp))/Power(((a*ha + Ts)*onNegative(ha - htp) + (a*htp + \
Ts)*onPositive(ha - htp))/Ts,g0/(a*R));
          Vsound = Sqrt(gamma*R*((a*ha + Ts)*onNegative(ha - htp) + (a*htp + \
Ts)*onPositive(ha - htp)));

        //Calculate the delayed parts


        //Write new values to nodes
        //outputVariables
        (*mprho)=rho;
        (*mpT)=T;
        (*mpp0)=p0;
        (*mpVsound)=Vsound;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROATMOSPHERE_HPP_INCLUDED
