#ifndef AEROFUELTANK_HPP_INCLUDED
#define AEROFUELTANK_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroFuelTank.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 13 May 2013 18:22:18
//! @brief Calulates the mass of remaining fuel in tank
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/AeroComponents.nb*/

using namespace hopsan;

class AeroFuelTank : public ComponentQ
{
private:
     double massfuel0;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double massflow;
     //outputVariables
     double massfuel;
     double consfuel;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpmassflow;
     //outputVariables pointers
     double *mpmassfuel;
     double *mpconsfuel;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroFuelTank();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("massflow","Mass flow \
rate","kg/s",0.,&mpmassflow);

        //Add outputVariables to the component
            addOutputVariable("massfuel","Fuel mass","kg",0.,&mpmassfuel);
            addOutputVariable("consfuel","Consumed fuel \
mass","kg",0.,&mpconsfuel);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("massfuel0", "The intitial fuel mass", "kg/s", \
0.,massfuel0);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        massflow = (*mpmassflow);

        //Read outputVariables from nodes
        massfuel = (*mpmassfuel);
        consfuel = (*mpconsfuel);

//==This code has been autogenerated using Compgen==


        //Initialize delays
        delayParts1[1] = (-2*consfuel - massflow*mTimestep)/2.;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);

        delayedPart[1][1] = delayParts1[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes

        //Read inputVariables from nodes
        massflow = (*mpmassflow);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = consfuel;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //FuelTank
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =consfuel - limit((massflow*mTimestep)/2. - \
delayedPart[1][1],0,massfuel0);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          consfuel=stateVark[0];
          //Expressions
          massfuel = limit(-consfuel + massfuel0,0.,massfuel0);
        }

        //Calculate the delayed parts
        delayParts1[1] = (-2*consfuel - massflow*mTimestep)/2.;

        delayedPart[1][1] = delayParts1[1];

        //Write new values to nodes
        //outputVariables
        (*mpmassfuel)=massfuel;
        (*mpconsfuel)=consfuel;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROFUELTANK_HPP_INCLUDED
