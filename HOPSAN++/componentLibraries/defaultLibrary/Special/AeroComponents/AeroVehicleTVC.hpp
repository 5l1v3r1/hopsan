#ifndef AEROVEHICLETVC_HPP_INCLUDED
#define AEROVEHICLETVC_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroVehicleTVC.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Thu 31 Jan 2013 12:13:43
//! @brief Flight dynamics model of aircraft
//! @ingroup AeroComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Users, petkr14.IEI, Documents, CompgenNG}/AeroVehicleTVC2.nb*/

using namespace hopsan;

class AeroVehicleTVC : public ComponentC
{
private:
     double mCd0b;
     double mCtvc;
     double mCLalphabh;
     double mCLalphabv;
     double mhthrust0;
     double mIx;
     double mIxz;
     double mIy;
     double mIz;
     double mMe;
     double mSbh;
     double mSbv;
     double mxbach;
     double mxbacv;
     double mxbcge;
     double mxcargo;
     double mxfuel;
     double mxeng;
     double myeng;
     double mkground;
     double mcground;
     double mthrustl;
     double mthrustr;
     double mg0;
     double mMfuel;
     double mMcargo;
     double mrho;
     double mvturbx;
     double mvturby;
     double mvturbz;
     double mwturbx;
     double mwturby;
     double mwturbz;
     Port *mpPtvcly;
     Port *mpPtvclz;
     Port *mpPtvcry;
     Port *mpPtvcrz;
     Port *mpPthrustl;
     Port *mpPthrustr;
     Port *mpPg0;
     Port *mpPMfuel;
     Port *mpPMcargo;
     Port *mpPrho;
     Port *mpPvturbx;
     Port *mpPvturby;
     Port *mpPvturbz;
     Port *mpPwturbx;
     Port *mpPwturby;
     Port *mpPwturbz;
     Port *mpPxcg;
     Port *mpPycg;
     Port *mpPzcg;
     Port *mpPvx;
     Port *mpPvy;
     Port *mpPvz;
     Port *mpPPsi;
     Port *mpPThetao;
     Port *mpPPhi;
     Port *mpPUb;
     Port *mpPVb;
     Port *mpPWb;
     Port *mpPPb;
     Port *mpPQb;
     Port *mpPRb;
     Port *mpPq0;
     Port *mpPq1;
     Port *mpPq2;
     Port *mpPq3;
     Port *mpPAlphaAttack;
     Port *mpPBetaSlip;
     Port *mpPaltitude;
     Port *mpPgfx;
     Port *mpPgfy;
     Port *mpPgfz;
     Port *mpPCL1;
     Port *mpPCd1;
     Port *mpPFax;
     Port *mpPFaz;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     double delayParts5[9];
     double delayParts6[9];
     double delayParts7[9];
     double delayParts8[9];
     double delayParts9[9];
     double delayParts10[9];
     double delayParts11[9];
     double delayParts12[9];
     double delayParts13[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[13];
     int mNstep;
     //Port Ptvcly variable
     double tortvcly;
     double thetatvcly;
     double wtvcly;
     double ctvcly;
     double Zctvcly;
     double eqInertiatvcly;
     //Port Ptvclz variable
     double tortvclz;
     double thetatvclz;
     double wtvclz;
     double ctvclz;
     double Zctvclz;
     double eqInertiatvclz;
     //Port Ptvcry variable
     double tortvcry;
     double thetatvcry;
     double wtvcry;
     double ctvcry;
     double Zctvcry;
     double eqInertiatvcry;
     //Port Ptvcrz variable
     double tortvcrz;
     double thetatvcrz;
     double wtvcrz;
     double ctvcrz;
     double Zctvcrz;
     double eqInertiatvcrz;
     //inputVariables
     double thrustl;
     double thrustr;
     double g0;
     double Mfuel;
     double Mcargo;
     double rho;
     double vturbx;
     double vturby;
     double vturbz;
     double wturbx;
     double wturby;
     double wturbz;
     //outputVariables
     double xcg;
     double ycg;
     double zcg;
     double vx;
     double vy;
     double vz;
     double Psi;
     double Thetao;
     double Phi;
     double Ub;
     double Vb;
     double Wb;
     double Pb;
     double Qb;
     double Rb;
     double q0;
     double q1;
     double q2;
     double q3;
     double AlphaAttack;
     double BetaSlip;
     double altitude;
     double gfx;
     double gfy;
     double gfz;
     double CL1;
     double Cd1;
     double Fax;
     double Faz;
     //InitialExpressions variables

     //LocalExpressions variables
     double v;
     double Alpha;
     double qpress;
     double Beta;
     double mass;
     double xbcg;
     double Dragb;
     double Mdvtheta;
     double Mdvpsi;
     double Fx;
     double Fy;
     double Fz;
     double Lb;
     double Mb;
     double Nb;
     //Expressions variables
     double Zxtvcly;
     double Zxtvclz;
     double Zxtvcry;
     double Zxtvcrz;
     //Port Ptvcly pointer
     double *mpND_tortvcly;
     double *mpND_thetatvcly;
     double *mpND_wtvcly;
     double *mpND_ctvcly;
     double *mpND_Zctvcly;
     double *mpND_eqInertiatvcly;
     //Port Ptvclz pointer
     double *mpND_tortvclz;
     double *mpND_thetatvclz;
     double *mpND_wtvclz;
     double *mpND_ctvclz;
     double *mpND_Zctvclz;
     double *mpND_eqInertiatvclz;
     //Port Ptvcry pointer
     double *mpND_tortvcry;
     double *mpND_thetatvcry;
     double *mpND_wtvcry;
     double *mpND_ctvcry;
     double *mpND_Zctvcry;
     double *mpND_eqInertiatvcry;
     //Port Ptvcrz pointer
     double *mpND_tortvcrz;
     double *mpND_thetatvcrz;
     double *mpND_wtvcrz;
     double *mpND_ctvcrz;
     double *mpND_Zctvcrz;
     double *mpND_eqInertiatvcrz;
     //Delay declarations
     //inputVariables pointers
     double *mpND_thrustl;
     double *mpND_thrustr;
     double *mpND_g0;
     double *mpND_Mfuel;
     double *mpND_Mcargo;
     double *mpND_rho;
     double *mpND_vturbx;
     double *mpND_vturby;
     double *mpND_vturbz;
     double *mpND_wturbx;
     double *mpND_wturby;
     double *mpND_wturbz;
     //outputVariables pointers
     double *mpND_xcg;
     double *mpND_ycg;
     double *mpND_zcg;
     double *mpND_vx;
     double *mpND_vy;
     double *mpND_vz;
     double *mpND_Psi;
     double *mpND_Thetao;
     double *mpND_Phi;
     double *mpND_Ub;
     double *mpND_Vb;
     double *mpND_Wb;
     double *mpND_Pb;
     double *mpND_Qb;
     double *mpND_Rb;
     double *mpND_q0;
     double *mpND_q1;
     double *mpND_q2;
     double *mpND_q3;
     double *mpND_AlphaAttack;
     double *mpND_BetaSlip;
     double *mpND_altitude;
     double *mpND_gfx;
     double *mpND_gfy;
     double *mpND_gfz;
     double *mpND_CL1;
     double *mpND_Cd1;
     double *mpND_Fax;
     double *mpND_Faz;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart20;
     Delay mDelayedPart21;
     Delay mDelayedPart30;
     Delay mDelayedPart31;
     Delay mDelayedPart40;
     Delay mDelayedPart41;
     Delay mDelayedPart50;
     Delay mDelayedPart51;
     Delay mDelayedPart60;
     Delay mDelayedPart61;
     Delay mDelayedPart70;
     Delay mDelayedPart71;
     Delay mDelayedPart80;
     Delay mDelayedPart81;
     Delay mDelayedPart90;
     Delay mDelayedPart91;
     Delay mDelayedPart100;
     Delay mDelayedPart101;
     Delay mDelayedPart110;
     Delay mDelayedPart111;
     Delay mDelayedPart120;
     Delay mDelayedPart121;
     Delay mDelayedPart130;
     Delay mDelayedPart131;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroVehicleTVC();
     }

     void configure()
     {
        const double Cd0b = 0.004;
        const double Ctvc = 0.1;
        const double CLalphabh = 2.;
        const double CLalphabv = 2.;
        const double hthrust0 = 0.;
        const double Ix = 1000.;
        const double Ixz = 500.;
        const double Iy = 3000.;
        const double Iz = 3000.;
        const double Me = 5000.;
        const double Sbh = 5;
        const double Sbv = 5;
        const double xbach = 8.5;
        const double xbacv = 8.5;
        const double xbcge = 6.;
        const double xcargo = 6.;
        const double xfuel = 6.;
        const double xeng = 0.;
        const double yeng = 0.;
        const double kground = 10000.;
        const double cground = 1000.;
        const double thrustl = 0.;
        const double thrustr = 0.;
        const double g0 = 9.81;
        const double Mfuel = 0.;
        const double Mcargo = 0.;
        const double rho = 1.25;
        const double vturbx = 0.;
        const double vturby = 0.;
        const double vturbz = 0.;
        const double wturbx = 0.;
        const double wturby = 0.;
        const double wturbz = 0.;

        mNstep=9;
        jacobianMatrix.create(13,13);
        systemEquations.create(13);
        delayedPart.create(14,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mCd0b = Cd0b;
        mCtvc = Ctvc;
        mCLalphabh = CLalphabh;
        mCLalphabv = CLalphabv;
        mhthrust0 = hthrust0;
        mIx = Ix;
        mIxz = Ixz;
        mIy = Iy;
        mIz = Iz;
        mMe = Me;
        mSbh = Sbh;
        mSbv = Sbv;
        mxbach = xbach;
        mxbacv = xbacv;
        mxbcge = xbcge;
        mxcargo = xcargo;
        mxfuel = xfuel;
        mxeng = xeng;
        myeng = yeng;
        mkground = kground;
        mcground = cground;
        mthrustl = thrustl;
        mthrustr = thrustr;
        mg0 = g0;
        mMfuel = Mfuel;
        mMcargo = Mcargo;
        mrho = rho;
        mvturbx = vturbx;
        mvturby = vturby;
        mvturbz = vturbz;
        mwturbx = wturbx;
        mwturby = wturby;
        mwturbz = wturbz;

        //Add ports to the component
        mpPtvcly=addPowerPort("Ptvcly","NodeMechanicRotational");
        mpPtvclz=addPowerPort("Ptvclz","NodeMechanicRotational");
        mpPtvcry=addPowerPort("Ptvcry","NodeMechanicRotational");
        mpPtvcrz=addPowerPort("Ptvcrz","NodeMechanicRotational");

        //Add inputVariables ports to the component
        mpPthrustl=addReadPort("Pthrustl","NodeSignal", Port::NotRequired);
        mpPthrustr=addReadPort("Pthrustr","NodeSignal", Port::NotRequired);
        mpPg0=addReadPort("Pg0","NodeSignal", Port::NotRequired);
        mpPMfuel=addReadPort("PMfuel","NodeSignal", Port::NotRequired);
        mpPMcargo=addReadPort("PMcargo","NodeSignal", Port::NotRequired);
        mpPrho=addReadPort("Prho","NodeSignal", Port::NotRequired);
        mpPvturbx=addReadPort("Pvturbx","NodeSignal", Port::NotRequired);
        mpPvturby=addReadPort("Pvturby","NodeSignal", Port::NotRequired);
        mpPvturbz=addReadPort("Pvturbz","NodeSignal", Port::NotRequired);
        mpPwturbx=addReadPort("Pwturbx","NodeSignal", Port::NotRequired);
        mpPwturby=addReadPort("Pwturby","NodeSignal", Port::NotRequired);
        mpPwturbz=addReadPort("Pwturbz","NodeSignal", Port::NotRequired);

        //Add outputVariables ports to the component
        mpPxcg=addWritePort("Pxcg","NodeSignal", Port::NotRequired);
        mpPycg=addWritePort("Pycg","NodeSignal", Port::NotRequired);
        mpPzcg=addWritePort("Pzcg","NodeSignal", Port::NotRequired);
        mpPvx=addWritePort("Pvx","NodeSignal", Port::NotRequired);
        mpPvy=addWritePort("Pvy","NodeSignal", Port::NotRequired);
        mpPvz=addWritePort("Pvz","NodeSignal", Port::NotRequired);
        mpPPsi=addWritePort("PPsi","NodeSignal", Port::NotRequired);
        mpPThetao=addWritePort("PThetao","NodeSignal", Port::NotRequired);
        mpPPhi=addWritePort("PPhi","NodeSignal", Port::NotRequired);
        mpPUb=addWritePort("PUb","NodeSignal", Port::NotRequired);
        mpPVb=addWritePort("PVb","NodeSignal", Port::NotRequired);
        mpPWb=addWritePort("PWb","NodeSignal", Port::NotRequired);
        mpPPb=addWritePort("PPb","NodeSignal", Port::NotRequired);
        mpPQb=addWritePort("PQb","NodeSignal", Port::NotRequired);
        mpPRb=addWritePort("PRb","NodeSignal", Port::NotRequired);
        mpPq0=addWritePort("Pq0","NodeSignal", Port::NotRequired);
        mpPq1=addWritePort("Pq1","NodeSignal", Port::NotRequired);
        mpPq2=addWritePort("Pq2","NodeSignal", Port::NotRequired);
        mpPq3=addWritePort("Pq3","NodeSignal", Port::NotRequired);
        mpPAlphaAttack=addWritePort("PAlphaAttack","NodeSignal", \
Port::NotRequired);
        mpPBetaSlip=addWritePort("PBetaSlip","NodeSignal", \
Port::NotRequired);
        mpPaltitude=addWritePort("Paltitude","NodeSignal", \
Port::NotRequired);
        mpPgfx=addWritePort("Pgfx","NodeSignal", Port::NotRequired);
        mpPgfy=addWritePort("Pgfy","NodeSignal", Port::NotRequired);
        mpPgfz=addWritePort("Pgfz","NodeSignal", Port::NotRequired);
        mpPCL1=addWritePort("PCL1","NodeSignal", Port::NotRequired);
        mpPCd1=addWritePort("PCd1","NodeSignal", Port::NotRequired);
        mpPFax=addWritePort("PFax","NodeSignal", Port::NotRequired);
        mpPFaz=addWritePort("PFaz","NodeSignal", Port::NotRequired);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("Cd0b", "Drag coef. body", "", mCd0b);
        registerParameter("Ctvc", "hinge ciefficient TVC", "m/rad", mCtvc);
        registerParameter("CLalphabh", "L. slope c. body h", "", mCLalphabh);
        registerParameter("CLalphabv", "L. slope c. body v", "", mCLalphabv);
        registerParameter("hthrust0", "engine vert. pos", "", mhthrust0);
        registerParameter("Ix", "Inertia moment", "kgm2", mIx);
        registerParameter("Ixz", "Inertia moment", "kgm2", mIxz);
        registerParameter("Iy", "Inertia moment", "kgm2", mIy);
        registerParameter("Iz", "Inertia moment", "kgm2", mIz);
        registerParameter("Me", "Empty weight", "kg", mMe);
        registerParameter("Sbh", "norm. hor. proj. area", "", mSbh);
        registerParameter("Sbv", "norm.body vert. proj. area", "", mSbv);
        registerParameter("xbach", "body ac. hor.", "m", mxbach);
        registerParameter("xbacv", "body ac vert.", "m", mxbacv);
        registerParameter("xbcge", "body cg", "m", mxbcge);
        registerParameter("xcargo", "cargo pos.", "m", mxcargo);
        registerParameter("xfuel", "", "m", mxfuel);
        registerParameter("xeng", "engine thrust centre position", "m", \
mxeng);
        registerParameter("yeng", "engines off. from center", "m", myeng);
        registerParameter("kground", "Ground stiffness (for limitiation)", \
"N/m", mkground);
        registerParameter("cground", "Ground damping (for limitiation)", \
"Ns/m", mcground);
        registerParameter("thrustl", "Engine thrust", "N", mthrustl);
        registerParameter("thrustr", "Engine thrust", "N", mthrustr);
        registerParameter("g0", "Gravity acceleration", "m/s^2", mg0);
        registerParameter("Mfuel", "Fuel weight", "kg", mMfuel);
        registerParameter("Mcargo", "Cargo weight", "kg", mMcargo);
        registerParameter("rho", "Air density", "kg/m3", mrho);
        registerParameter("vturbx", "air turbulence x", "m/s", mvturbx);
        registerParameter("vturby", "air turbulence y", "m/s", mvturby);
        registerParameter("vturbz", "air turbulence z", "m/s", mvturbz);
        registerParameter("wturbx", "air turbulence x", "rad/s", mwturbx);
        registerParameter("wturby", "air turbulence y", "rad/s", mwturby);
        registerParameter("wturbz", "air turbulence z", "rad/s", mwturbz);
        mpSolver = new EquationSystemSolver(this,13);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Ptvcly
        mpND_tortvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::Torque);
        mpND_thetatvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::Angle);
        mpND_wtvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::AngularVelocity);
        mpND_ctvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::WaveVariable);
        mpND_Zctvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::CharImpedance);
        mpND_eqInertiatvcly=getSafeNodeDataPtr(mpPtvcly, \
NodeMechanicRotational::EquivalentInertia);
        //Port Ptvclz
        mpND_tortvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::Torque);
        mpND_thetatvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::Angle);
        mpND_wtvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::AngularVelocity);
        mpND_ctvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::WaveVariable);
        mpND_Zctvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::CharImpedance);
        mpND_eqInertiatvclz=getSafeNodeDataPtr(mpPtvclz, \
NodeMechanicRotational::EquivalentInertia);
        //Port Ptvcry
        mpND_tortvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::Torque);
        mpND_thetatvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::Angle);
        mpND_wtvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::AngularVelocity);
        mpND_ctvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::WaveVariable);
        mpND_Zctvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::CharImpedance);
        mpND_eqInertiatvcry=getSafeNodeDataPtr(mpPtvcry, \
NodeMechanicRotational::EquivalentInertia);
        //Port Ptvcrz
        mpND_tortvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::Torque);
        mpND_thetatvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::Angle);
        mpND_wtvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::AngularVelocity);
        mpND_ctvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::WaveVariable);
        mpND_Zctvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::CharImpedance);
        mpND_eqInertiatvcrz=getSafeNodeDataPtr(mpPtvcrz, \
NodeMechanicRotational::EquivalentInertia);
        //Read inputVariables pointers from nodes
        mpND_thrustl=getSafeNodeDataPtr(mpPthrustl, \
NodeSignal::VALUE,mthrustl);
        mpND_thrustr=getSafeNodeDataPtr(mpPthrustr, \
NodeSignal::VALUE,mthrustr);
        mpND_g0=getSafeNodeDataPtr(mpPg0, NodeSignal::VALUE,mg0);
        mpND_Mfuel=getSafeNodeDataPtr(mpPMfuel, NodeSignal::VALUE,mMfuel);
        mpND_Mcargo=getSafeNodeDataPtr(mpPMcargo, NodeSignal::VALUE,mMcargo);
        mpND_rho=getSafeNodeDataPtr(mpPrho, NodeSignal::VALUE,mrho);
        mpND_vturbx=getSafeNodeDataPtr(mpPvturbx, NodeSignal::VALUE,mvturbx);
        mpND_vturby=getSafeNodeDataPtr(mpPvturby, NodeSignal::VALUE,mvturby);
        mpND_vturbz=getSafeNodeDataPtr(mpPvturbz, NodeSignal::VALUE,mvturbz);
        mpND_wturbx=getSafeNodeDataPtr(mpPwturbx, NodeSignal::VALUE,mwturbx);
        mpND_wturby=getSafeNodeDataPtr(mpPwturby, NodeSignal::VALUE,mwturby);
        mpND_wturbz=getSafeNodeDataPtr(mpPwturbz, NodeSignal::VALUE,mwturbz);
        //Read outputVariable pointers from nodes
        mpND_xcg=getSafeNodeDataPtr(mpPxcg, NodeSignal::VALUE);
        mpND_ycg=getSafeNodeDataPtr(mpPycg, NodeSignal::VALUE);
        mpND_zcg=getSafeNodeDataPtr(mpPzcg, NodeSignal::VALUE);
        mpND_vx=getSafeNodeDataPtr(mpPvx, NodeSignal::VALUE);
        mpND_vy=getSafeNodeDataPtr(mpPvy, NodeSignal::VALUE);
        mpND_vz=getSafeNodeDataPtr(mpPvz, NodeSignal::VALUE);
        mpND_Psi=getSafeNodeDataPtr(mpPPsi, NodeSignal::VALUE);
        mpND_Thetao=getSafeNodeDataPtr(mpPThetao, NodeSignal::VALUE);
        mpND_Phi=getSafeNodeDataPtr(mpPPhi, NodeSignal::VALUE);
        mpND_Ub=getSafeNodeDataPtr(mpPUb, NodeSignal::VALUE);
        mpND_Vb=getSafeNodeDataPtr(mpPVb, NodeSignal::VALUE);
        mpND_Wb=getSafeNodeDataPtr(mpPWb, NodeSignal::VALUE);
        mpND_Pb=getSafeNodeDataPtr(mpPPb, NodeSignal::VALUE);
        mpND_Qb=getSafeNodeDataPtr(mpPQb, NodeSignal::VALUE);
        mpND_Rb=getSafeNodeDataPtr(mpPRb, NodeSignal::VALUE);
        mpND_q0=getSafeNodeDataPtr(mpPq0, NodeSignal::VALUE);
        mpND_q1=getSafeNodeDataPtr(mpPq1, NodeSignal::VALUE);
        mpND_q2=getSafeNodeDataPtr(mpPq2, NodeSignal::VALUE);
        mpND_q3=getSafeNodeDataPtr(mpPq3, NodeSignal::VALUE);
        mpND_AlphaAttack=getSafeNodeDataPtr(mpPAlphaAttack, \
NodeSignal::VALUE);
        mpND_BetaSlip=getSafeNodeDataPtr(mpPBetaSlip, NodeSignal::VALUE);
        mpND_altitude=getSafeNodeDataPtr(mpPaltitude, NodeSignal::VALUE);
        mpND_gfx=getSafeNodeDataPtr(mpPgfx, NodeSignal::VALUE);
        mpND_gfy=getSafeNodeDataPtr(mpPgfy, NodeSignal::VALUE);
        mpND_gfz=getSafeNodeDataPtr(mpPgfz, NodeSignal::VALUE);
        mpND_CL1=getSafeNodeDataPtr(mpPCL1, NodeSignal::VALUE);
        mpND_Cd1=getSafeNodeDataPtr(mpPCd1, NodeSignal::VALUE);
        mpND_Fax=getSafeNodeDataPtr(mpPFax, NodeSignal::VALUE);
        mpND_Faz=getSafeNodeDataPtr(mpPFaz, NodeSignal::VALUE);

        //Read variables from nodes
        //Port Ptvcly
        tortvcly = (*mpND_tortvcly);
        thetatvcly = (*mpND_thetatvcly);
        wtvcly = (*mpND_wtvcly);
        ctvcly = (*mpND_ctvcly);
        Zctvcly = (*mpND_Zctvcly);
        eqInertiatvcly = (*mpND_eqInertiatvcly);
        //Port Ptvclz
        tortvclz = (*mpND_tortvclz);
        thetatvclz = (*mpND_thetatvclz);
        wtvclz = (*mpND_wtvclz);
        ctvclz = (*mpND_ctvclz);
        Zctvclz = (*mpND_Zctvclz);
        eqInertiatvclz = (*mpND_eqInertiatvclz);
        //Port Ptvcry
        tortvcry = (*mpND_tortvcry);
        thetatvcry = (*mpND_thetatvcry);
        wtvcry = (*mpND_wtvcry);
        ctvcry = (*mpND_ctvcry);
        Zctvcry = (*mpND_Zctvcry);
        eqInertiatvcry = (*mpND_eqInertiatvcry);
        //Port Ptvcrz
        tortvcrz = (*mpND_tortvcrz);
        thetatvcrz = (*mpND_thetatvcrz);
        wtvcrz = (*mpND_wtvcrz);
        ctvcrz = (*mpND_ctvcrz);
        Zctvcrz = (*mpND_Zctvcrz);
        eqInertiatvcrz = (*mpND_eqInertiatvcrz);

        //Read inputVariables from nodes
        thrustl = (*mpND_thrustl);
        thrustr = (*mpND_thrustr);
        g0 = (*mpND_g0);
        Mfuel = (*mpND_Mfuel);
        Mcargo = (*mpND_Mcargo);
        rho = (*mpND_rho);
        vturbx = (*mpND_vturbx);
        vturby = (*mpND_vturby);
        vturbz = (*mpND_vturbz);
        wturbx = (*mpND_wturbx);
        wturby = (*mpND_wturby);
        wturbz = (*mpND_wturbz);

        //Read outputVariables from nodes
        xcg = mpPxcg->getStartValue(NodeSignal::VALUE);
        ycg = mpPycg->getStartValue(NodeSignal::VALUE);
        zcg = mpPzcg->getStartValue(NodeSignal::VALUE);
        vx = mpPvx->getStartValue(NodeSignal::VALUE);
        vy = mpPvy->getStartValue(NodeSignal::VALUE);
        vz = mpPvz->getStartValue(NodeSignal::VALUE);
        Psi = mpPPsi->getStartValue(NodeSignal::VALUE);
        Thetao = mpPThetao->getStartValue(NodeSignal::VALUE);
        Phi = mpPPhi->getStartValue(NodeSignal::VALUE);
        Ub = mpPUb->getStartValue(NodeSignal::VALUE);
        Vb = mpPVb->getStartValue(NodeSignal::VALUE);
        Wb = mpPWb->getStartValue(NodeSignal::VALUE);
        Pb = mpPPb->getStartValue(NodeSignal::VALUE);
        Qb = mpPQb->getStartValue(NodeSignal::VALUE);
        Rb = mpPRb->getStartValue(NodeSignal::VALUE);
        q0 = mpPq0->getStartValue(NodeSignal::VALUE);
        q1 = mpPq1->getStartValue(NodeSignal::VALUE);
        q2 = mpPq2->getStartValue(NodeSignal::VALUE);
        q3 = mpPq3->getStartValue(NodeSignal::VALUE);
        AlphaAttack = mpPAlphaAttack->getStartValue(NodeSignal::VALUE);
        BetaSlip = mpPBetaSlip->getStartValue(NodeSignal::VALUE);
        altitude = mpPaltitude->getStartValue(NodeSignal::VALUE);
        gfx = mpPgfx->getStartValue(NodeSignal::VALUE);
        gfy = mpPgfy->getStartValue(NodeSignal::VALUE);
        gfz = mpPgfz->getStartValue(NodeSignal::VALUE);
        CL1 = mpPCL1->getStartValue(NodeSignal::VALUE);
        Cd1 = mpPCd1->getStartValue(NodeSignal::VALUE);
        Fax = mpPFax->getStartValue(NodeSignal::VALUE);
        Faz = mpPFaz->getStartValue(NodeSignal::VALUE);

        //InitialExpressions
        q0 = Cos(Phi/2.)*Cos(Psi/2.)*Cos(Thetao/2.) + \
Sin(Phi/2.)*Sin(Psi/2.)*Sin(Thetao/2.);
        q1 = Cos(Psi/2.)*Cos(Thetao/2.)*Sin(Phi/2.) - \
Cos(Phi/2.)*Sin(Psi/2.)*Sin(Thetao/2.);
        q2 = Cos(Thetao/2.)*Sin(Phi/2.)*Sin(Psi/2.) + \
Cos(Phi/2.)*Cos(Psi/2.)*Sin(Thetao/2.);
        q3 = Cos(Phi/2.)*Cos(Thetao/2.)*Sin(Psi/2.) - \
Cos(Psi/2.)*Sin(Phi/2.)*Sin(Thetao/2.);

        //LocalExpressions
        v = Sqrt(0.0001 + Power(Ub + vturbx,2) + Power(Vb + vturby,2) + \
Power(vturbz + Wb,2));
        Alpha = Atan2L(vturbz + Wb,0.0001 + Ub + vturbx);
        qpress = (rho*Power(v,2))/2.;
        Beta = Atan2L(Vb + vturby,Sqrt(0.0001 + Power(Ub + vturbx,2) + \
Power(vturbz + Wb,2)));
        mass = Mcargo + Mfuel + mMe;
        xbcg = (mMe*mxbcge + Mcargo*mxcargo + Mfuel*mxfuel)/mass;
        Dragb = qpress*(mSbh*(mCd0b + mCLalphabh*Cos(Alpha)) + \
mCLalphabv*mSbv*Cos(Beta));
        Mdvtheta = (mCLalphabh*mSbh*qpress*Power(mxbach - xbcg,2))/(0.1 + v);
        Mdvpsi = (mCLalphabv*mSbv*qpress*Power(mxbacv - xbcg,2))/(0.1 + v);
        Fx = -(Dragb*Cos(Alpha)*Cos(Beta)) + \
thrustl*Cos(thetatvcly)*Cos(thetatvclz) + \
thrustr*Cos(thetatvcry)*Cos(thetatvcrz) + \
mCLalphabh*mSbh*qpress*Power(Sin(Alpha),2) - \
mCLalphabv*mSbv*qpress*Cos(Alpha)*Power(Sin(Beta),2);
        Fy = -(Dragb*Sin(Beta)) + mCLalphabv*mSbv*qpress*Cos(Beta)*Sin(Beta) \
- thrustl*Cos(thetatvclz)*Sin(thetatvcly) - \
thrustr*Cos(thetatvcrz)*Sin(thetatvcry);
        Fz = -(mCLalphabh*mSbh*qpress*Cos(Alpha)*Sin(Alpha)) - \
Dragb*Cos(Beta)*Sin(Alpha) - \
mCLalphabv*mSbv*qpress*Sin(Alpha)*Power(Sin(Beta),2) - \
thrustl*Cos(thetatvcly)*Sin(thetatvclz) - \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz);
        Lb = -(Cos(Alpha)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha))*Sin(Beta)) - \
Sin(Alpha)*(-(Mdvpsi*(Rb + wturbz)) + mCLalphabv*mSbv*qpress*(mxbacv - \
xbcg)*Sin(Beta)) + myeng*(thrustl*Cos(thetatvcly)*Sin(thetatvclz) - \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz));
        Mb = Cos(Beta)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha)) + (-mxeng + \
xbcg)*(thrustl*Cos(thetatvcly)*Sin(thetatvclz) + \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz));
        Nb = -(Sin(Alpha)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha))*Sin(Beta)) + \
Cos(Alpha)*(-(Mdvpsi*(Rb + wturbz)) + mCLalphabv*mSbv*qpress*(mxbacv - \
xbcg)*Sin(Beta)) + (-mxeng + xbcg)*(thrustl*Cos(thetatvclz)*Sin(thetatvcly) + \
thrustr*Cos(thetatvcrz)*Sin(thetatvcry));

        //Initialize delays
        delayParts1[1] = (-(Fx*mTimestep) + 2*g0*mass*mTimestep*q0*q2 - \
2*g0*mass*mTimestep*q1*q3 - 2*mass*Ub - mass*mTimestep*Rb*Vb + \
mass*mTimestep*Qb*Wb - 2*mkground*mTimestep*q0*q2*zcg*onPositive(zcg) + \
2*mkground*mTimestep*q1*q3*zcg*onPositive(zcg))/(2.*mass);
        mDelayedPart11.initialize(mNstep,delayParts1[1]);
        delayParts2[1] = (-(Fy*mTimestep) - 2*g0*mass*mTimestep*q0*q1 - \
2*g0*mass*mTimestep*q2*q3 + mass*mTimestep*Rb*Ub - 2*mass*Vb - \
mass*mTimestep*Pb*Wb + 2*mkground*mTimestep*q0*q1*zcg*onPositive(zcg) + \
2*mkground*mTimestep*q2*q3*zcg*onPositive(zcg))/(2.*mass);
        mDelayedPart21.initialize(mNstep,delayParts2[1]);
        delayParts3[1] = (-(Fz*mTimestep) - g0*mass*mTimestep*Power(q0,2) + \
g0*mass*mTimestep*Power(q1,2) + g0*mass*mTimestep*Power(q2,2) - \
g0*mass*mTimestep*Power(q3,2) - mass*mTimestep*Qb*Ub + mass*mTimestep*Pb*Vb - \
2*mass*Wb + mkground*mTimestep*Power(q0,2)*zcg*onPositive(zcg) - \
mkground*mTimestep*Power(q1,2)*zcg*onPositive(zcg) - \
mkground*mTimestep*Power(q2,2)*zcg*onPositive(zcg) + \
mkground*mTimestep*Power(q3,2)*zcg*onPositive(zcg))/(2.*mass);
        mDelayedPart31.initialize(mNstep,delayParts3[1]);
        delayParts4[1] = (Lb*mIz*mTimestep + mIxz*mTimestep*Nb - \
2*Power(mIxz,2)*Pb + 2*mIx*mIz*Pb + mIx*mIxz*mTimestep*Pb*Qb - \
mIxz*mIy*mTimestep*Pb*Qb + mIxz*mIz*mTimestep*Pb*Qb - \
Power(mIxz,2)*mTimestep*Qb*Rb + mIy*mIz*mTimestep*Qb*Rb - \
Power(mIz,2)*mTimestep*Qb*Rb)/(2*Power(mIxz,2) - 2*mIx*mIz + \
mIx*mIxz*mTimestep*Qb - mIxz*mIy*mTimestep*Qb + mIxz*mIz*mTimestep*Qb);
        mDelayedPart41.initialize(mNstep,delayParts4[1]);
        delayParts5[1] = (-(Mb*mTimestep) + mIxz*mTimestep*Power(Pb,2) - \
2*mIy*Qb + mIx*mTimestep*Pb*Rb - mIz*mTimestep*Pb*Rb - \
mIxz*mTimestep*Power(Rb,2))/(2.*mIy);
        mDelayedPart51.initialize(mNstep,delayParts5[1]);
        delayParts6[1] = (Lb*mIxz*mTimestep + mIx*mTimestep*Nb + \
Power(mIx,2)*mTimestep*Pb*Qb + Power(mIxz,2)*mTimestep*Pb*Qb - \
mIx*mIy*mTimestep*Pb*Qb - 2*Power(mIxz,2)*Rb + 2*mIx*mIz*Rb - \
mIx*mIxz*mTimestep*Qb*Rb + mIxz*mIy*mTimestep*Qb*Rb - \
mIxz*mIz*mTimestep*Qb*Rb)/(2*Power(mIxz,2) - 2*mIx*mIz - \
mIx*mIxz*mTimestep*Qb + mIxz*mIy*mTimestep*Qb - mIxz*mIz*mTimestep*Qb);
        mDelayedPart61.initialize(mNstep,delayParts6[1]);
        delayParts7[1] = (-4*q0 + mTimestep*Pb*q1 + mTimestep*q2*Qb + \
mTimestep*q3*Rb)/4.;
        mDelayedPart71.initialize(mNstep,delayParts7[1]);
        delayParts8[1] = (-(mTimestep*Pb*q0) - 4*q1 + mTimestep*q3*Qb - \
mTimestep*q2*Rb)/4.;
        mDelayedPart81.initialize(mNstep,delayParts8[1]);
        delayParts9[1] = (-4*q2 - mTimestep*Pb*q3 - mTimestep*q0*Qb + \
mTimestep*q1*Rb)/4.;
        mDelayedPart91.initialize(mNstep,delayParts9[1]);
        delayParts10[1] = (mTimestep*Pb*q2 - 4*q3 - mTimestep*q1*Qb - \
mTimestep*q0*Rb)/4.;
        mDelayedPart101.initialize(mNstep,delayParts10[1]);
        delayParts11[1] = (-(mTimestep*Power(q0,2)*Ub) - \
mTimestep*Power(q1,2)*Ub + mTimestep*Power(q2,2)*Ub + \
mTimestep*Power(q3,2)*Ub - 2*mTimestep*q1*q2*Vb + 2*mTimestep*q0*q3*Vb - \
2*mTimestep*q0*q2*Wb - 2*mTimestep*q1*q3*Wb - 2*xcg)/2.;
        mDelayedPart111.initialize(mNstep,delayParts11[1]);
        delayParts12[1] = (-2*mTimestep*q1*q2*Ub - 2*mTimestep*q0*q3*Ub - \
mTimestep*Power(q0,2)*Vb + mTimestep*Power(q1,2)*Vb - \
mTimestep*Power(q2,2)*Vb + mTimestep*Power(q3,2)*Vb + 2*mTimestep*q0*q1*Wb - \
2*mTimestep*q2*q3*Wb - 2*ycg)/2.;
        mDelayedPart121.initialize(mNstep,delayParts12[1]);
        delayParts13[1] = (2*mTimestep*q0*q2*Ub - 2*mTimestep*q1*q3*Ub - \
2*mTimestep*q0*q1*Vb - 2*mTimestep*q2*q3*Vb - mTimestep*Power(q0,2)*Wb + \
mTimestep*Power(q1,2)*Wb + mTimestep*Power(q2,2)*Wb - \
mTimestep*Power(q3,2)*Wb - 2*zcg)/2.;
        mDelayedPart131.initialize(mNstep,delayParts13[1]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
        delayedPart[8][1] = delayParts8[1];
        delayedPart[9][1] = delayParts9[1];
        delayedPart[10][1] = delayParts10[1];
        delayedPart[11][1] = delayParts11[1];
        delayedPart[12][1] = delayParts12[1];
        delayedPart[13][1] = delayParts13[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(13);
        Vec stateVark(13);
        Vec deltaStateVar(13);

        //Read variables from nodes
        //Port Ptvcly
        tortvcly = (*mpND_tortvcly);
        thetatvcly = (*mpND_thetatvcly);
        wtvcly = (*mpND_wtvcly);
        eqInertiatvcly = (*mpND_eqInertiatvcly);
        //Port Ptvclz
        tortvclz = (*mpND_tortvclz);
        thetatvclz = (*mpND_thetatvclz);
        wtvclz = (*mpND_wtvclz);
        eqInertiatvclz = (*mpND_eqInertiatvclz);
        //Port Ptvcry
        tortvcry = (*mpND_tortvcry);
        thetatvcry = (*mpND_thetatvcry);
        wtvcry = (*mpND_wtvcry);
        eqInertiatvcry = (*mpND_eqInertiatvcry);
        //Port Ptvcrz
        tortvcrz = (*mpND_tortvcrz);
        thetatvcrz = (*mpND_thetatvcrz);
        wtvcrz = (*mpND_wtvcrz);
        eqInertiatvcrz = (*mpND_eqInertiatvcrz);

        //Read inputVariables from nodes
        thrustl = (*mpND_thrustl);
        thrustr = (*mpND_thrustr);
        g0 = (*mpND_g0);
        Mfuel = (*mpND_Mfuel);
        Mcargo = (*mpND_Mcargo);
        rho = (*mpND_rho);
        vturbx = (*mpND_vturbx);
        vturby = (*mpND_vturby);
        vturbz = (*mpND_vturbz);
        wturbx = (*mpND_wturbx);
        wturby = (*mpND_wturby);
        wturbz = (*mpND_wturbz);

        //LocalExpressions
        v = Sqrt(0.0001 + Power(Ub + vturbx,2) + Power(Vb + vturby,2) + \
Power(vturbz + Wb,2));
        Alpha = Atan2L(vturbz + Wb,0.0001 + Ub + vturbx);
        qpress = (rho*Power(v,2))/2.;
        Beta = Atan2L(Vb + vturby,Sqrt(0.0001 + Power(Ub + vturbx,2) + \
Power(vturbz + Wb,2)));
        mass = Mcargo + Mfuel + mMe;
        xbcg = (mMe*mxbcge + Mcargo*mxcargo + Mfuel*mxfuel)/mass;
        Dragb = qpress*(mSbh*(mCd0b + mCLalphabh*Cos(Alpha)) + \
mCLalphabv*mSbv*Cos(Beta));
        Mdvtheta = (mCLalphabh*mSbh*qpress*Power(mxbach - xbcg,2))/(0.1 + v);
        Mdvpsi = (mCLalphabv*mSbv*qpress*Power(mxbacv - xbcg,2))/(0.1 + v);
        Fx = -(Dragb*Cos(Alpha)*Cos(Beta)) + \
thrustl*Cos(thetatvcly)*Cos(thetatvclz) + \
thrustr*Cos(thetatvcry)*Cos(thetatvcrz) + \
mCLalphabh*mSbh*qpress*Power(Sin(Alpha),2) - \
mCLalphabv*mSbv*qpress*Cos(Alpha)*Power(Sin(Beta),2);
        Fy = -(Dragb*Sin(Beta)) + mCLalphabv*mSbv*qpress*Cos(Beta)*Sin(Beta) \
- thrustl*Cos(thetatvclz)*Sin(thetatvcly) - \
thrustr*Cos(thetatvcrz)*Sin(thetatvcry);
        Fz = -(mCLalphabh*mSbh*qpress*Cos(Alpha)*Sin(Alpha)) - \
Dragb*Cos(Beta)*Sin(Alpha) - \
mCLalphabv*mSbv*qpress*Sin(Alpha)*Power(Sin(Beta),2) - \
thrustl*Cos(thetatvcly)*Sin(thetatvclz) - \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz);
        Lb = -(Cos(Alpha)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha))*Sin(Beta)) - \
Sin(Alpha)*(-(Mdvpsi*(Rb + wturbz)) + mCLalphabv*mSbv*qpress*(mxbacv - \
xbcg)*Sin(Beta)) + myeng*(thrustl*Cos(thetatvcly)*Sin(thetatvclz) - \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz));
        Mb = Cos(Beta)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha)) + (-mxeng + \
xbcg)*(thrustl*Cos(thetatvcly)*Sin(thetatvclz) + \
thrustr*Cos(thetatvcry)*Sin(thetatvcrz));
        Nb = -(Sin(Alpha)*(-(Mdvtheta*(Qb + wturby)) - \
mCLalphabh*mSbh*qpress*(mxbach - xbcg)*Sin(Alpha))*Sin(Beta)) + \
Cos(Alpha)*(-(Mdvpsi*(Rb + wturbz)) + mCLalphabv*mSbv*qpress*(mxbacv - \
xbcg)*Sin(Beta)) + (-mxeng + xbcg)*(thrustl*Cos(thetatvclz)*Sin(thetatvcly) + \
thrustr*Cos(thetatvcrz)*Sin(thetatvcry));

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = Ub;
        stateVark[1] = Vb;
        stateVark[2] = Wb;
        stateVark[3] = Pb;
        stateVark[4] = Qb;
        stateVark[5] = Rb;
        stateVark[6] = q0;
        stateVark[7] = q1;
        stateVark[8] = q2;
        stateVark[9] = q3;
        stateVark[10] = xcg;
        stateVark[11] = ycg;
        stateVark[12] = zcg;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //VehicleTVC
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =Ub - (mTimestep*(Fx + mass*(-2*g0*q0*q2 + \
2*g0*q1*q3 + Rb*Vb - Qb*Wb) + 2*mkground*(q0*q2 - \
q1*q3)*zcg*onPositive(zcg)))/(2.*mass) + delayedPart[1][1];
          systemEquations[1] =Vb - (mTimestep*(Fy + mass*(2*g0*q0*q1 + \
2*g0*q2*q3 - Rb*Ub + Pb*Wb) - 2*mkground*(q0*q1 + \
q2*q3)*zcg*onPositive(zcg)))/(2.*mass) + delayedPart[2][1];
          systemEquations[2] =Wb - (mTimestep*(Fz + mass*(g0*(Power(q0,2) - \
Power(q1,2) - Power(q2,2) + Power(q3,2)) + Qb*Ub - Pb*Vb) + \
mkground*(-Power(q0,2) + Power(q1,2) + Power(q2,2) - \
Power(q3,2))*zcg*onPositive(zcg)))/(2.*mass) + delayedPart[3][1];
          systemEquations[3] =Pb + (mTimestep*(Lb*mIz + mIxz*Nb - \
Power(mIxz,2)*Qb*Rb + (mIy - mIz)*mIz*Qb*Rb))/(2*Power(mIxz,2) - 2*mIx*mIz + \
mIxz*(mIx - mIy + mIz)*mTimestep*Qb) + delayedPart[4][1];
          systemEquations[4] =Qb - (mTimestep*(Mb + (-mIx + mIz)*Pb*Rb + \
mIxz*(-Power(Pb,2) + Power(Rb,2))))/(2.*mIy) + delayedPart[5][1];
          systemEquations[5] =-((mTimestep*(Lb*mIxz + Power(mIx,2)*Pb*Qb + \
Power(mIxz,2)*Pb*Qb + mIx*(Nb - mIy*Pb*Qb)))/(-2*Power(mIxz,2) + 2*mIx*mIz + \
mIxz*(mIx - mIy + mIz)*mTimestep*Qb)) + Rb + delayedPart[6][1];
          systemEquations[6] =q0 + (mTimestep*(Pb*q1 + q2*Qb + q3*Rb))/4. + \
delayedPart[7][1];
          systemEquations[7] =q1 - (mTimestep*(Pb*q0 - q3*Qb + q2*Rb))/4. + \
delayedPart[8][1];
          systemEquations[8] =q2 - (mTimestep*(Pb*q3 + q0*Qb - q1*Rb))/4. + \
delayedPart[9][1];
          systemEquations[9] =q3 + (mTimestep*(Pb*q2 - q1*Qb - q0*Rb))/4. + \
delayedPart[10][1];
          systemEquations[10] =-(mTimestep*(Power(q0,2)*Ub + Power(q1,2)*Ub - \
(Power(q2,2) + Power(q3,2))*Ub + q0*(-2*q3*Vb + 2*q2*Wb) + 2*q1*(q2*Vb + \
q3*Wb)))/2. + xcg + delayedPart[11][1];
          systemEquations[11] =(mTimestep*(-2*q1*q2*Ub - 2*q0*q3*Ub - \
Power(q0,2)*Vb + Power(q1,2)*Vb - Power(q2,2)*Vb + Power(q3,2)*Vb + \
2*q0*q1*Wb - 2*q2*q3*Wb))/2. + ycg + delayedPart[12][1];
          systemEquations[12] =-(mTimestep*(-2*q0*q2*Ub + 2*q1*q3*Ub + \
2*q0*q1*Vb + 2*q2*q3*Vb + Power(q0,2)*Wb - Power(q1,2)*Wb - Power(q2,2)*Wb + \
Power(q3,2)*Wb))/2. + zcg + delayedPart[13][1];

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = -(mTimestep*Rb)/2.;
          jacobianMatrix[0][2] = (mTimestep*Qb)/2.;
          jacobianMatrix[0][3] = 0;
          jacobianMatrix[0][4] = (mTimestep*Wb)/2.;
          jacobianMatrix[0][5] = -(mTimestep*Vb)/2.;
          jacobianMatrix[0][6] = -(mTimestep*(-2*g0*mass*q2 + \
2*mkground*q2*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[0][7] = -(mTimestep*(2*g0*mass*q3 - \
2*mkground*q3*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[0][8] = -(mTimestep*(-2*g0*mass*q0 + \
2*mkground*q0*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[0][9] = -(mTimestep*(2*g0*mass*q1 - \
2*mkground*q1*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[0][10] = 0;
          jacobianMatrix[0][11] = 0;
          jacobianMatrix[0][12] = -((mkground*mTimestep*(q0*q2 - \
q1*q3)*onPositive(zcg))/mass);
          jacobianMatrix[1][0] = (mTimestep*Rb)/2.;
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = -(mTimestep*Pb)/2.;
          jacobianMatrix[1][3] = -(mTimestep*Wb)/2.;
          jacobianMatrix[1][4] = 0;
          jacobianMatrix[1][5] = (mTimestep*Ub)/2.;
          jacobianMatrix[1][6] = -(mTimestep*(2*g0*mass*q1 - \
2*mkground*q1*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[1][7] = -(mTimestep*(2*g0*mass*q0 - \
2*mkground*q0*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[1][8] = -(mTimestep*(2*g0*mass*q3 - \
2*mkground*q3*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[1][9] = -(mTimestep*(2*g0*mass*q2 - \
2*mkground*q2*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[1][10] = 0;
          jacobianMatrix[1][11] = 0;
          jacobianMatrix[1][12] = (mkground*mTimestep*(q0*q1 + \
q2*q3)*onPositive(zcg))/mass;
          jacobianMatrix[2][0] = -(mTimestep*Qb)/2.;
          jacobianMatrix[2][1] = (mTimestep*Pb)/2.;
          jacobianMatrix[2][2] = 1;
          jacobianMatrix[2][3] = (mTimestep*Vb)/2.;
          jacobianMatrix[2][4] = -(mTimestep*Ub)/2.;
          jacobianMatrix[2][5] = 0;
          jacobianMatrix[2][6] = -(mTimestep*(2*g0*mass*q0 - \
2*mkground*q0*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[2][7] = -(mTimestep*(-2*g0*mass*q1 + \
2*mkground*q1*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[2][8] = -(mTimestep*(-2*g0*mass*q2 + \
2*mkground*q2*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[2][9] = -(mTimestep*(2*g0*mass*q3 - \
2*mkground*q3*zcg*onPositive(zcg)))/(2.*mass);
          jacobianMatrix[2][10] = 0;
          jacobianMatrix[2][11] = 0;
          jacobianMatrix[2][12] = -(mkground*mTimestep*(-Power(q0,2) + \
Power(q1,2) + Power(q2,2) - Power(q3,2))*onPositive(zcg))/(2.*mass);
          jacobianMatrix[3][0] = 0;
          jacobianMatrix[3][1] = 0;
          jacobianMatrix[3][2] = 0;
          jacobianMatrix[3][3] = 1;
          jacobianMatrix[3][4] = (mTimestep*(-(Power(mIxz,2)*Rb) + (mIy - \
mIz)*mIz*Rb))/(2*Power(mIxz,2) - 2*mIx*mIz + mIxz*(mIx - mIy + \
mIz)*mTimestep*Qb) - (mIxz*(mIx - mIy + mIz)*Power(mTimestep,2)*(Lb*mIz + \
mIxz*Nb - Power(mIxz,2)*Qb*Rb + (mIy - mIz)*mIz*Qb*Rb))/Power(2*Power(mIxz,2) \
- 2*mIx*mIz + mIxz*(mIx - mIy + mIz)*mTimestep*Qb,2);
          jacobianMatrix[3][5] = (mTimestep*(-(Power(mIxz,2)*Qb) + (mIy - \
mIz)*mIz*Qb))/(2*Power(mIxz,2) - 2*mIx*mIz + mIxz*(mIx - mIy + \
mIz)*mTimestep*Qb);
          jacobianMatrix[3][6] = 0;
          jacobianMatrix[3][7] = 0;
          jacobianMatrix[3][8] = 0;
          jacobianMatrix[3][9] = 0;
          jacobianMatrix[3][10] = 0;
          jacobianMatrix[3][11] = 0;
          jacobianMatrix[3][12] = 0;
          jacobianMatrix[4][0] = 0;
          jacobianMatrix[4][1] = 0;
          jacobianMatrix[4][2] = 0;
          jacobianMatrix[4][3] = -(mTimestep*(-2*mIxz*Pb + (-mIx + \
mIz)*Rb))/(2.*mIy);
          jacobianMatrix[4][4] = 1;
          jacobianMatrix[4][5] = -(mTimestep*((-mIx + mIz)*Pb + \
2*mIxz*Rb))/(2.*mIy);
          jacobianMatrix[4][6] = 0;
          jacobianMatrix[4][7] = 0;
          jacobianMatrix[4][8] = 0;
          jacobianMatrix[4][9] = 0;
          jacobianMatrix[4][10] = 0;
          jacobianMatrix[4][11] = 0;
          jacobianMatrix[4][12] = 0;
          jacobianMatrix[5][0] = 0;
          jacobianMatrix[5][1] = 0;
          jacobianMatrix[5][2] = 0;
          jacobianMatrix[5][3] = -((mTimestep*(Power(mIx,2)*Qb + \
Power(mIxz,2)*Qb - mIx*mIy*Qb))/(-2*Power(mIxz,2) + 2*mIx*mIz + mIxz*(mIx - \
mIy + mIz)*mTimestep*Qb));
          jacobianMatrix[5][4] = -((mTimestep*(Power(mIx,2)*Pb + \
Power(mIxz,2)*Pb - mIx*mIy*Pb))/(-2*Power(mIxz,2) + 2*mIx*mIz + mIxz*(mIx - \
mIy + mIz)*mTimestep*Qb)) + (mIxz*(mIx - mIy + \
mIz)*Power(mTimestep,2)*(Lb*mIxz + Power(mIx,2)*Pb*Qb + Power(mIxz,2)*Pb*Qb + \
mIx*(Nb - mIy*Pb*Qb)))/Power(-2*Power(mIxz,2) + 2*mIx*mIz + mIxz*(mIx - mIy + \
mIz)*mTimestep*Qb,2);
          jacobianMatrix[5][5] = 1;
          jacobianMatrix[5][6] = 0;
          jacobianMatrix[5][7] = 0;
          jacobianMatrix[5][8] = 0;
          jacobianMatrix[5][9] = 0;
          jacobianMatrix[5][10] = 0;
          jacobianMatrix[5][11] = 0;
          jacobianMatrix[5][12] = 0;
          jacobianMatrix[6][0] = 0;
          jacobianMatrix[6][1] = 0;
          jacobianMatrix[6][2] = 0;
          jacobianMatrix[6][3] = (mTimestep*q1)/4.;
          jacobianMatrix[6][4] = (mTimestep*q2)/4.;
          jacobianMatrix[6][5] = (mTimestep*q3)/4.;
          jacobianMatrix[6][6] = 1;
          jacobianMatrix[6][7] = (mTimestep*Pb)/4.;
          jacobianMatrix[6][8] = (mTimestep*Qb)/4.;
          jacobianMatrix[6][9] = (mTimestep*Rb)/4.;
          jacobianMatrix[6][10] = 0;
          jacobianMatrix[6][11] = 0;
          jacobianMatrix[6][12] = 0;
          jacobianMatrix[7][0] = 0;
          jacobianMatrix[7][1] = 0;
          jacobianMatrix[7][2] = 0;
          jacobianMatrix[7][3] = -(mTimestep*q0)/4.;
          jacobianMatrix[7][4] = (mTimestep*q3)/4.;
          jacobianMatrix[7][5] = -(mTimestep*q2)/4.;
          jacobianMatrix[7][6] = -(mTimestep*Pb)/4.;
          jacobianMatrix[7][7] = 1;
          jacobianMatrix[7][8] = -(mTimestep*Rb)/4.;
          jacobianMatrix[7][9] = (mTimestep*Qb)/4.;
          jacobianMatrix[7][10] = 0;
          jacobianMatrix[7][11] = 0;
          jacobianMatrix[7][12] = 0;
          jacobianMatrix[8][0] = 0;
          jacobianMatrix[8][1] = 0;
          jacobianMatrix[8][2] = 0;
          jacobianMatrix[8][3] = -(mTimestep*q3)/4.;
          jacobianMatrix[8][4] = -(mTimestep*q0)/4.;
          jacobianMatrix[8][5] = (mTimestep*q1)/4.;
          jacobianMatrix[8][6] = -(mTimestep*Qb)/4.;
          jacobianMatrix[8][7] = (mTimestep*Rb)/4.;
          jacobianMatrix[8][8] = 1;
          jacobianMatrix[8][9] = -(mTimestep*Pb)/4.;
          jacobianMatrix[8][10] = 0;
          jacobianMatrix[8][11] = 0;
          jacobianMatrix[8][12] = 0;
          jacobianMatrix[9][0] = 0;
          jacobianMatrix[9][1] = 0;
          jacobianMatrix[9][2] = 0;
          jacobianMatrix[9][3] = (mTimestep*q2)/4.;
          jacobianMatrix[9][4] = -(mTimestep*q1)/4.;
          jacobianMatrix[9][5] = -(mTimestep*q0)/4.;
          jacobianMatrix[9][6] = -(mTimestep*Rb)/4.;
          jacobianMatrix[9][7] = -(mTimestep*Qb)/4.;
          jacobianMatrix[9][8] = (mTimestep*Pb)/4.;
          jacobianMatrix[9][9] = 1;
          jacobianMatrix[9][10] = 0;
          jacobianMatrix[9][11] = 0;
          jacobianMatrix[9][12] = 0;
          jacobianMatrix[10][0] = -(mTimestep*(Power(q0,2) + Power(q1,2) - \
Power(q2,2) - Power(q3,2)))/2.;
          jacobianMatrix[10][1] = -(mTimestep*(2*q1*q2 - 2*q0*q3))/2.;
          jacobianMatrix[10][2] = -(mTimestep*(2*q0*q2 + 2*q1*q3))/2.;
          jacobianMatrix[10][3] = 0;
          jacobianMatrix[10][4] = 0;
          jacobianMatrix[10][5] = 0;
          jacobianMatrix[10][6] = -(mTimestep*(2*q0*Ub - 2*q3*Vb + \
2*q2*Wb))/2.;
          jacobianMatrix[10][7] = -(mTimestep*(2*q1*Ub + 2*(q2*Vb + \
q3*Wb)))/2.;
          jacobianMatrix[10][8] = -(mTimestep*(-2*q2*Ub + 2*q1*Vb + \
2*q0*Wb))/2.;
          jacobianMatrix[10][9] = -(mTimestep*(-2*q3*Ub - 2*q0*Vb + \
2*q1*Wb))/2.;
          jacobianMatrix[10][10] = 1;
          jacobianMatrix[10][11] = 0;
          jacobianMatrix[10][12] = 0;
          jacobianMatrix[11][0] = (mTimestep*(-2*q1*q2 - 2*q0*q3))/2.;
          jacobianMatrix[11][1] = (mTimestep*(-Power(q0,2) + Power(q1,2) - \
Power(q2,2) + Power(q3,2)))/2.;
          jacobianMatrix[11][2] = (mTimestep*(2*q0*q1 - 2*q2*q3))/2.;
          jacobianMatrix[11][3] = 0;
          jacobianMatrix[11][4] = 0;
          jacobianMatrix[11][5] = 0;
          jacobianMatrix[11][6] = (mTimestep*(-2*q3*Ub - 2*q0*Vb + \
2*q1*Wb))/2.;
          jacobianMatrix[11][7] = (mTimestep*(-2*q2*Ub + 2*q1*Vb + \
2*q0*Wb))/2.;
          jacobianMatrix[11][8] = (mTimestep*(-2*q1*Ub - 2*q2*Vb - \
2*q3*Wb))/2.;
          jacobianMatrix[11][9] = (mTimestep*(-2*q0*Ub + 2*q3*Vb - \
2*q2*Wb))/2.;
          jacobianMatrix[11][10] = 0;
          jacobianMatrix[11][11] = 1;
          jacobianMatrix[11][12] = 0;
          jacobianMatrix[12][0] = -(mTimestep*(-2*q0*q2 + 2*q1*q3))/2.;
          jacobianMatrix[12][1] = -(mTimestep*(2*q0*q1 + 2*q2*q3))/2.;
          jacobianMatrix[12][2] = -(mTimestep*(Power(q0,2) - Power(q1,2) - \
Power(q2,2) + Power(q3,2)))/2.;
          jacobianMatrix[12][3] = 0;
          jacobianMatrix[12][4] = 0;
          jacobianMatrix[12][5] = 0;
          jacobianMatrix[12][6] = -(mTimestep*(-2*q2*Ub + 2*q1*Vb + \
2*q0*Wb))/2.;
          jacobianMatrix[12][7] = -(mTimestep*(2*q3*Ub + 2*q0*Vb - \
2*q1*Wb))/2.;
          jacobianMatrix[12][8] = -(mTimestep*(-2*q0*Ub + 2*q3*Vb - \
2*q2*Wb))/2.;
          jacobianMatrix[12][9] = -(mTimestep*(2*q1*Ub + 2*q2*Vb + \
2*q3*Wb))/2.;
          jacobianMatrix[12][10] = 0;
          jacobianMatrix[12][11] = 0;
          jacobianMatrix[12][12] = 1;

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          Ub=stateVark[0];
          Vb=stateVark[1];
          Wb=stateVark[2];
          Pb=stateVark[3];
          Qb=stateVark[4];
          Rb=stateVark[5];
          q0=stateVark[6];
          q1=stateVark[7];
          q2=stateVark[8];
          q3=stateVark[9];
          xcg=stateVark[10];
          ycg=stateVark[11];
          zcg=stateVark[12];
          //Expressions
          vx = (Power(q0,2) + Power(q1,2) - Power(q2,2) - Power(q3,2))*Ub + \
2*(q1*q2 - q0*q3)*Vb + 2*(q0*q2 + q1*q3)*Wb;
          vy = 2*(q1*q2 + q0*q3)*Ub + (Power(q0,2) - Power(q1,2) + \
Power(q2,2) - Power(q3,2))*Vb + 2*(-(q0*q1) + q2*q3)*Wb;
          vz = 2*(-(q0*q2) + q1*q3)*Ub + 2*(q0*q1 + q2*q3)*Vb + (Power(q0,2) \
- Power(q1,2) - Power(q2,2) + Power(q3,2))*Wb;
          AlphaAttack = Alpha;
          BetaSlip = Beta;
          altitude = -zcg;
          Phi = Atan2L(2*(q0*q1 + q2*q3),Power(q0,2) - Power(q1,2) - \
Power(q2,2) + Power(q3,2));
          Thetao = ArcSinL(2*(q0*q2 - q1*q3));
          Psi = Atan2L(2*(q1*q2 + q0*q3),Power(q0,2) + Power(q1,2) - \
Power(q2,2) - Power(q3,2));
          gfx = Fx/mass;
          gfy = Fy/mass;
          gfz = Fz/mass;
          Faz = -1;
          Fax = -1;
          Zxtvcly = mCtvc*mTimestep*thrustl;
          Zxtvclz = mCtvc*mTimestep*thrustl;
          Zxtvcry = mCtvc*mTimestep*thrustl;
          Zxtvcrz = mCtvc*mTimestep*thrustl;
        }

        //Calculate the delayed parts
        delayParts1[1] = (-(Fx*mTimestep) + 2*g0*mass*mTimestep*q0*q2 - \
2*g0*mass*mTimestep*q1*q3 - 2*mass*Ub - mass*mTimestep*Rb*Vb + \
mass*mTimestep*Qb*Wb - 2*mkground*mTimestep*q0*q2*zcg*onPositive(zcg) + \
2*mkground*mTimestep*q1*q3*zcg*onPositive(zcg))/(2.*mass);
        delayParts2[1] = (-(Fy*mTimestep) - 2*g0*mass*mTimestep*q0*q1 - \
2*g0*mass*mTimestep*q2*q3 + mass*mTimestep*Rb*Ub - 2*mass*Vb - \
mass*mTimestep*Pb*Wb + 2*mkground*mTimestep*q0*q1*zcg*onPositive(zcg) + \
2*mkground*mTimestep*q2*q3*zcg*onPositive(zcg))/(2.*mass);
        delayParts3[1] = (-(Fz*mTimestep) - g0*mass*mTimestep*Power(q0,2) + \
g0*mass*mTimestep*Power(q1,2) + g0*mass*mTimestep*Power(q2,2) - \
g0*mass*mTimestep*Power(q3,2) - mass*mTimestep*Qb*Ub + mass*mTimestep*Pb*Vb - \
2*mass*Wb + mkground*mTimestep*Power(q0,2)*zcg*onPositive(zcg) - \
mkground*mTimestep*Power(q1,2)*zcg*onPositive(zcg) - \
mkground*mTimestep*Power(q2,2)*zcg*onPositive(zcg) + \
mkground*mTimestep*Power(q3,2)*zcg*onPositive(zcg))/(2.*mass);
        delayParts4[1] = (Lb*mIz*mTimestep + mIxz*mTimestep*Nb - \
2*Power(mIxz,2)*Pb + 2*mIx*mIz*Pb + mIx*mIxz*mTimestep*Pb*Qb - \
mIxz*mIy*mTimestep*Pb*Qb + mIxz*mIz*mTimestep*Pb*Qb - \
Power(mIxz,2)*mTimestep*Qb*Rb + mIy*mIz*mTimestep*Qb*Rb - \
Power(mIz,2)*mTimestep*Qb*Rb)/(2*Power(mIxz,2) - 2*mIx*mIz + \
mIx*mIxz*mTimestep*Qb - mIxz*mIy*mTimestep*Qb + mIxz*mIz*mTimestep*Qb);
        delayParts5[1] = (-(Mb*mTimestep) + mIxz*mTimestep*Power(Pb,2) - \
2*mIy*Qb + mIx*mTimestep*Pb*Rb - mIz*mTimestep*Pb*Rb - \
mIxz*mTimestep*Power(Rb,2))/(2.*mIy);
        delayParts6[1] = (Lb*mIxz*mTimestep + mIx*mTimestep*Nb + \
Power(mIx,2)*mTimestep*Pb*Qb + Power(mIxz,2)*mTimestep*Pb*Qb - \
mIx*mIy*mTimestep*Pb*Qb - 2*Power(mIxz,2)*Rb + 2*mIx*mIz*Rb - \
mIx*mIxz*mTimestep*Qb*Rb + mIxz*mIy*mTimestep*Qb*Rb - \
mIxz*mIz*mTimestep*Qb*Rb)/(2*Power(mIxz,2) - 2*mIx*mIz - \
mIx*mIxz*mTimestep*Qb + mIxz*mIy*mTimestep*Qb - mIxz*mIz*mTimestep*Qb);
        delayParts7[1] = (-4*q0 + mTimestep*Pb*q1 + mTimestep*q2*Qb + \
mTimestep*q3*Rb)/4.;
        delayParts8[1] = (-(mTimestep*Pb*q0) - 4*q1 + mTimestep*q3*Qb - \
mTimestep*q2*Rb)/4.;
        delayParts9[1] = (-4*q2 - mTimestep*Pb*q3 - mTimestep*q0*Qb + \
mTimestep*q1*Rb)/4.;
        delayParts10[1] = (mTimestep*Pb*q2 - 4*q3 - mTimestep*q1*Qb - \
mTimestep*q0*Rb)/4.;
        delayParts11[1] = (-(mTimestep*Power(q0,2)*Ub) - \
mTimestep*Power(q1,2)*Ub + mTimestep*Power(q2,2)*Ub + \
mTimestep*Power(q3,2)*Ub - 2*mTimestep*q1*q2*Vb + 2*mTimestep*q0*q3*Vb - \
2*mTimestep*q0*q2*Wb - 2*mTimestep*q1*q3*Wb - 2*xcg)/2.;
        delayParts12[1] = (-2*mTimestep*q1*q2*Ub - 2*mTimestep*q0*q3*Ub - \
mTimestep*Power(q0,2)*Vb + mTimestep*Power(q1,2)*Vb - \
mTimestep*Power(q2,2)*Vb + mTimestep*Power(q3,2)*Vb + 2*mTimestep*q0*q1*Wb - \
2*mTimestep*q2*q3*Wb - 2*ycg)/2.;
        delayParts13[1] = (2*mTimestep*q0*q2*Ub - 2*mTimestep*q1*q3*Ub - \
2*mTimestep*q0*q1*Vb - 2*mTimestep*q2*q3*Vb - mTimestep*Power(q0,2)*Wb + \
mTimestep*Power(q1,2)*Wb + mTimestep*Power(q2,2)*Wb - \
mTimestep*Power(q3,2)*Wb - 2*zcg)/2.;

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
        delayedPart[8][1] = delayParts8[1];
        delayedPart[9][1] = delayParts9[1];
        delayedPart[10][1] = delayParts10[1];
        delayedPart[11][1] = delayParts11[1];
        delayedPart[12][1] = delayParts12[1];
        delayedPart[13][1] = delayParts13[1];

        //Write new values to nodes
        //Port Ptvcly
        (*mpND_ctvcly)=ctvcly;
        (*mpND_Zctvcly)=Zctvcly;
        //Port Ptvclz
        (*mpND_ctvclz)=ctvclz;
        (*mpND_Zctvclz)=Zctvclz;
        //Port Ptvcry
        (*mpND_ctvcry)=ctvcry;
        (*mpND_Zctvcry)=Zctvcry;
        //Port Ptvcrz
        (*mpND_ctvcrz)=ctvcrz;
        (*mpND_Zctvcrz)=Zctvcrz;
        //outputVariables
        (*mpND_xcg)=xcg;
        (*mpND_ycg)=ycg;
        (*mpND_zcg)=zcg;
        (*mpND_vx)=vx;
        (*mpND_vy)=vy;
        (*mpND_vz)=vz;
        (*mpND_Psi)=Psi;
        (*mpND_Thetao)=Thetao;
        (*mpND_Phi)=Phi;
        (*mpND_Ub)=Ub;
        (*mpND_Vb)=Vb;
        (*mpND_Wb)=Wb;
        (*mpND_Pb)=Pb;
        (*mpND_Qb)=Qb;
        (*mpND_Rb)=Rb;
        (*mpND_q0)=q0;
        (*mpND_q1)=q1;
        (*mpND_q2)=q2;
        (*mpND_q3)=q3;
        (*mpND_AlphaAttack)=AlphaAttack;
        (*mpND_BetaSlip)=BetaSlip;
        (*mpND_altitude)=altitude;
        (*mpND_gfx)=gfx;
        (*mpND_gfy)=gfy;
        (*mpND_gfz)=gfz;
        (*mpND_CL1)=CL1;
        (*mpND_Cd1)=Cd1;
        (*mpND_Fax)=Fax;
        (*mpND_Faz)=Faz;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);
        mDelayedPart21.update(delayParts2[1]);
        mDelayedPart31.update(delayParts3[1]);
        mDelayedPart41.update(delayParts4[1]);
        mDelayedPart51.update(delayParts5[1]);
        mDelayedPart61.update(delayParts6[1]);
        mDelayedPart71.update(delayParts7[1]);
        mDelayedPart81.update(delayParts8[1]);
        mDelayedPart91.update(delayParts9[1]);
        mDelayedPart101.update(delayParts10[1]);
        mDelayedPart111.update(delayParts11[1]);
        mDelayedPart121.update(delayParts12[1]);
        mDelayedPart131.update(delayParts13[1]);

     }
};
#endif // AEROVEHICLETVC_HPP_INCLUDED
