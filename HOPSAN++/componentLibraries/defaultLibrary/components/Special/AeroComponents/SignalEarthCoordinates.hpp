#ifndef SIGNALEARTHCOORDINATES_HPP_INCLUDED
#define SIGNALEARTHCOORDINATES_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file SignalEarthCoordinates.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Thu 23 Aug 2012 15:02:08
//! @brief Calculates earth coordinates
//! @ingroup SignalComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/SignalControlAeroNG.nb*/

using namespace hopsan;

class SignalEarthCoordinates : public ComponentSignal
{
private:
     double mR;
     double mtimecomp;
     double mvxcg;
     double mvycg;
     Port *mpPtimecomp;
     Port *mpPvxcg;
     Port *mpPvycg;
     Port *mpPtimeE;
     Port *mpPlongitude;
     Port *mpPlattitude;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[3];
     int mNstep;
     //inputVariables
     double timecomp;
     double vxcg;
     double vycg;
     //outputVariables
     double timeE;
     double longitude;
     double lattitude;
     //Delay declarations
     //inputVariables pointers
     double *mpND_timecomp;
     double *mpND_vxcg;
     double *mpND_vycg;
     //outputVariables pointers
     double *mpND_timeE;
     double *mpND_longitude;
     double *mpND_lattitude;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart20;
     Delay mDelayedPart21;
     Delay mDelayedPart30;
     Delay mDelayedPart31;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalEarthCoordinates();
     }

     void configure()
     {
        const double R = 6.3675e6;
        const double timecomp = 1.;
        const double vxcg = 0.;
        const double vycg = 0.;

        mNstep=9;
        jacobianMatrix.create(3,3);
        systemEquations.create(3);
        delayedPart.create(4,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mR = R;
        mtimecomp = timecomp;
        mvxcg = vxcg;
        mvycg = vycg;

        //Add ports to the component

        //Add inputVariables ports to the component
        mpPtimecomp=addReadPort("Ptimecomp","NodeSignal", Port::NOTREQUIRED);
        mpPvxcg=addReadPort("Pvxcg","NodeSignal", Port::NOTREQUIRED);
        mpPvycg=addReadPort("Pvycg","NodeSignal", Port::NOTREQUIRED);

        //Add outputVariables ports to the component
        mpPtimeE=addWritePort("PtimeE","NodeSignal", Port::NOTREQUIRED);
        mpPlongitude=addWritePort("Plongitude","NodeSignal", \
Port::NOTREQUIRED);
        mpPlattitude=addWritePort("Plattitude","NodeSignal", \
Port::NOTREQUIRED);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("R", "Earth radius", "m", mR);
        registerParameter("timecomp", "time compression rate", "", \
mtimecomp);
        registerParameter("vxcg", "eastward speed", "m/s", mvxcg);
        registerParameter("vycg", "northward speed", "m/s", mvycg);
        mpSolver = new EquationSystemSolver(this,3);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Read inputVariables pointers from nodes
        mpND_timecomp=getSafeNodeDataPtr(mpPtimecomp, \
NodeSignal::VALUE,mtimecomp);
        mpND_vxcg=getSafeNodeDataPtr(mpPvxcg, NodeSignal::VALUE,mvxcg);
        mpND_vycg=getSafeNodeDataPtr(mpPvycg, NodeSignal::VALUE,mvycg);
        //Read outputVariable pointers from nodes
        mpND_timeE=getSafeNodeDataPtr(mpPtimeE, NodeSignal::VALUE);
        mpND_longitude=getSafeNodeDataPtr(mpPlongitude, NodeSignal::VALUE);
        mpND_lattitude=getSafeNodeDataPtr(mpPlattitude, NodeSignal::VALUE);

        //Read variables from nodes

        //Read inputVariables from nodes
        timecomp = (*mpND_timecomp);
        vxcg = (*mpND_vxcg);
        vycg = (*mpND_vycg);

        //Read outputVariables from nodes
        timeE = mpPtimeE->getStartValue(NodeSignal::VALUE);
        longitude = mpPlongitude->getStartValue(NodeSignal::VALUE);
        lattitude = mpPlattitude->getStartValue(NodeSignal::VALUE);



        //Initialize delays
        delayParts1[1] = (0.5*(-2.*lattitude*mR - \
57.2958*mTimestep*timecomp*vycg))/mR;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);
        delayParts2[1] = (0.5*(-2.*longitude*mR - \
57.2958*mTimestep*timecomp*vxcg*Sec(0.0174533*lattitude)))/mR;
        mDelayedPart21.initialize(mNstep,delayParts2[1]);
        delayParts3[1] = (-(mTimestep*timecomp) - 2*timeE)/2.;
        mDelayedPart31.initialize(mNstep,delayParts3[1]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(3);
        Vec stateVark(3);
        Vec deltaStateVar(3);

        //Read variables from nodes

        //Read inputVariables from nodes
        timecomp = (*mpND_timecomp);
        vxcg = (*mpND_vxcg);
        vycg = (*mpND_vycg);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = lattitude;
        stateVark[1] = longitude;
        stateVark[2] = timeE;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //EarthCoordinates
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =lattitude - \
(28.6479*mTimestep*timecomp*vycg)/mR + delayedPart[1][1];
          systemEquations[1] =longitude + delayedPart[2][1] - \
(28.6479*mTimestep*timecomp*vxcg*Sec(0.0174533*lattitude))/mR;
          systemEquations[2] =-(mTimestep*timecomp)/2. + timeE + \
delayedPart[3][1];

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = 0;
          jacobianMatrix[1][0] = \
(-0.5*mTimestep*timecomp*vxcg*Sec(0.0174533*lattitude)*Tan(0.0174533*lattitud\
e))/mR;
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = 0;
          jacobianMatrix[2][0] = 0;
          jacobianMatrix[2][1] = 0;
          jacobianMatrix[2][2] = 1;

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          lattitude=stateVark[0];
          longitude=stateVark[1];
          timeE=stateVark[2];
        }

        //Calculate the delayed parts
        delayParts1[1] = (0.5*(-2.*lattitude*mR - \
57.2958*mTimestep*timecomp*vycg))/mR;
        delayParts2[1] = (0.5*(-2.*longitude*mR - \
57.2958*mTimestep*timecomp*vxcg*Sec(0.0174533*lattitude)))/mR;
        delayParts3[1] = (-(mTimestep*timecomp) - 2*timeE)/2.;

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];

        //Write new values to nodes
        //outputVariables
        (*mpND_timeE)=timeE;
        (*mpND_longitude)=longitude;
        (*mpND_lattitude)=lattitude;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);
        mDelayedPart21.update(delayParts2[1]);
        mDelayedPart31.update(delayParts3[1]);

     }
};
#endif // SIGNALEARTHCOORDINATES_HPP_INCLUDED
