#ifndef ELECTRICISOURCE_HPP_INCLUDED
#define ELECTRICISOURCE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file ElectricIsource.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Tue 31 Jan 2012 15:03:08
//! @brief Source of electric current
//! @ingroup ElectricComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/ElectricNG.nb*/

using namespace hopsan;

class ElectricIsource : public ComponentQ
{
private:
     double miin;
     Port *mpPel1;
     Port *mpPiin;
     int mNstep;
     //Port Pel1 variable
     double uel1;
     double iel1;
     double cel1;
     double Zcel1;
     //inputVariables
     double iin;
     //outputVariables

     //Expressions variables
     //Port Pel1 pointer
     double *mpND_uel1;
     double *mpND_iel1;
     double *mpND_cel1;
     double *mpND_Zcel1;
     //Delay declarations
     //inputVariables pointers
     double *mpND_iin;
     //outputVariables pointers

public:
     static Component *Creator()
     {
        return new ElectricIsource();
     }

     void configure()
     {
        const double iin = 10.;

        mNstep=9;
        miin = iin;

        //Add ports to the component
        mpPel1=addPowerPort("Pel1","NodeElectric");

        //Add inputVariables ports to the component
        mpPiin=addReadPort("Piin","NodeSignal", Port::NOTREQUIRED);

        //Add outputVariables ports to the component

        //Register changable parameters to the HOPSAN++ core
        registerParameter("iin", "Current", "A", miin);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Pel1
        mpND_uel1=getSafeNodeDataPtr(mpPel1, NodeElectric::VOLTAGE);
        mpND_iel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CURRENT);
        mpND_cel1=getSafeNodeDataPtr(mpPel1, NodeElectric::WAVEVARIABLE);
        mpND_Zcel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CHARIMP);
        //Read inputVariables pointers from nodes
        mpND_iin=getSafeNodeDataPtr(mpPiin, NodeSignal::VALUE,miin);
        //Read outputVariable pointers from nodes

        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);

        //Read inputVariables from nodes
        iin = (*mpND_iin);

        //Read outputVariables from nodes



        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);

        //Read inputVariables from nodes
        iin = (*mpND_iin);

        //LocalExpressions

          //Expressions
          iel1 = iin;
          uel1 = cel1 + iel1*Zcel1;

        //Calculate the delayed parts


        //Write new values to nodes
        //Port Pel1
        (*mpND_cel1)=cel1;
        (*mpND_Zcel1)=Zcel1;
        //outputVariables

        //Update the delayed variabels

     }
};
#endif // ELECTRICISOURCE_HPP_INCLUDED
