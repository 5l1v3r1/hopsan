#ifndef SIGNALPILEAD_HPP_INCLUDED
#define SIGNALPILEAD_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file SignalPIlead.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 13 May 2013 18:15:06
//! @brief PI-controler with lead filter in feadback path
//! @ingroup SignalComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/SignalControlComponents.nb*/

using namespace hopsan;

class SignalPIlead : public ComponentSignal
{
private:
     double wa;
     double da;
     double umin;
     double umax;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double yref;
     double kx;
     double y;
     //outputVariables
     double u;
     //LocalExpressions variables
     double k1;
     double w11;
     double w21;
     double w22;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpyref;
     double *mpkx;
     double *mpy;
     //outputVariables pointers
     double *mpu;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart12;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalPIlead();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("yref","Reference value","",0.,&mpyref);
            addInputVariable("kx","Break frequency","rad/s",1.,&mpkx);
            addInputVariable("y","Actual value","",0.,&mpy);

        //Add outputVariables to the component
            addOutputVariable("u","control signal","",0.,&mpu);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("wa", "Break frequency", "rad/s", 1.,wa);
            addConstant("da", "relative damping", "", 1.,da);
            addConstant("umin", "Minium output signal", "", -1.,umin);
            addConstant("umax", "Maximum output signal", "", 1.,umax);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        yref = (*mpyref);
        kx = (*mpkx);
        y = (*mpy);

        //Read outputVariables from nodes
        u = (*mpu);

//==This code has been autogenerated using Compgen==

        //LocalExpressions
        k1 = wa/kx;
        w11 = wa;
        w21 = wa/(2.*da);
        w22 = wa;

        //Initialize delays
        delayParts1[1] = (-8*u*w21 - 8*k1*w22*y + \
2*k1*Power(mTimestep,2)*w11*w21*w22*y + 8*k1*w21*yref - \
2*k1*Power(mTimestep,2)*w11*w21*w22*yref)/(4*w21 + 2*mTimestep*w21*w22);
        mDelayedPart11.initialize(mNstep,delayParts1[1]);
        delayParts1[2] = (4*u*w21 - 2*mTimestep*u*w21*w22 + 4*k1*w22*y - \
2*k1*mTimestep*w11*w22*y - 2*k1*mTimestep*w21*w22*y + \
k1*Power(mTimestep,2)*w11*w21*w22*y - 4*k1*w21*yref + \
2*k1*mTimestep*w11*w21*yref + 2*k1*mTimestep*w21*w22*yref - \
k1*Power(mTimestep,2)*w11*w21*w22*yref)/(4*w21 + 2*mTimestep*w21*w22);
        mDelayedPart12.initialize(mNstep,delayParts1[2]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[1][2] = mDelayedPart12.getIdx(1);
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes

        //Read inputVariables from nodes
        yref = (*mpyref);
        kx = (*mpkx);
        y = (*mpy);

        //LocalExpressions
        k1 = wa/kx;
        w11 = wa;
        w21 = wa/(2.*da);
        w22 = wa;

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = u;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //PIlead
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =u - limit(-(k1*(2 + mTimestep*w11)*(-2*w21*yref \
+ w22*((2 + mTimestep*w21)*y - mTimestep*w21*yref)))/(2.*w21*(2 + \
mTimestep*w22)) - delayedPart[1][1] - delayedPart[1][2],umin,umax);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          u=stateVark[0];
        }

        //Calculate the delayed parts
        delayParts1[1] = (-8*u*w21 - 8*k1*w22*y + \
2*k1*Power(mTimestep,2)*w11*w21*w22*y + 8*k1*w21*yref - \
2*k1*Power(mTimestep,2)*w11*w21*w22*yref)/(4*w21 + 2*mTimestep*w21*w22);
        delayParts1[2] = (4*u*w21 - 2*mTimestep*u*w21*w22 + 4*k1*w22*y - \
2*k1*mTimestep*w11*w22*y - 2*k1*mTimestep*w21*w22*y + \
k1*Power(mTimestep,2)*w11*w21*w22*y - 4*k1*w21*yref + \
2*k1*mTimestep*w11*w21*yref + 2*k1*mTimestep*w21*w22*yref - \
k1*Power(mTimestep,2)*w11*w21*w22*yref)/(4*w21 + 2*mTimestep*w21*w22);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[1][2] = mDelayedPart12.getIdx(0);

        //Write new values to nodes
        //outputVariables
        (*mpu)=u;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);
        mDelayedPart12.update(delayParts1[2]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // SIGNALPILEAD_HPP_INCLUDED
