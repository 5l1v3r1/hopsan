#ifndef SIGNALPID_HPP_INCLUDED
#define SIGNALPID_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file \
C:\HopsanTrunk\HOPSAN++\componentLibraries\defaultLibrary\Signal\Control\Sign\
alPID.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 6 May 2013 22:14:27
//! @brief PID controller
//! @ingroup SignalComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/SignalControlComponents.nb*/

using namespace hopsan;

class SignalPID : public ComponentSignal
{
private:
     double umin;
     double umax;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double yref;
     double y;
     double dy;
     double Kp;
     double KI;
     double Kd;
     //outputVariables
     double u;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpyref;
     double *mpy;
     double *mpdy;
     double *mpKp;
     double *mpKI;
     double *mpKd;
     //outputVariables pointers
     double *mpu;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new SignalPID();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("yref","Reference value","",0.,&mpyref);
            addInputVariable("y","Actual value","",0.,&mpy);
            addInputVariable("dy","Differential of actual \
value","",0.,&mpdy);
            addInputVariable("Kp","Proportional gain","",1.,&mpKp);
            addInputVariable("KI","Integral gain","",1.,&mpKI);
            addInputVariable("Kd","Differential gain","",1.,&mpKd);

        //Add outputVariables to the component
            addOutputVariable("u","control signal","",0.,&mpu);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("umin", "Minium output signal", "", -1.,umin);
            addConstant("umax", "Maximum output signal", "", 1.,umax);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        yref = (*mpyref);
        y = (*mpy);
        dy = (*mpdy);
        Kp = (*mpKp);
        KI = (*mpKI);
        Kd = (*mpKd);

        //Read outputVariables from nodes
        u = (*mpu);

//==This code has been autogenerated using Compgen==


        //Initialize delays
        delayParts1[1] = (-2*dy*Kd - 2*u - 2*Kp*y + KI*mTimestep*y + \
2*Kp*yref - KI*mTimestep*yref)/2.;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);

        delayedPart[1][1] = delayParts1[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes

        //Read inputVariables from nodes
        yref = (*mpyref);
        y = (*mpy);
        dy = (*mpdy);
        Kp = (*mpKp);
        KI = (*mpKI);
        Kd = (*mpKd);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = u;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //PID
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =u - limit(-(dy*Kd) - ((2*Kp + KI*mTimestep)*(y \
- yref))/2. - delayedPart[1][1],umin,umax);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          u=stateVark[0];
        }

        //Calculate the delayed parts
        delayParts1[1] = (-2*dy*Kd - 2*u - 2*Kp*y + KI*mTimestep*y + \
2*Kp*yref - KI*mTimestep*yref)/2.;

        delayedPart[1][1] = delayParts1[1];

        //Write new values to nodes
        //outputVariables
        (*mpu)=u;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // SIGNALPID_HPP_INCLUDED
