#ifndef ELECTRICCAPACITANCE2_HPP_INCLUDED
#define ELECTRICCAPACITANCE2_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file ElectricCapacitance2.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Tue 31 Jan 2012 15:03:09
//! @brief Capacitance
//! @ingroup ElectricComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/ElectricNG.nb*/

using namespace hopsan;

class ElectricCapacitance2 : public ComponentC
{
private:
     double mCc;
     double malpha;
     Port *mpPel1;
     Port *mpPel2;
     int mNstep;
     //Port Pel1 variable
     double uel1;
     double iel1;
     double cel1;
     double Zcel1;
     //Port Pel2 variable
     double uel2;
     double iel2;
     double cel2;
     double Zcel2;
     //inputVariables
     //outputVariables
     //LocalExpressions variables
     double cel2r;
     double cel1r;
     double cel1rf;
     double cel2rf;

     //Expressions variables

     //Port Pel1 pointer
     double *mpND_uel1;
     double *mpND_iel1;
     double *mpND_cel1;
     double *mpND_Zcel1;
     //Port Pel2 pointer
     double *mpND_uel2;
     double *mpND_iel2;
     double *mpND_cel2;
     double *mpND_Zcel2;
     //Delay declarations
     //inputVariables pointers
     //outputVariables pointers

public:
     static Component *Creator()
     {
        return new ElectricCapacitance2();
     }

     ElectricCapacitance2() : ComponentC()
     {
        const double Cc = 1.e-9;
        const double alpha = 0.3;

        mNstep=9;
        mCc = Cc;
        malpha = alpha;

        //Add ports to the component
        mpPel1=addPowerPort("Pel1","NodeElectric");
        mpPel2=addPowerPort("Pel2","NodeElectric");

        //Add inputVariables ports to the component

        //Add outputVariables ports to the component

        //Register changable parameters to the HOPSAN++ core
        registerParameter("Cc", "Capacitance", "(A s)/V", mCc);
        registerParameter("alpha", "numerical damping", "", malpha);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Pel1
        mpND_uel1=getSafeNodeDataPtr(mpPel1, NodeElectric::VOLTAGE);
        mpND_iel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CURRENT);
        mpND_cel1=getSafeNodeDataPtr(mpPel1, NodeElectric::WAVEVARIABLE);
        mpND_Zcel1=getSafeNodeDataPtr(mpPel1, NodeElectric::CHARIMP);
        //Port Pel2
        mpND_uel2=getSafeNodeDataPtr(mpPel2, NodeElectric::VOLTAGE);
        mpND_iel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CURRENT);
        mpND_cel2=getSafeNodeDataPtr(mpPel2, NodeElectric::WAVEVARIABLE);
        mpND_Zcel2=getSafeNodeDataPtr(mpPel2, NodeElectric::CHARIMP);
        //Read inputVariables pointers from nodes
        //Read outputVariable pointers from nodes

        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        cel1 = (*mpND_cel1);
        Zcel1 = (*mpND_Zcel1);
        //Port Pel2
        uel2 = (*mpND_uel2);
        iel2 = (*mpND_iel2);
        cel2 = (*mpND_cel2);
        Zcel2 = (*mpND_Zcel2);

        //Read inputVariables from nodes

        //Read outputVariables from nodes

        //InitialExpressions
        cel1r = uel1 + 2*iel1*Zcel1;
        cel2r = uel2 + 2*iel2*Zcel2;
        cel1rf = uel1;
        cel2rf = uel2;

        //LocalExpressions
        cel2r = cel2 + 2*iel2*Zcel2;
        cel1r = cel1 + 2*iel1*Zcel1;
        cel1rf = cel1r*(1 - malpha) + cel2*malpha;
        cel2rf = cel2r*(1 - malpha) + cel1*malpha;

        //Initialize delays

     }
    void simulateOneTimestep()
     {
        //Read variables from nodes
        //Port Pel1
        uel1 = (*mpND_uel1);
        iel1 = (*mpND_iel1);
        //Port Pel2
        uel2 = (*mpND_uel2);
        iel2 = (*mpND_iel2);

        //Read inputVariables from nodes

        //LocalExpressions
        cel2r = cel2 + 2*iel2*Zcel2;
        cel1r = cel1 + 2*iel1*Zcel1;
        cel1rf = cel1r*(1 - malpha) + cel2*malpha;
        cel2rf = cel2r*(1 - malpha) + cel1*malpha;

          //Expressions
          Zcel1 = mTimestep/((1 - malpha)*mCc);
          Zcel2 = mTimestep/((1 - malpha)*mCc);
          cel1 = cel2rf;
          cel2 = cel1rf;

        //Calculate the delayed parts


        //Write new values to nodes
        //Port Pel1
        (*mpND_cel1)=cel1;
        (*mpND_Zcel1)=Zcel1;
        //Port Pel2
        (*mpND_cel2)=cel2;
        (*mpND_Zcel2)=Zcel2;
        //outputVariables

        //Update the delayed variabels

     }
};
#endif // ELECTRICCAPACITANCE2_HPP_INCLUDED
