#ifndef HYDRAULICFUELTANKG_HPP_INCLUDED
#define HYDRAULICFUELTANKG_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file HydraulicFuelTankG.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Wed 30 Jan 2013 10:50:13
//! @brief Calulates the mass of remaining fuel in tank
//! @ingroup HydraulicComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Users, petkr14.IEI, Documents, CompgenNG}/HydraulicComponentsNG.nb*/

using namespace hopsan;

class HydraulicFuelTankG : public ComponentC
{
private:
     double mrhofuel;
     double mp0;
     double mh0;
     double mhf;
     double mmassfuel0;
     double mmassfuelmax;
     double mgx;
     Port *mpPT;
     Port *mpPgx;
     Port *mpPmassfuel;
     Port *mpPconsfuel;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
     //Port PT variable
     double pT;
     double qT;
     double TT;
     double dET;
     double cT;
     double ZcT;
     //inputVariables
     double gx;
     //outputVariables
     double massfuel;
     double consfuel;

     //Expressions variables
     double hx;
     //Port PT pointer
     double *mpND_pT;
     double *mpND_qT;
     double *mpND_TT;
     double *mpND_dET;
     double *mpND_cT;
     double *mpND_ZcT;
     //Delay declarations
     //inputVariables pointers
     double *mpND_gx;
     //outputVariables pointers
     double *mpND_massfuel;
     double *mpND_consfuel;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new HydraulicFuelTankG();
     }

     void configure()
     {
        const double rhofuel = 700.;
        const double p0 = 100000.;
        const double h0 = 1.;
        const double hf = 5.;
        const double massfuel0 = 1000.;
        const double massfuelmax = 1000.;
        const double gx = 9.82;

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mrhofuel = rhofuel;
        mp0 = p0;
        mh0 = h0;
        mhf = hf;
        mmassfuel0 = massfuel0;
        mmassfuelmax = massfuelmax;
        mgx = gx;

        //Add ports to the component
        mpPT=addPowerPort("PT","NodeHydraulic");

        //Add inputVariables ports to the component
        mpPgx=addReadPort("Pgx","NodeSignal", Port::NOTREQUIRED);

        //Add outputVariables ports to the component
        mpPmassfuel=addWritePort("Pmassfuel","NodeSignal", \
Port::NOTREQUIRED);
        mpPconsfuel=addWritePort("Pconsfuel","NodeSignal", \
Port::NOTREQUIRED);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("rhofuel", "Fuel density", "kg/m3", mrhofuel);
        registerParameter("p0", "tank pressure", "Pa", mp0);
        registerParameter("h0", "tank height", "m/s2", mh0);
        registerParameter("hf", "fuel in tank height", "m/s2", mhf);
        registerParameter("massfuel0", "The intitial fuel mass", "kg/s", \
mmassfuel0);
        registerParameter("massfuelmax", "fuelmass at full tank", "kg", \
mmassfuelmax);
        registerParameter("gx", "acceleration", "m/s2", mgx);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port PT
        mpND_pT=getSafeNodeDataPtr(mpPT, NodeHydraulic::PRESSURE);
        mpND_qT=getSafeNodeDataPtr(mpPT, NodeHydraulic::FLOW);
        mpND_TT=getSafeNodeDataPtr(mpPT, NodeHydraulic::TEMPERATURE);
        mpND_dET=getSafeNodeDataPtr(mpPT, NodeHydraulic::HEATFLOW);
        mpND_cT=getSafeNodeDataPtr(mpPT, NodeHydraulic::WAVEVARIABLE);
        mpND_ZcT=getSafeNodeDataPtr(mpPT, NodeHydraulic::CHARIMP);
        //Read inputVariables pointers from nodes
        mpND_gx=getSafeNodeDataPtr(mpPgx, NodeSignal::VALUE,mgx);
        //Read outputVariable pointers from nodes
        mpND_massfuel=getSafeNodeDataPtr(mpPmassfuel, NodeSignal::VALUE);
        mpND_consfuel=getSafeNodeDataPtr(mpPconsfuel, NodeSignal::VALUE);

        //Read variables from nodes
        //Port PT
        pT = (*mpND_pT);
        qT = (*mpND_qT);
        TT = (*mpND_TT);
        dET = (*mpND_dET);
        cT = (*mpND_cT);
        ZcT = (*mpND_ZcT);

        //Read inputVariables from nodes
        gx = (*mpND_gx);

        //Read outputVariables from nodes
        massfuel = mpPmassfuel->getStartValue(NodeSignal::VALUE);
        consfuel = mpPconsfuel->getStartValue(NodeSignal::VALUE);



        //Initialize delays
        delayParts1[1] = (-2*consfuel + mrhofuel*mTimestep*qT)/2.;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);

        delayedPart[1][1] = delayParts1[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes
        //Port PT
        pT = (*mpND_pT);
        qT = (*mpND_qT);
        dET = (*mpND_dET);

        //Read inputVariables from nodes
        gx = (*mpND_gx);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = consfuel;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //FuelTankG
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =consfuel - limit(-(mrhofuel*mTimestep*qT)/2. - \
delayedPart[1][1],0.,0.0001 + mmassfuel0);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          consfuel=stateVark[0];
          //Expressions
          massfuel = -consfuel + mmassfuel0;
          hx = mh0 + (massfuel*mhf)/mmassfuelmax;
          cT = (mp0 + gx*hx*mrhofuel)*onPositive(massfuel);
          ZcT = 0.;
        }

        //Calculate the delayed parts
        delayParts1[1] = (-2*consfuel + mrhofuel*mTimestep*qT)/2.;

        delayedPart[1][1] = delayParts1[1];

        //Write new values to nodes
        //Port PT
        (*mpND_TT)=TT;
        (*mpND_cT)=cT;
        (*mpND_ZcT)=ZcT;
        //outputVariables
        (*mpND_massfuel)=massfuel;
        (*mpND_consfuel)=consfuel;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
};
#endif // HYDRAULICFUELTANKG_HPP_INCLUDED
