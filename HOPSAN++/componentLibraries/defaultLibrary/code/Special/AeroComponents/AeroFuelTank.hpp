#ifndef AEROFUELTANK_HPP_INCLUDED
#define AEROFUELTANK_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroFuelTank.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 24 Aug 2012 10:08:52
//! @brief Calulates the mass of remaining fuel in tank
//! @ingroup AeroComponents
//!
//This component is generated by COMPGEN for HOPSAN-NG simulation 
//from 
/*{, C:, Documents and Settings, petkr14, My Documents, \
CompgenNG}/AeroComponentsNG.nb*/

using namespace hopsan;

class AeroFuelTank : public ComponentQ
{
private:
     double mmassfuel0;
     double mmassflow;
     Port *mpPmassflow;
     Port *mpPmassfuel;
     Port *mpPconsfuel;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
     //inputVariables
     double massflow;
     //outputVariables
     double massfuel;
     double consfuel;
     //Expressions variables
     //Delay declarations
     //inputVariables pointers
     double *mpND_massflow;
     //outputVariables pointers
     double *mpND_massfuel;
     double *mpND_consfuel;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroFuelTank();
     }

     void configure()
     {
        const double massfuel0 = 0.;
        const double massflow = 0.;

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;

        mmassfuel0 = massfuel0;
        mmassflow = massflow;

        //Add ports to the component

        //Add inputVariables ports to the component
        mpPmassflow=addReadPort("Pmassflow","NodeSignal", Port::NOTREQUIRED);

        //Add outputVariables ports to the component
        mpPmassfuel=addWritePort("Pmassfuel","NodeSignal", \
Port::NOTREQUIRED);
        mpPconsfuel=addWritePort("Pconsfuel","NodeSignal", \
Port::NOTREQUIRED);

        //Register changable parameters to the HOPSAN++ core
        registerParameter("massfuel0", "The intitial fuel mass", "kg/s", \
mmassfuel0);
        registerParameter("massflow", "Mass flow rate", "kg/s", mmassflow);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Read inputVariables pointers from nodes
        mpND_massflow=getSafeNodeDataPtr(mpPmassflow, \
NodeSignal::VALUE,mmassflow);
        //Read outputVariable pointers from nodes
        mpND_massfuel=getSafeNodeDataPtr(mpPmassfuel, NodeSignal::VALUE);
        mpND_consfuel=getSafeNodeDataPtr(mpPconsfuel, NodeSignal::VALUE);

        //Read variables from nodes

        //Read inputVariables from nodes
        massflow = (*mpND_massflow);

        //Read outputVariables from nodes
        massfuel = mpPmassfuel->getStartValue(NodeSignal::VALUE);
        consfuel = mpPconsfuel->getStartValue(NodeSignal::VALUE);



        //Initialize delays
        delayParts1[1] = (-2*consfuel - massflow*mTimestep)/2.;
        mDelayedPart11.initialize(mNstep,delayParts1[1]);

        delayedPart[1][1] = delayParts1[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes

        //Read inputVariables from nodes
        massflow = (*mpND_massflow);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = consfuel;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //FuelTank
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =consfuel - limit((massflow*mTimestep)/2. - \
delayedPart[1][1],0,mmassfuel0);

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          consfuel=stateVark[0];
          //Expressions
          massfuel = limit(-consfuel + mmassfuel0,0.,mmassfuel0);
        }

        //Calculate the delayed parts
        delayParts1[1] = (-2*consfuel - massflow*mTimestep)/2.;

        delayedPart[1][1] = delayParts1[1];

        //Write new values to nodes
        //outputVariables
        (*mpND_massfuel)=massfuel;
        (*mpND_consfuel)=consfuel;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);

     }
};
#endif // AEROFUELTANK_HPP_INCLUDED
