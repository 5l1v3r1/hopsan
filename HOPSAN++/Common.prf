#Determine debug extension, and debug output on/off
CONFIG(debug, debug|release) {
  DEBUG_EXT = _d
} else {
  DEBUG_EXT =
  DEFINES *= QT_NO_DEBUG_OUTPUT
}

#Determine the DLL file extension
win32:DLL_EXT = .dll
unix:DLL_EXT = .so

#Determine if default component lib should be build in
#DEFINES *= BUILTINDEFAULTCOMPONENTLIB

#Helpfunction to select one of multiple choice paths to includ
defineReplace(selectPath){
    PATH = $$1
    DEFAULT_PATHS = $$2
    NAME = $$3

    !exists($${PATH}) {
        !isEmpty(PATH) {
            message(The custom $${NAME} path $${PATH} does not exist!)
        }
        #Clear the path in case it containes rubish
        PATH =
        for(path,DEFAULT_PATHS){
            isEmpty(PATH):exists($${path}){
                PATH = $${path}
                message(Setting $${NAME} path to one of the defaults $${PATH})
            }
        }
    } else {
        message(Using custom $${NAME} path $${PATH})
    }
    !exists($${PATH}){
        warning(The $${NAME} path $${PATH} does not exist)
    }
    return($${PATH})
}

#This function generates the commandline code necessary to copy a certain file or files from src directory to dst directory
defineReplace(generateCopyDllCommand){
    fileNames = $$1
    srcDir = $$2
    dstDir = $$3

    files =
    qmake_post_link =

    #message(fileNames $$fileNames)
    #message(srcDir $$srcDir)
    #message(dstDir $$dstDir)

    for(file, fileNames){
        files += $${srcDir}/$${file}
    }
    #message(files $$files)

    #On win32 we need to replace all slash with backslash (escaped backslashes)
    win32 {
        for(file, files){
            qmake_post_link += $$quote(xcopy /Y \"$$replace(file,/,\\)\" \"$$replace(dstDir,/,\\)\"$$escape_expand(\\n\\t))
        }
    }

    #On unix we dont need to replace slashes
    unix {
        for(file, files){
            qmake_post_link += $$quote(cp -df $${file} $${dstDir}$$escape_expand(\\n\\t))
        }
    }

    #message(qmake_post_link $${qmake_post_link})
    return($$qmake_post_link)
}

#Make compile output clean
CONFIG += silent warn_on
