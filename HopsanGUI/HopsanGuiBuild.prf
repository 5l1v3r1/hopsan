include( ../Common.prf )

#Helpfunction to fetch correct libhdf5 INCLUDEPATH and LIBS path
defineReplace(setHDF5PathInfo){
    #Assign input arguments
    externalSrc = $$1
    dstDir = $$2

    #Set QWT paths, Paths that are higher up in the list will have priority if found
    win32:contains(QMAKE_HOST.arch, x86_64){
        # 64 bit Windows release
        HDF5_PATHS *= $${PWD}/../Dependencies/hdf5-1.8.15-patch1_x64/install
    } else {
        # 32 bit Windows version or Linux / Mac
        HDF5_PATHS *= $${PWD}/../Dependencies/hdf5-1.8.15-patch1/install
    }
    HDF5_PATH = $$selectPath($$externalSrc, $$HDF5_PATHS, "HDF5")

    #Empty variables to fill in
    magic_hopsan_libpath =
    magic_hopsan_includepath =
    magic_hopsan_qmake_post_link =
    libDir =

    exists($${HDF5_PATH}){
        libDir = $${HDF5_PATH}/bin
        incDir = $${HDF5_PATH}/include

        #message(libDir: $${libDir})

        #Check libfolder path
        exists($${libDir}){
            files =
            libName = hdf5

            #Add debug if debugmode (only default on for windows)
            dbg_ext =
            #win32:CONFIG(debug, debug|release):dbg_ext = d
            #unix:CONFIG(debug, debug|release):dbg_ext = d

            # Standard way of finding Discount lib&include
            magic_hopsan_libpath = -L$${libDir} -l$${libName}$${dbg_ext} -l$${libName}_cpp$${dbg_ext}
            magic_hopsan_includepath = $${incDir}


            #Set files to copy
            win32:files = $${LIB_PREFIX}$${libName}$${dbg_ext}$${DLL_EXT}
            unix:files = $${LIB_PREFIX}$${libName}$${dbg_ext}$${DLL_EXT}*
            win32:files += $${LIB_PREFIX}$${libName}_cpp$${dbg_ext}$${DLL_EXT}
            unix:files += $${LIB_PREFIX}$${libName}_cpp$${dbg_ext}$${DLL_EXT}*
            # On mac we need all of the framework
            #macx:files = $${libName}.framework

            #Generate the copy command
            magic_hopsan_qmake_post_link = $$generateCopyDllCommand($$files, $$libDir, $$dstDir)
        }
    }

    !exists($${libDir}){
        warning('Could not find your compiled HDF5 dll')
        magic_hopsan_libpath =
        magic_hopsan_includepath =
        magic_hopsan_qmake_post_link =
    }

    #Export lists to INCLUDEPATH, LIBS and QMAKE_POST_LINK variables
    export(magic_hopsan_libpath)
    export(magic_hopsan_includepath)
    export(magic_hopsan_qmake_post_link)

    return($$magic_hopsan_libpath)
}


#Helpfunction to fetch correct Discount INCLUDEPATH and LIBS path
defineReplace(setDiscountPathInfo){
    #Assign input arguments
    externalSrc = $$1
    dstDir = $$2

    #Set QWT paths, Paths that are higher up in the list will have priority if found
    win32:contains(QMAKE_HOST.arch, x86_64){
        # 64 bit Windows release
        DISCOUNT_PATHS *= $${PWD}/../Dependencies/discount-2.1.8_x64
    } else {
        # 32 bit Windows version or Linux / Mac
        DISCOUNT_PATHS *= $${PWD}/../Dependencies/discount-2.1.8
    }
    DISCOUNT_PATH = $$selectPath($$externalSrc, $$DISCOUNT_PATHS, "Discount")

    #Empty variables to fill in
    magic_hopsan_libpath =
    magic_hopsan_includepath =
    magic_hopsan_qmake_post_link =
    libDir =

    exists($${DISCOUNT_PATH}){
        libDir = $${DISCOUNT_PATH}
        #message(libDir: $${libDir})

        #Check libfolder path
        exists($${libDir}){
            files =
            libName = markdown

            #Add debug if debugmode (only default on for windows)
            dbg_ext =
            #win32:CONFIG(debug, debug|release):dbg_ext = d
            #unix:CONFIG(debug, debug|release):dbg_ext = d

            # Standard way of finding Discount lib&include
            magic_hopsan_libpath = -L$${libDir} -l$${libName}$${dbg_ext}
            magic_hopsan_includepath = $${DISCOUNT_PATH}


            #Set files to copy
            win32:files = lib$${libName}$${dbg_ext}$${DLL_EXT}
            unix:files = lib$${libName}$${dbg_ext}$${DLL_EXT}*
            # On mac we need all of the framework
            #macx:files = $${libName}.framework

            #Generate the copy command
            magic_hopsan_qmake_post_link = $$generateCopyDllCommand($$files, $$libDir, $$dstDir)
        }
    }

    !exists($${libDir}){
        warning('Could not find your compiled Discount (markdown) dll')
        magic_hopsan_libpath =
        magic_hopsan_includepath =
        magic_hopsan_qmake_post_link =
    }

    #Export lists to INCLUDEPATH, LIBS and QMAKE_POST_LINK variables
    export(magic_hopsan_libpath)
    export(magic_hopsan_includepath)
    export(magic_hopsan_qmake_post_link)

    return($$magic_hopsan_libpath)
}

#Helpfunction to fetch correct QWT INCLUDEPATH and LIBS path
defineReplace(setQWTPathInfo){
    #Assign input arguments
    externalSrc = $$1
    dstDir = $$2

    #Set QWT paths, Paths that are higher up in the list will have priority if found
    win32:contains(QMAKE_HOST.arch, x86_64){
        # 64 bit Windows release
        QWT_PATHS *= $${PWD}/../Dependencies/qwt-6.1.2_x64
        QWT_PATHS *= $${PWD}/../Dependencies/qwt-6.1.0_x64
    } else {
        # 32 bit Windows version or Linux / Mac
        QWT_PATHS *= $${PWD}/../Dependencies/qwt-6.1.2
        QWT_PATHS *= $${PWD}/../Dependencies/qwt-6.1.0
    }
    QWT_PATH = $$selectPath($$externalSrc, $$QWT_PATHS, "qwt")

    #warning(QWT_PATH $${QWT_PATH})

    #Empty variables to fill in
    magic_hopsan_libpath =
    magic_hopsan_includepath =
    magic_hopsan_qmake_post_link =
    libDir =

    exists($${QWT_PATH}){
        libDir = $${QWT_PATH}/lib
        #message(libDir: $${libDir})

        #Check libfolder path
        exists($${libDir}){
            files =
            libName = qwt

            #Add debug if debugmode (only default on for windows)
            dbg_ext =
            win32:CONFIG(debug, debug|release):dbg_ext = d
            #unix:CONFIG(debug, debug|release):dbg_ext = d

            # Standard way of finding qwt lib&include
            magic_hopsan_libpath = -L$${libDir} -l$${libName}$${dbg_ext}
            magic_hopsan_includepath = $${QWT_PATH}/src

            #Set files to copy,  only qwt[d].dll/libqwt[d].so
            win32:files = $${libName}$${dbg_ext}$${DLL_EXT}
            unix:files = lib$${libName}$${dbg_ext}$${DLL_EXT}*

            #Generate the copy command
            magic_hopsan_qmake_post_link = $$generateCopyDllCommand($$files, $$libDir, $$dstDir)
            macx:message(qmake_post_link: $${magic_hopsan_qmake_post_link})
            macx:message(files:$$files)
        }
    }

    !exists($${libDir}){
        warning('Could not find your compiled qwt dll')
        magic_hopsan_libpath =
        magic_hopsan_includepath =
        magic_hopsan_qmake_post_link =
    }

    #Export lists to INCLUDEPATH, LIBS and QMAKE_POST_LINK variables
    export(magic_hopsan_libpath)
    export(magic_hopsan_includepath)
    export(magic_hopsan_qmake_post_link)

    #message(----------------Includepath is $${magic_hopsan_includepath})
    #message(----------------Libs is $${magic_hopsan_libpath})

    return($$magic_hopsan_libpath)
}

#Helpfunction to fetch correct PythonQt INCLUDEPATH and LIBS path
defineReplace(setPythonQtPathInfo){
    #Assign input arguments
    externalSrc = $$1
    dstDir = $$2

    #Set QWT paths, Paths that are earlier in the list will be used if found
    win32:contains(QMAKE_HOST.arch, x86_64){
        # 64 bit version
        PYTHONQT_PATHS *= $${PWD}/../Dependencies/PythonQt2.1_Qt4.8_x64
    } else {
        # 32 bit version or Linux / Mac
        PYTHONQT_PATHS *= $${PWD}/../Dependencies/PythonQt3.0
        PYTHONQT_PATHS *= $${PWD}/../Dependencies/PythonQt2.1_Qt4.8
    }
    PYTHONQT_PATH = $$selectPath($$externalSrc, $$PYTHONQT_PATHS, "pythonqt")

    #Empty variables to fill in
    magic_hopsan_libpath =
    magic_hopsan_includepath =
    magic_hopsan_qmake_post_link =
    libDir =

    exists($${PYTHONQT_PATH}){
        libDir = $${PYTHONQT_PATH}/lib
        #Check libfolder path
        exists($${libDir}){
            files =

            magic_hopsan_libpath = -L$${libDir} -lPythonQt$${DEBUG_EXT} -lPythonQt_QtAll$${DEBUG_EXT}
            magic_hopsan_includepath = $${PYTHONQT_PATH}/src $${PYTHONQT_PATH}/extensions/PythonQt_QtAll

            #Set files to copy
            win32:files = PythonQt$${DEBUG_EXT}$${DLL_EXT} PythonQt_QtAll$${DEBUG_EXT}$${DLL_EXT}
            unix:files = libPythonQt$${DEBUG_EXT}$${DLL_EXT}* libPythonQt_QtAll$${DEBUG_EXT}$${DLL_EXT}*

            #Generate the copy command
            magic_hopsan_qmake_post_link = $$generateCopyDllCommand($$files, $$libDir, $$dstDir)
            #message(qmake_post_link $${magic_hopsan_qmake_post_link})
        }
    }

    !exists($${libDir}){
        warning('Could not find your compiled PythonQt dll dir')
        magic_hopsan_libpath =
        magic_hopsan_includepath =
        magic_hopsan_qmake_post_link =
    }

    #Export lists to INCLUDEPATH, LIBS and QMAKE_POST_LINK variables
    export(magic_hopsan_libpath)
    export(magic_hopsan_includepath)
    export(magic_hopsan_qmake_post_link)

    #message(----------------Includepath is $${magic_hopsan_includepath})
    #message(----------------Libs is $${magic_hopsan_libpath})

    return($$magic_hopsan_libpath)
}
