/*!
\page devBaseRequirementsPage Basic Requirements: Compilers and Qt Libraries
HopsanGUI uses the Qt libraries for the GUI components and qmake to generate makefiles. We are also using Qt Creator and qmake for HopsanCore even though it is not using the Qt-libraries. You need to install the appropriate Qt libraries and the Qt Creator IDE.

\section devBaseRequirementsPage-Windows Development for Microsoft Windows

\subsection devBaseRequirementsPage-Windows-mingw MinGW (gcc in Windows)
This guide tells you how to install the Qt Development Environment and Compilers, used for:
1. Development of the Hopsan program
2. Development of Hopsan component libraries

\subsubsection _mingwwindows32 32-bit MinGW (For Hopsan 0.7.*)
32-bit Hopsan is no longer supported. It is possible to compile using 32-bit but we do not want to maintain two sets up development environments.
If you want to try and build Hopsan 32-bit yourself, You should use the official MinGW 32-bit compiler and Qt Libraries available at http://www.qt.io/download-open-source/

\subsubsection _mingwwindows64 64-bit MinGW (For Hopsan 0.7.*)
This guide is relevant for Hopsan version 0.7.* 64-bit development.
If you want to compile 64-bit component libraries YOU MUST compile against a 64-bit version of Hopsan

<b>Note!</b> You do not need the Qt Development Environment if you only want to use the built in compilation feature in Hopsan, then you only need MinGW64

We use a third party build of Qt (from http://www.tver-soft.org/qt64 ; http://sourceforge.net/projects/qt64ng/ ) using a custom build of MinGW-w64 from (http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/)

<b>Installation Qt libraries and Compiler:</b>
1. Download "qt-5.4.1-x64-mingw492r1-seh-rev1.exe" from http://downloads.sourceforge.net/project/qt64ng/qt/x86-64/5.4.1/mingw-4.9/seh/qt-5.4.1-x64-mingw492r1-seh-rev1.exe
2. Install to `C:\Qt\qt-5.4.1-x64-mingw492r1-seh-rev1`

<b>Installation Compiler Only:</b>
1. Download "x86_64-4.9.2-release-posix-seh-rt_v3-rev1.7z" from http://downloads.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.2/threads-posix/seh/x86_64-4.9.2-release-posix-seh-rt_v3-rev1.7z
2. Unzip the file (with 7-Zip) and copy the mingw64 directory to your desired location.

<b>Installation of the Qt Creator IDE:</b>
1. Download and install a \b Qt \b Creator version of your choice from http://www.qt.io/download-open-source/ \n
\b Note! Click View All Downloads on the download page and scroll down to find Qt Creator only installers. (Do \b NOT install Qt 5.*) \n
\b Note! When new releases are published the old ones can be found from http://download.qt.io/official_releases/qtcreator/ \n
\b Note! A 32-bit version of Qt Creator will work fine even if you are building 64-bit, it is just the code editor

<b>Configure QtCreator:</b>
1. In QtCreator, go to Tools->Options->Build&Run
2. Add your "Qt Version" (if it does not exist) by pointing to `C:\Qt\qt-5.4.1-x64-mingw492r1-seh-rev1\qt-5.4.1-x64-mingw492r1-seh-rev1\bin\qmake.exe` or similar \n
   Select a clever name so that you know which Qt version is which (if you multiple versions installed)
3. Make sure that the compiler is configured under "Compilers", add it manually if not found, (point to `C:\Qt\qt-5.4.1-x64-mingw492r1-seh-rev1\mingw64\bin\g++.exe` ) \n
   Make sure to select a clever name (if you are using multiple compilers) so that you can easily identify which is which. \n
   Make sure that the ABI: field shows: __x86-windows-msys-pe-64bit__
4. Configure a debugger under the Debuggers tab by pointing to `C:\Qt\qt-5.4.1-x64-mingw492r1-seh-rev1\mingw64\bin\gdb.exe` \n
   Make sure to select a clever name (if you are using multiple debuggers) so that you can easily identify which is which. \n
5. Configure a "Kit" (Combination of Qt version, Compiler and Debugger) under the Kits tab. \n
   Again! Choose a clever name. \n
   Choose Compiler, Debugger and Qt version in the drop down boxes. Make sure that the Qt mkspec: field is empty

Open HopsanNG.pro or your "ComponentLibrary".pro file and configure your project (Select your Kit)
If you have an old HopsanNG.pro.user file <b>DO NOT LOAD IT</b> when presented with that option \n
The project should now be configured automatically, but check the Projects tab on the left menu to be sure.

\subsection _msvccompiler MSVC++ (The Microsoft Visual C++ Compiler) 
This guide describes what you need to install to be able to build MSVC2008 and MSVC2010 versions of the HopsanCore
If you do not need both of them, then read the guide first, then install the version that you want.
The MSVC compiler is needed if you want to compile the HopsanCore or component libraries that works with certain other programs, such as Matlab/Simulink.

<b>Do NOT!</b> install the Microsoft Visual Studio 2010 Express development environment, it will not work with the build scripts (at least on 64-bit Windows). You should use the Windows SDKs instead.

If you have previous installations of Microsoft Windows SDKs installed you need to uninstall them and all traces of Microsoft Visual C++ Compilers (not redistributable packages), "Application Verifier", "Debugging Tools for Windows" and "Performance Toolkit" (and maybe others). Otherwise Windows SDK installation may/will fail if newer versions of these components are already installed).

-# Download and install the "Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1" (Windows SDK 7.0) from <a href="http://www.microsoft.com/downloads/en/default.aspx " target="_blank">Microsoft Download Center</a>.
You don't need to install the .NET stuff, but make sure that you install the "Debugging Tools for Windows"
-# (Optional if you want to be able to debug) If you are using a 64-bit OS you will also need to install the 32-bit version of the debugging tools. The SDK will automatically only install the 64-bit version. If you can not get the newest version manually then select version 6.11.1.404 from the archive downloads list that you can find <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009" target="_blank">here</a>. This link does no longer seem to contain the needed file though.
-# Pay attention to the messages in the last window in the installation, if you have an error here you will have to remove the conflicting version and then reinstall the SDK components that failed.
-# Repeat the above for "Microsoft Windows SDK for Windows 7 and .NET Framework 4" (Windows SDK 7.1)
   -# If you are unable to install the Visual Compilers (because a newer version already seems to be installed) see Microsoft KB2519277 for a patch.
      -# First install the Windows SDK 7.1 without compilers, then run the patch file to reinstall compilers.
      -# The issue is most likely cause by you having previously installed "MS Visual Studio 2010 Express SP1"
      -# Unfortunately the KB2519277 patch is missing files, this is also a known bug that will no be fixed by Microsoft (official statement)
      -# Now go to add/remove programs and uninstall all Microsoft Visual C++ 2010 compilers
      -# Hopefully you will now be able to reinstall Windows SDK 7.1 with compilers (which have a slightly older version then those that came with Visual Studio and KB2519277)

If you get an error about "cl.exe" not being found when building, then the "Visual Studio 9.0/VC/bin" or "Visual Studio 10.0/VC/bin" folder has not been added to your PATH system environment variable.
    -# Note! the release build script should do this automatically, adding the path manually is not recommended as that could mean that the wrong version will be used when you try to compile for a different MSVC version.
	
To get a working MSVC debugger in Qt creator
-# Go into Tools->Options->Debugger->Cdb and check the Cdb box. Now set the path to the Debugging tools for Windows 32-bit version. (Autodetect should work).
-# If you want the debugger to automatically download debugger symbols for the Windows libraries, then create a folder, eg. `C:\websymbols` and add the following line to "Symbol Paths:" under the Cdb tab: "SRV*c:\websymbols*http://msdl.microsoft.com/download/symbols" (without quotes). You websymbols folder will act as a cache for symbol retrieval.

\section devBaseRequirementsPage-Ubuntu Development for *Ubuntu or any Debian based system

\subsection qt-linux gcc in *Ubuntu / Debian
On Linux based operating systems you should use the gcc compiler. To install gcc (and some other tools) in Ubuntu run `apt-get install build-essential`.
\subsubsection qt5-linux-gcc Qt5
You should use the Qt-libraries in you distribution package repository. Make sure that you install the Qt development packages.
If you install these packages all necessary components seem to be installed: `apt-get install qttools5-dev qttools5-dev-tools qt5-default libqt5svg5-dev libqt5xmlpatterns5-dev libqt5webkit5-dev qtmultimedia5-dev qtcreator`\n
If you want a newer version of Qt Creator then what is available in your repository then you may install one from http://download.qt.io/official_releases/qtcreator/
\subsubsection qt4-linux-gcc Qt4 (If Qt5 is not available)
You should use the Qt-libraries in you distribution package repository. Make sure that you install the Qt development packages, `apt-get install libqt4-dev qt4-dev-tools`. If you want a newer version of Qt Creator then what is available in your repository then you may install one from http://download.qt.io/official_releases/qtcreator/
*/
