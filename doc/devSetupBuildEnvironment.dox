/*!
\page page_setupbuildenvironment How to setup the Hopsan build environment

The Hopsan build environment is centered around the QtCreator IDE and uses qmake project files and the qmake program to generate Makefiles.
HopsanGUI and some other components require the Qt libraries but some components such as the HospanCore library are written in "Plain C++".
This means that it is possible to build the core components of Hopsan without Qt if that would be needed.
On Windows the MinGW-W64 compiler is used/expected by default.
While it should be possible to use the Microsoft compiler as well this has not been tested for building all of Hopsan.
It is possible, however, to build the HopsanCore and component libraries with the Microsoft compiler.
See \subpage page_setupbuildenvironmentmsvc for more information about setting up the MSVC compiler.

We are using the mingw-builds version of the MinGW-w64 compiler project from (http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/)
and a custom-built version of the Qt libraries for this compiler.

\section sec_setupbuildenvironment_windows Development on Microsoft Windows

From version 0.7 of Hopsan an onwards, 32-bit Windows versions are no longer supported by default.
If you want one, you have to build it yourself. 
You need to find the appropriate compiler version and compile all dependencies yourself.

__This guide is meant for Hopsan version 0.7.* 64-bit development__ \n
__You must use the same compiler version for all components of Hopsan and dependencies, if you mix versions, Hopsan may not work as expected!__

It is important that you install to the exact destinations given below, otherwise the automatic scripts for building dependencies will not work.
If you want to use an other destination you can, of course, edit the scripts.
In particular, see the `setupHopsanBuildPaths.bat/sh` script.

You may need to install the 7-Zip program from http://www.7-zip.org to unpack the needed files

<b>Installing the compiler:</b>
1. Download "x86_64-4.9.3-release-posix-seh-rt_v4-rev1.7z" from http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.3/threads-posix/seh/x86_64-4.9.3-release-posix-seh-rt_v4-rev1.7z
2. Unpack to `C:\Qt\x86_64-4.9.3-release-posix-seh-rt_v4-rev1`

<b>Installing the Qt libraries:</b>
1. Download our custom-built Qt version from http://flumes.iei.liu.se/hopsan/files/development_files/0.7.x_64bit/qt-5.4.2-x64-mingw493r4-seh-rev1.7z
2. Unpack to `C:\Qt\qt-5.4.2-x64-mingw493r4-seh-rev1`
3. Enter the directory and run the `qtbinpatcher.exe` program to correct all qt paths

<b>Installation of the Qt Creator IDE:</b>
1. Download and install __Qt Creator__ from http://download.qt.io/official_releases/qtcreator/ \n
\b Note! Make sure that you __ONLY__ install Qt Creator, and __NOT__ the official Qt Libraries! \n
\b Note! A 32-bit version of Qt Creator will work fine even if you are building 64-bit, it is only the code editor.

<b>Configure QtCreator:</b>
1. In QtCreator, go to Tools->Options->Build&Run
2. Under the tab "Qt Versions", add your "Qt Version" (if it does not exist) by pointing to `C:\Qt\qt-5.4.2-x64-mingw493r4-seh-rev1\bin\qmake.exe` \n
   Select a clever name so that you know which Qt version is which (if you multiple versions installed)
3. Make sure that the compiler is configured under "Compilers", add it manually has not been found, (point to `C:\Qt\x86_64-4.9.3-release-posix-seh-rt_v4-rev1\mingw64\bin\g++.exe` ) \n
   Make sure to select a clever name (if you are using multiple compilers) so that you can easily identify them. \n
   Make sure that the ABI: field shows: __x86-windows-msys-pe-64bit__
4. Configure a debugger under the Debuggers tab by pointing to `C:\Qt\x86_64-4.9.3-release-posix-seh-rt_v4-rev1\mingw64\bin\gdb.exe` \n
   Make sure to select a clever name (if you are using multiple debuggers) so that you can easily identify them. \n
5. Configure a "Kit" (Combination of Qt version, Compiler and Debugger) under the Kits tab. \n
   Again! Choose a clever name. \n
   Choose Compiler, Debugger and Qt version in the drop down boxes. Make sure that the Qt mkspec: field is empty

\subsection sec_setupbuildenvironment_tools External Build Tools
To build some of the dependencies some additional external build tools are required.
You may not need these if you are not building all dependencies.

<b>Install CMake:</b>
1. Install CMake from http://www.cmake.org/ and install it to the default location.

<b>Install MSYS2:</b>
This is a short guide: you can find more instructions at http://msys2.github.io/ and http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/

1. Download the installer from http://msys2.github.io/
   Choose the x86_64 version on 64-bit Windows
2. Install it to the default location (`c:\msys64\`) (or change the path in the `setupHopsanPaths` script later on.
3. Start msys2 (MSYS2 Shell) and update the core components by running the command: `pacman --needed -Sy bash pacman pacman-mirrors msys2-runtime`
4. __This step is VERY important!__ Close msys2 (run `exit`). If the window does not close after "exit" then kill the bash.exe process manually.
5. Start msys2 again and run the following command to upgrade the remaning packages: `pacman -Su`
6. To install the required build tools, run: `pacman -S make automake autoconf libtool pkgconfig patch`

\section sec_setupbuildenvironment_ubuntu Development on GNU/Linux *Ubuntu or any Debian based system

On Linux based operating systems you should use the default GCC compiler.
You should use the Qt-libraries in you distribution package repository. 
Make sure that you install the Qt development packages.

1. To install GCC (and some other tools) on Ubuntu run `apt-get install build-essential`.
2. The following packages seem to include all necessary components: `apt-get install libtbb-dev, python-dev, qtbase5-dev, libqt5webkit5-dev, libqt5svg5-dev, qtmultimedia5-dev, libqt5opengl5-dev, libhdf5-dev, unzip, cmake, libtool-bin, automake, pkg-config`\n
   __Note!__ What packages are needed may change between OS versions (due to repackaging), you may need additional packages.
3. Download Qt Creator from your package repository or a newer version from http://download.qt.io/official_releases/qtcreator/ \n


\subsection qt4-linux-gcc Installing Qt4 (If Qt5 is not available)
If Qt5 libraries are not available you will need the following packages instead: `apt-get install libtbb-dev, python-dev, libqt4-dev, libqtwebkit-dev, libhdf5-dev, unzip, cmake, libtool, automake, pkg-config`.
*/
