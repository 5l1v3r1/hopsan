#ifndef HYDRAULICPISTONJLOAD_HPP_INCLUDED
#define HYDRAULICPISTONJLOAD_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file HydraulicPistonJload.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 28 Jun 2013 13:04:37
//! @brief This is piston with a linked inertia load
//! @ingroup HydraulicComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/HydraulicComponents.nb*/

using namespace hopsan;

class HydraulicPistonJload : public ComponentQ
{
private:
     double A1;
     double A2;
     double SL;
     double xp0;
     double Lever;
     double Cip;
     double Bp;
     double JL;
     double BL;
     double KL;
     double thetamin;
     double thetamax;
     Port *mpP1;
     Port *mpP2;
     Port *mpPmr;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     double delayParts5[9];
     double delayParts6[9];
     double delayParts7[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[7];
     int mNstep;
     //Port P1 variable
     double p1;
     double q1;
     double T1;
     double dE1;
     double c1;
     double Zc1;
     //Port P2 variable
     double p2;
     double q2;
     double T2;
     double dE2;
     double c2;
     double Zc2;
     //Port Pmr variable
     double {{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. node]}[[3,6,1,1]]mr;
     double {{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. node]}[[3,6,2,1]]mr;
     double {{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. node]}[[3,6,3,1]]mr;
//==This code has been autogenerated using Compgen==
     //inputVariables
     //outputVariables
     double xp;
     double vp;
     //Expressions variables
     //Port P1 pointer
     double *mpND_p1;
     double *mpND_q1;
     double *mpND_T1;
     double *mpND_dE1;
     double *mpND_c1;
     double *mpND_Zc1;
     //Port P2 pointer
     double *mpND_p2;
     double *mpND_q2;
     double *mpND_T2;
     double *mpND_dE2;
     double *mpND_c2;
     double *mpND_Zc2;
     //Port Pmr pointer
     double *mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,1,1]]mr;
     double *mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,2,1]]mr;
     double *mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,3,1]]mr;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     //inputParameters pointers
     double *mpA1;
     double *mpA2;
     double *mpSL;
     double *mpxp0;
     double *mpLever;
     double *mpCip;
     double *mpBp;
     double *mpJL;
     double *mpBL;
     double *mpKL;
     double *mpthetamin;
     double *mpthetamax;
     //outputVariables pointers
     double *mpxp;
     double *mpvp;
     Delay mDelayedPart10;
     Delay mDelayedPart20;
     Delay mDelayedPart30;
     Delay mDelayedPart40;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new HydraulicPistonJload();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(7,7);
        systemEquations.create(7);
        delayedPart.create(8,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        mpP1=addPowerPort("P1","NodeHydraulic");
        mpP2=addPowerPort("P2","NodeHydraulic");
        mpPmr=addmechanical rot. node("Pmr","{{1, Qport, PowerPort, \
NodeHydraulic, hydraulic node 1, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, {2, Qport, PowerPort, \
NodeHydraulic, hydraulic node 2, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical \
rot. node]}[[3,4]]");
        //Add inputVariables to the component

        //Add inputParammeters to the component
            addInputVariable("A1", "Piston area 1", "m2", 0.001,&mpA1);
            addInputVariable("A2", "Piston area 2", "m2", 0.001,&mpA2);
            addInputVariable("SL", "Stroke", "m", 0.5,&mpSL);
            addInputVariable("xp0", "Stroke pos at zero angle", "m", \
0.5,&mpxp0);
            addInputVariable("Lever", "Lever", "m", 0.5,&mpLever);
            addInputVariable("Cip", "Leak coeff.", "m3/(s Pa)", 0.,&mpCip);
            addInputVariable("Bp", "Visc. friction coeff.", "N/m/s", \
0.,&mpBp);
            addInputVariable("JL", "Inertia", "kg m^2", 1000.,&mpJL);
            addInputVariable("BL", "Viscous friction coefficient of load", \
"Nm s", 0.,&mpBL);
            addInputVariable("KL", "Stiffness coefficient of load", "Nm", \
0.,&mpKL);
            addInputVariable("thetamin", "Limitation on stroke", "rad", \
-0.5,&mpthetamin);
            addInputVariable("thetamax", "Limitation on stroke", "rad", \
0.5,&mpthetamax);
        //Add outputVariables to the component
            addOutputVariable("xp","Piston position","m",0.,&mpxp);
            addOutputVariable("vp","Piston velocity","m/s",0.,&mpvp);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
        mpSolver = new EquationSystemSolver(this,7);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port P1
        mpND_p1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Pressure);
        mpND_q1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Flow);
        mpND_T1=getSafeNodeDataPtr(mpP1, NodeHydraulic::Temperature);
        mpND_dE1=getSafeNodeDataPtr(mpP1, NodeHydraulic::HeatFlow);
        mpND_c1=getSafeNodeDataPtr(mpP1, NodeHydraulic::WaveVariable);
        mpND_Zc1=getSafeNodeDataPtr(mpP1, NodeHydraulic::CharImpedance);
        //Port P2
        mpND_p2=getSafeNodeDataPtr(mpP2, NodeHydraulic::Pressure);
        mpND_q2=getSafeNodeDataPtr(mpP2, NodeHydraulic::Flow);
        mpND_T2=getSafeNodeDataPtr(mpP2, NodeHydraulic::Temperature);
        mpND_dE2=getSafeNodeDataPtr(mpP2, NodeHydraulic::HeatFlow);
        mpND_c2=getSafeNodeDataPtr(mpP2, NodeHydraulic::WaveVariable);
        mpND_Zc2=getSafeNodeDataPtr(mpP2, NodeHydraulic::CharImpedance);
        //Port Pmr
        mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,1,1]]mr=getSafeNodeDataPtr(mpPmr, {{1, Qport, PowerPort, \
NodeHydraulic, hydraulic node 1, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, {2, Qport, PowerPort, \
NodeHydraulic, hydraulic node 2, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical \
rot. node]}[[3,4]]::{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,1,5]]);
        mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,2,1]]mr=getSafeNodeDataPtr(mpPmr, {{1, Qport, PowerPort, \
NodeHydraulic, hydraulic node 1, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, {2, Qport, PowerPort, \
NodeHydraulic, hydraulic node 2, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical \
rot. node]}[[3,4]]::{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,2,5]]);
        mpND_{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, {{p, \
100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, \
293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, \
0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, \
in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, {{p, 100000., \
double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, {T, 293., \
double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, {c, 0., \
double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, CharImpedance, in}}}, \
MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,3,1]]mr=getSafeNodeDataPtr(mpPmr, {{1, Qport, PowerPort, \
NodeHydraulic, hydraulic node 1, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, {2, Qport, PowerPort, \
NodeHydraulic, hydraulic node 2, {{p, 100000., double, Pa, Pressure, out}, \
{q, 0., double, m3/s, Flow, out}, {T, 293., double, K, Temperature, in}, {dE, \
0., double, J/s, HeatFlow, out}, {c, 0., double, Pa, WaveVariable, in}, {Zc, \
0., double, m5/s/N, CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical \
rot. node]}[[3,4]]::{{1, Qport, PowerPort, NodeHydraulic, hydraulic node 1, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, {2, Qport, PowerPort, NodeHydraulic, hydraulic node 2, \
{{p, 100000., double, Pa, Pressure, out}, {q, 0., double, m3/s, Flow, out}, \
{T, 293., double, K, Temperature, in}, {dE, 0., double, J/s, HeatFlow, out}, \
{c, 0., double, Pa, WaveVariable, in}, {Zc, 0., double, m5/s/N, \
CharImpedance, in}}}, MechanicRotQnode[mr, 0., mechanical rot. \
node]}[[3,6,3,5]]);

        //Read variables from nodes
        //Port P1
        p1 = (*mpND_p1);
        q1 = (*mpND_q1);
        T1 = (*mpND_T1);
        dE1 = (*mpND_dE1);
        c1 = (*mpND_c1);
        Zc1 = (*mpND_Zc1);
        //Port P2
        p2 = (*mpND_p2);
        q2 = (*mpND_q2);
        T2 = (*mpND_T2);
        dE2 = (*mpND_dE2);
        c2 = (*mpND_c2);
        Zc2 = (*mpND_Zc2);
        //Port Pmr

        //Read inputVariables from nodes

        //Read inputParameters from nodes
        A1 = (*mpA1);
        A2 = (*mpA2);
        SL = (*mpSL);
        xp0 = (*mpxp0);
        Lever = (*mpLever);
        Cip = (*mpCip);
        Bp = (*mpBp);
        JL = (*mpJL);
        BL = (*mpBL);
        KL = (*mpKL);
        thetamin = (*mpthetamin);
        thetamax = (*mpthetamax);

        //Read outputVariables from nodes
        xp = (*mpxp);
        vp = (*mpvp);

//==This code has been autogenerated using Compgen==


        //Initialize delays

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(7);
        Vec stateVark(7);
        Vec deltaStateVar(7);

        //Read variables from nodes
        //Port P1
        T1 = (*mpND_T1);
        c1 = (*mpND_c1);
        Zc1 = (*mpND_Zc1);
        //Port P2
        T2 = (*mpND_T2);
        c2 = (*mpND_c2);
        Zc2 = (*mpND_Zc2);
        //Port Pmr

        //Read inputVariables from nodes

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = xmp;
        stateVark[1] = vmp;
        stateVark[2] = q1;
        stateVark[3] = q2;
        stateVark[4] = p1;
        stateVark[5] = p2;
        stateVark[6] = fmp;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //PistonJload
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =DirectedInfinity();
          systemEquations[1] =DirectedInfinity();
          systemEquations[2] =DirectedInfinity();
          systemEquations[3] =DirectedInfinity();
          systemEquations[4] =p1 - lowLimit(c1 + q1*Zc1,0);
          systemEquations[5] =p2 - lowLimit(c2 + q2*Zc2,0);
          systemEquations[6] =-cmp + fmp - vmp*Zcmp;

          //Jacobian matrix
          jacobianMatrix[0][0] = 0;
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = 0;
          jacobianMatrix[0][3] = 0;
          jacobianMatrix[0][4] = 0;
          jacobianMatrix[0][5] = 0;
          jacobianMatrix[0][6] = 0;
          jacobianMatrix[1][0] = 0;
          jacobianMatrix[1][1] = 0;
          jacobianMatrix[1][2] = 0;
          jacobianMatrix[1][3] = 0;
          jacobianMatrix[1][4] = 0;
          jacobianMatrix[1][5] = 0;
          jacobianMatrix[1][6] = 0;
          jacobianMatrix[2][0] = 0;
          jacobianMatrix[2][1] = 0;
          jacobianMatrix[2][2] = 0;
          jacobianMatrix[2][3] = 0;
          jacobianMatrix[2][4] = 0;
          jacobianMatrix[2][5] = 0;
          jacobianMatrix[2][6] = 0;
          jacobianMatrix[3][0] = 0;
          jacobianMatrix[3][1] = 0;
          jacobianMatrix[3][2] = 0;
          jacobianMatrix[3][3] = 0;
          jacobianMatrix[3][4] = 0;
          jacobianMatrix[3][5] = 0;
          jacobianMatrix[3][6] = 0;
          jacobianMatrix[4][0] = 0;
          jacobianMatrix[4][1] = 0;
          jacobianMatrix[4][2] = -(Zc1*dxLowLimit(c1 + q1*Zc1,0));
          jacobianMatrix[4][3] = 0;
          jacobianMatrix[4][4] = 1;
          jacobianMatrix[4][5] = 0;
          jacobianMatrix[4][6] = 0;
          jacobianMatrix[5][0] = 0;
          jacobianMatrix[5][1] = 0;
          jacobianMatrix[5][2] = 0;
          jacobianMatrix[5][3] = -(Zc2*dxLowLimit(c2 + q2*Zc2,0));
          jacobianMatrix[5][4] = 0;
          jacobianMatrix[5][5] = 1;
          jacobianMatrix[5][6] = 0;
          jacobianMatrix[6][0] = 0;
          jacobianMatrix[6][1] = -Zcmp;
          jacobianMatrix[6][2] = 0;
          jacobianMatrix[6][3] = 0;
          jacobianMatrix[6][4] = 0;
          jacobianMatrix[6][5] = 0;
          jacobianMatrix[6][6] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          xmp=stateVark[0];
          vmp=stateVark[1];
          q1=stateVark[2];
          q2=stateVark[3];
          p1=stateVark[4];
          p2=stateVark[5];
          fmp=stateVark[6];
          //Expressions
          xp = Lever*thetamr + xp0;
          vp = Lever*wmr;
        }

        //Calculate the delayed parts

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];

        //Write new values to nodes
        //Port P1
        (*mpND_p1)=p1;
        (*mpND_q1)=q1;
        (*mpND_dE1)=dE1;
        //Port P2
        (*mpND_p2)=p2;
        (*mpND_q2)=q2;
        (*mpND_dE2)=dE2;
        //Port Pmr
        //outputVariables
        (*mpxp)=xp;
        (*mpvp)=vp;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // HYDRAULICPISTONJLOAD_HPP_INCLUDED
