#ifndef AEROJETENGINE_HPP_INCLUDED
#define AEROJETENGINE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file AeroJetEngine.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Mon 14 Oct 2013 17:41:50
//! @brief Calulates the mass of remaining fuel in tank
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, HOPSAN++, CompgenModels}/AeroComponents.nb*/

using namespace hopsan;

class AeroJetEngine : public ComponentQ
{
private:
     double thrustmax;
     double SFC;
     double BR;
     double thau;
     double Cspeed;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[2];
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double uin;
     double rho;
     double Ta;
     double p0;
     double Vsound;
     double speed;
     //outputVariables
     double thrust;
     double mfuel;
     double Shspeed;
     double qmfuel;
     //Expressions variables
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpuin;
     double *mprho;
     double *mpTa;
     double *mpp0;
     double *mpVsound;
     double *mpspeed;
     //inputParameters pointers
     double *mpthrustmax;
     double *mpSFC;
     double *mpBR;
     double *mpthau;
     double *mpCspeed;
     //outputVariables pointers
     double *mpthrust;
     double *mpmfuel;
     double *mpShspeed;
     double *mpqmfuel;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart20;
     Delay mDelayedPart21;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroJetEngine();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(2,2);
        systemEquations.create(2);
        delayedPart.create(3,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("uin","Throttle setting 0-1","",1.,&mpuin);
            addInputVariable("rho","The density at altitude \
h","kg/m3",1.25,&mprho);
            addInputVariable("Ta","Temperature at altitude \
h","K",273.,&mpTa);
            addInputVariable("p0","Pressure at altitude \
h","Pa",100000.,&mpp0);
            addInputVariable("Vsound","Speed of sound at altitude \
h","m/s",340.,&mpVsound);
            addInputVariable("speed","Air speed","m/s",100.,&mpspeed);

        //Add inputParammeters to the component
            addInputVariable("thrustmax", "Max thrust", "N", \
5000.,&mpthrustmax);
            addInputVariable("SFC", "Nominal thrust specific fuel \
consumption", "kg/(N s)", 0.0000171,&mpSFC);
            addInputVariable("BR", "Bypass ratio", "", 2,&mpBR);
            addInputVariable("thau", "Engine time constant", "s", \
5.,&mpthau);
            addInputVariable("Cspeed", "thrust-speed coefficient", "", \
1.,&mpCspeed);
        //Add outputVariables to the component
            addOutputVariable("thrust","Thrust","N",5000.,&mpthrust);
            addOutputVariable("mfuel","Burnt fuel amount","kg",0.,&mpmfuel);
            addOutputVariable("Shspeed","Engine shaft \
speed","rad/s",1.,&mpShspeed);
            addOutputVariable("qmfuel","Fuel, mass \
flow","kg/s",1.,&mpqmfuel);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
        mpSolver = new EquationSystemSolver(this,2);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        uin = (*mpuin);
        rho = (*mprho);
        Ta = (*mpTa);
        p0 = (*mpp0);
        Vsound = (*mpVsound);
        speed = (*mpspeed);

        //Read inputParameters from nodes
        thrustmax = (*mpthrustmax);
        SFC = (*mpSFC);
        BR = (*mpBR);
        thau = (*mpthau);
        Cspeed = (*mpCspeed);

        //Read outputVariables from nodes
        thrust = (*mpthrust);
        mfuel = (*mpmfuel);
        Shspeed = (*mpShspeed);
        qmfuel = (*mpqmfuel);

//==This code has been autogenerated using Compgen==


        //Initialize delays
        delayParts1[1] = (mTimestep*thrust - 2.*thau*thrust - \
0.8*mTimestep*rho*thrustmax*uin)/(mTimestep + 2.*thau);
        mDelayedPart11.initialize(mNstep,delayParts1[1]);
        delayParts2[1] = (-2*mfuel - mTimestep*SFC*thrust)/2.;
        mDelayedPart21.initialize(mNstep,delayParts2[1]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(2);
        Vec stateVark(2);
        Vec deltaStateVar(2);

        //Read variables from nodes

        //Read inputVariables from nodes
        uin = (*mpuin);
        rho = (*mprho);
        Ta = (*mpTa);
        p0 = (*mpp0);
        Vsound = (*mpVsound);
        speed = (*mpspeed);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = thrust;
        stateVark[1] = mfuel;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //JetEngine
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =thrust - \
(0.8*mTimestep*rho*thrustmax*uin)/(mTimestep + 2.*thau) + delayedPart[1][1];
          systemEquations[1] =mfuel - (mTimestep*SFC*thrust)/2. + \
delayedPart[2][1];

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = 0.;
          jacobianMatrix[1][0] = -(mTimestep*SFC)/2.;
          jacobianMatrix[1][1] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          thrust=stateVark[0];
          mfuel=stateVark[1];
          //Expressions
          Shspeed = Cspeed*thrust;
          qmfuel = SFC*thrust;
        }

        //Calculate the delayed parts
        delayParts1[1] = (mTimestep*thrust - 2.*thau*thrust - \
0.8*mTimestep*rho*thrustmax*uin)/(mTimestep + 2.*thau);
        delayParts2[1] = (-2*mfuel - mTimestep*SFC*thrust)/2.;

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];

        //Write new values to nodes
        //outputVariables
        (*mpthrust)=thrust;
        (*mpmfuel)=mfuel;
        (*mpShspeed)=Shspeed;
        (*mpqmfuel)=qmfuel;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);
        mDelayedPart21.update(delayParts2[1]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROJETENGINE_HPP_INCLUDED
