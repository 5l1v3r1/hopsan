#ifndef AEROTURBZFILTER_HPP_INCLUDED
#define AEROTURBZFILTER_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file \
C:\HopsanTrunk\ComponentLibraries\defaultLibrary\Special\AeroComponents\AeroT\
urbZfilter.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Sat 3 May 2014 00:27:31
//! @brief First order low pass filter
//! @ingroup AeroComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, Users, petkr14.IEI, Documents, CompgenNG}/AeroFilters.nb*/

using namespace hopsan;

class AeroTurbZfilter : public ComponentSignal
{
private:
     double sn;
     double Lw;
     double delayParts1[9];
     double delayParts2[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[1];
     int mNstep;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double V;
     double noise;
     //outputVariables
     double dw;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpV;
     double *mpnoise;
     //outputVariables pointers
     double *mpdw;
     Delay mDelayedPart10;
     Delay mDelayedPart11;
     Delay mDelayedPart12;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new AeroTurbZfilter();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(1,1);
        systemEquations.create(1);
        delayedPart.create(2,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        //Add inputVariables to the component
            addInputVariable("V","speed","m/s",100.,&mpV);
            addInputVariable("noise","noise input"," ",0.,&mpnoise);

        //Add outputVariables to the component
            addOutputVariable("dw","turbulence vertical \
speed","m/s",0.,&mpdw);

//==This code has been autogenerated using Compgen==
        //Add constants/parameters
            addConstant("sn", "turbulense intensity", "m/s", 1.,sn);
            addConstant("Lw", "turbulence scale length", "", 525.,Lw);
        mpSolver = new EquationSystemSolver(this,1);
     }

    void initialize()
     {
        //Read port variable pointers from nodes

        //Read variables from nodes

        //Read inputVariables from nodes
        V = (*mpV);
        noise = (*mpnoise);

        //Read outputVariables from nodes
        dw = (*mpdw);

//==This code has been autogenerated using Compgen==


        //Initialize delays
        delayParts1[1] = (-8.*dw*Power(Lw,2) - \
1.5957697955504146*Sqrt(Lw)*Power(mTimestep,2)*noise*sn*Power(Abs(1. + \
V),1.5) + 2.*dw*Power(mTimestep,2)*Power(Abs(1. + V),2))/(4.*Power(Lw,2) + \
4.*Lw*mTimestep*Abs(1. + V) + Power(mTimestep,2)*Power(Abs(1. + V),2));
        mDelayedPart11.initialize(mNstep,delayParts1[1]);
        delayParts1[2] = (4.*dw*Power(Lw,2) + \
2.7639543630771177*Power(Lw,1.5)*mTimestep*noise*sn*Sqrt(Abs(1. + V)) - \
4.*dw*Lw*mTimestep*Abs(1. + V) - \
0.7978848977752073*Sqrt(Lw)*Power(mTimestep,2)*noise*sn*Power(Abs(1. + \
V),1.5) + dw*Power(mTimestep,2)*Power(Abs(1. + V),2))/(4.*Power(Lw,2) + \
4.*Lw*mTimestep*Abs(1. + V) + Power(mTimestep,2)*Power(Abs(1. + V),2));
        mDelayedPart12.initialize(mNstep,delayParts1[2]);

        delayedPart[1][1] = delayParts1[1];
        delayedPart[1][2] = mDelayedPart12.getIdx(1);
     }
    void simulateOneTimestep()
     {
        Vec stateVar(1);
        Vec stateVark(1);
        Vec deltaStateVar(1);

        //Read variables from nodes

        //Read inputVariables from nodes
        V = (*mpV);
        noise = (*mpnoise);

        //LocalExpressions

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = dw;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //TurbZfilter
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =dw + (Sqrt(Lw)*mTimestep*noise*sn*Sqrt(Abs(1. + \
V))*(-2.7639543630771177*Lw - 0.7978848977752073*mTimestep*Abs(1. + \
V)))/(4.*Power(Lw,2) + 4.*Lw*mTimestep*Abs(1. + V) + \
Power(mTimestep,2)*Power(Abs(1. + V),2)) + delayedPart[1][1] + \
delayedPart[1][2];

          //Jacobian matrix
          jacobianMatrix[0][0] = 1.;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          dw=stateVark[0];
        }

        //Calculate the delayed parts
        delayParts1[1] = (-8.*dw*Power(Lw,2) - \
1.5957697955504146*Sqrt(Lw)*Power(mTimestep,2)*noise*sn*Power(Abs(1. + \
V),1.5) + 2.*dw*Power(mTimestep,2)*Power(Abs(1. + V),2))/(4.*Power(Lw,2) + \
4.*Lw*mTimestep*Abs(1. + V) + Power(mTimestep,2)*Power(Abs(1. + V),2));
        delayParts1[2] = (4.*dw*Power(Lw,2) + \
2.7639543630771177*Power(Lw,1.5)*mTimestep*noise*sn*Sqrt(Abs(1. + V)) - \
4.*dw*Lw*mTimestep*Abs(1. + V) - \
0.7978848977752073*Sqrt(Lw)*Power(mTimestep,2)*noise*sn*Power(Abs(1. + \
V),1.5) + dw*Power(mTimestep,2)*Power(Abs(1. + V),2))/(4.*Power(Lw,2) + \
4.*Lw*mTimestep*Abs(1. + V) + Power(mTimestep,2)*Power(Abs(1. + V),2));

        delayedPart[1][1] = delayParts1[1];
        delayedPart[1][2] = mDelayedPart12.getIdx(0);

        //Write new values to nodes
        //outputVariables
        (*mpdw)=dw;

        //Update the delayed variabels
        mDelayedPart11.update(delayParts1[1]);
        mDelayedPart12.update(delayParts1[2]);

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // AEROTURBZFILTER_HPP_INCLUDED
